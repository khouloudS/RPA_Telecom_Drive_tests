{"ast":null,"code":"'use strict';\n/**\r\n * Merges an array of buffers into a new buffer.\r\n *\r\n * @param {Buffer[]} list The array of buffers to concat\r\n * @param {Number} totalLength The total length of buffers in the list\r\n * @return {Buffer} The resulting buffer\r\n * @public\r\n */\n\nfunction concat(list, totalLength) {\n  const target = Buffer.allocUnsafe(totalLength);\n  var offset = 0;\n\n  for (var i = 0; i < list.length; i++) {\n    const buf = list[i];\n    buf.copy(target, offset);\n    offset += buf.length;\n  }\n\n  return target;\n}\n/**\r\n * Masks a buffer using the given mask.\r\n *\r\n * @param {Buffer} source The buffer to mask\r\n * @param {Buffer} mask The mask to use\r\n * @param {Buffer} output The buffer where to store the result\r\n * @param {Number} offset The offset at which to start writing\r\n * @param {Number} length The number of bytes to mask.\r\n * @public\r\n */\n\n\nfunction _mask(source, mask, output, offset, length) {\n  for (var i = 0; i < length; i++) {\n    output[offset + i] = source[i] ^ mask[i & 3];\n  }\n}\n/**\r\n * Unmasks a buffer using the given mask.\r\n *\r\n * @param {Buffer} buffer The buffer to unmask\r\n * @param {Buffer} mask The mask to use\r\n * @public\r\n */\n\n\nfunction _unmask(buffer, mask) {\n  // Required until https://github.com/nodejs/node/issues/9006 is resolved.\n  const length = buffer.length;\n\n  for (var i = 0; i < length; i++) {\n    buffer[i] ^= mask[i & 3];\n  }\n}\n\ntry {\n  const bufferUtil = require('bufferutil');\n\n  const bu = bufferUtil.BufferUtil || bufferUtil;\n  module.exports = {\n    mask(source, mask, output, offset, length) {\n      if (length < 48) _mask(source, mask, output, offset, length);else bu.mask(source, mask, output, offset, length);\n    },\n\n    unmask(buffer, mask) {\n      if (buffer.length < 32) _unmask(buffer, mask);else bu.unmask(buffer, mask);\n    },\n\n    concat\n  };\n} catch (e)\n/* istanbul ignore next */\n{\n  module.exports = {\n    concat,\n    mask: _mask,\n    unmask: _unmask\n  };\n}","map":{"version":3,"sources":["C:/Users/khouloud/Documents/PI/MERN_Stack_PI/node_modules/ws/lib/buffer-util.js"],"names":["concat","list","totalLength","target","Buffer","allocUnsafe","offset","i","length","buf","copy","_mask","source","mask","output","_unmask","buffer","bufferUtil","require","bu","BufferUtil","module","exports","unmask","e"],"mappings":"AAAA;AAEA;;;;;;;;;AAQA,SAASA,MAAT,CAAiBC,IAAjB,EAAuBC,WAAvB,EAAoC;AAClC,QAAMC,MAAM,GAAGC,MAAM,CAACC,WAAP,CAAmBH,WAAnB,CAAf;AACA,MAAII,MAAM,GAAG,CAAb;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAAI,CAACO,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,UAAME,GAAG,GAAGR,IAAI,CAACM,CAAD,CAAhB;AACAE,IAAAA,GAAG,CAACC,IAAJ,CAASP,MAAT,EAAiBG,MAAjB;AACAA,IAAAA,MAAM,IAAIG,GAAG,CAACD,MAAd;AACD;;AAED,SAAOL,MAAP;AACD;AAED;;;;;;;;;;;;AAUA,SAASQ,KAAT,CAAgBC,MAAhB,EAAwBC,IAAxB,EAA8BC,MAA9B,EAAsCR,MAAtC,EAA8CE,MAA9C,EAAsD;AACpD,OAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,MAApB,EAA4BD,CAAC,EAA7B,EAAiC;AAC/BO,IAAAA,MAAM,CAACR,MAAM,GAAGC,CAAV,CAAN,GAAqBK,MAAM,CAACL,CAAD,CAAN,GAAYM,IAAI,CAACN,CAAC,GAAG,CAAL,CAArC;AACD;AACF;AAED;;;;;;;;;AAOA,SAASQ,OAAT,CAAkBC,MAAlB,EAA0BH,IAA1B,EAAgC;AAC9B;AACA,QAAML,MAAM,GAAGQ,MAAM,CAACR,MAAtB;;AACA,OAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,MAApB,EAA4BD,CAAC,EAA7B,EAAiC;AAC/BS,IAAAA,MAAM,CAACT,CAAD,CAAN,IAAaM,IAAI,CAACN,CAAC,GAAG,CAAL,CAAjB;AACD;AACF;;AAED,IAAI;AACF,QAAMU,UAAU,GAAGC,OAAO,CAAC,YAAD,CAA1B;;AACA,QAAMC,EAAE,GAAGF,UAAU,CAACG,UAAX,IAAyBH,UAApC;AAEAI,EAAAA,MAAM,CAACC,OAAP,GAAiB;AACfT,IAAAA,IAAI,CAAED,MAAF,EAAUC,IAAV,EAAgBC,MAAhB,EAAwBR,MAAxB,EAAgCE,MAAhC,EAAwC;AAC1C,UAAIA,MAAM,GAAG,EAAb,EAAiBG,KAAK,CAACC,MAAD,EAASC,IAAT,EAAeC,MAAf,EAAuBR,MAAvB,EAA+BE,MAA/B,CAAL,CAAjB,KACKW,EAAE,CAACN,IAAH,CAAQD,MAAR,EAAgBC,IAAhB,EAAsBC,MAAtB,EAA8BR,MAA9B,EAAsCE,MAAtC;AACN,KAJc;;AAKfe,IAAAA,MAAM,CAAEP,MAAF,EAAUH,IAAV,EAAgB;AACpB,UAAIG,MAAM,CAACR,MAAP,GAAgB,EAApB,EAAwBO,OAAO,CAACC,MAAD,EAASH,IAAT,CAAP,CAAxB,KACKM,EAAE,CAACI,MAAH,CAAUP,MAAV,EAAkBH,IAAlB;AACN,KARc;;AASfb,IAAAA;AATe,GAAjB;AAWD,CAfD,CAeE,OAAOwB,CAAP;AAAU;AAA2B;AACrCH,EAAAA,MAAM,CAACC,OAAP,GAAiB;AAAEtB,IAAAA,MAAF;AAAUa,IAAAA,IAAI,EAAEF,KAAhB;AAAuBY,IAAAA,MAAM,EAAER;AAA/B,GAAjB;AACD","sourcesContent":["'use strict';\r\n\r\n/**\r\n * Merges an array of buffers into a new buffer.\r\n *\r\n * @param {Buffer[]} list The array of buffers to concat\r\n * @param {Number} totalLength The total length of buffers in the list\r\n * @return {Buffer} The resulting buffer\r\n * @public\r\n */\r\nfunction concat (list, totalLength) {\r\n  const target = Buffer.allocUnsafe(totalLength);\r\n  var offset = 0;\r\n\r\n  for (var i = 0; i < list.length; i++) {\r\n    const buf = list[i];\r\n    buf.copy(target, offset);\r\n    offset += buf.length;\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\n/**\r\n * Masks a buffer using the given mask.\r\n *\r\n * @param {Buffer} source The buffer to mask\r\n * @param {Buffer} mask The mask to use\r\n * @param {Buffer} output The buffer where to store the result\r\n * @param {Number} offset The offset at which to start writing\r\n * @param {Number} length The number of bytes to mask.\r\n * @public\r\n */\r\nfunction _mask (source, mask, output, offset, length) {\r\n  for (var i = 0; i < length; i++) {\r\n    output[offset + i] = source[i] ^ mask[i & 3];\r\n  }\r\n}\r\n\r\n/**\r\n * Unmasks a buffer using the given mask.\r\n *\r\n * @param {Buffer} buffer The buffer to unmask\r\n * @param {Buffer} mask The mask to use\r\n * @public\r\n */\r\nfunction _unmask (buffer, mask) {\r\n  // Required until https://github.com/nodejs/node/issues/9006 is resolved.\r\n  const length = buffer.length;\r\n  for (var i = 0; i < length; i++) {\r\n    buffer[i] ^= mask[i & 3];\r\n  }\r\n}\r\n\r\ntry {\r\n  const bufferUtil = require('bufferutil');\r\n  const bu = bufferUtil.BufferUtil || bufferUtil;\r\n\r\n  module.exports = {\r\n    mask (source, mask, output, offset, length) {\r\n      if (length < 48) _mask(source, mask, output, offset, length);\r\n      else bu.mask(source, mask, output, offset, length);\r\n    },\r\n    unmask (buffer, mask) {\r\n      if (buffer.length < 32) _unmask(buffer, mask);\r\n      else bu.unmask(buffer, mask);\r\n    },\r\n    concat\r\n  };\r\n} catch (e) /* istanbul ignore next */ {\r\n  module.exports = { concat, mask: _mask, unmask: _unmask };\r\n}\r\n"]},"metadata":{},"sourceType":"script"}