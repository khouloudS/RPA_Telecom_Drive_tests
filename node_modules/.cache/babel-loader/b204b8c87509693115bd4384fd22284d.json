{"ast":null,"code":"'use strict';\n\nconst crypto = require('crypto');\n\nconst PerMessageDeflate = require('./permessage-deflate');\n\nconst bufferUtil = require('./buffer-util');\n\nconst validation = require('./validation');\n\nconst constants = require('./constants');\n/**\r\n * HyBi Sender implementation.\r\n */\n\n\nclass Sender {\n  /**\r\n   * Creates a Sender instance.\r\n   *\r\n   * @param {net.Socket} socket The connection socket\r\n   * @param {Object} extensions An object containing the negotiated extensions\r\n   */\n  constructor(socket, extensions) {\n    this._extensions = extensions || {};\n    this._socket = socket;\n    this._firstFragment = true;\n    this._compress = false;\n    this._bufferedBytes = 0;\n    this._deflating = false;\n    this._queue = [];\n  }\n  /**\r\n   * Frames a piece of data according to the HyBi WebSocket protocol.\r\n   *\r\n   * @param {Buffer} data The data to frame\r\n   * @param {Object} options Options object\r\n   * @param {Number} options.opcode The opcode\r\n   * @param {Boolean} options.readOnly Specifies whether `data` can be modified\r\n   * @param {Boolean} options.fin Specifies whether or not to set the FIN bit\r\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\r\n   * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit\r\n   * @return {Buffer[]} The framed data as a list of `Buffer` instances\r\n   * @public\r\n   */\n\n\n  static frame(data, options) {\n    const merge = data.length < 1024 || options.mask && options.readOnly;\n    var offset = options.mask ? 6 : 2;\n    var payloadLength = data.length;\n\n    if (data.length >= 65536) {\n      offset += 8;\n      payloadLength = 127;\n    } else if (data.length > 125) {\n      offset += 2;\n      payloadLength = 126;\n    }\n\n    const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);\n    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n    if (options.rsv1) target[0] |= 0x40;\n\n    if (payloadLength === 126) {\n      target.writeUInt16BE(data.length, 2);\n    } else if (payloadLength === 127) {\n      target.writeUInt32BE(0, 2);\n      target.writeUInt32BE(data.length, 6);\n    }\n\n    if (!options.mask) {\n      target[1] = payloadLength;\n\n      if (merge) {\n        data.copy(target, offset);\n        return [target];\n      }\n\n      return [target, data];\n    }\n\n    const mask = crypto.randomBytes(4);\n    target[1] = payloadLength | 0x80;\n    target[offset - 4] = mask[0];\n    target[offset - 3] = mask[1];\n    target[offset - 2] = mask[2];\n    target[offset - 1] = mask[3];\n\n    if (merge) {\n      bufferUtil.mask(data, mask, target, offset, data.length);\n      return [target];\n    }\n\n    bufferUtil.mask(data, mask, data, 0, data.length);\n    return [target, data];\n  }\n  /**\r\n   * Sends a close message to the other peer.\r\n   *\r\n   * @param {(Number|undefined)} code The status code component of the body\r\n   * @param {String} data The message component of the body\r\n   * @param {Boolean} mask Specifies whether or not to mask the message\r\n   * @param {Function} cb Callback\r\n   * @public\r\n   */\n\n\n  close(code, data, mask, cb) {\n    var buf;\n\n    if (code === undefined) {\n      buf = constants.EMPTY_BUFFER;\n    } else if (typeof code !== 'number' || !validation.isValidStatusCode(code)) {\n      throw new TypeError('First argument must be a valid error code number');\n    } else if (data === undefined || data === '') {\n      buf = Buffer.allocUnsafe(2);\n      buf.writeUInt16BE(code, 0);\n    } else {\n      buf = Buffer.allocUnsafe(2 + Buffer.byteLength(data));\n      buf.writeUInt16BE(code, 0);\n      buf.write(data, 2);\n    }\n\n    if (this._deflating) {\n      this.enqueue([this.doClose, buf, mask, cb]);\n    } else {\n      this.doClose(buf, mask, cb);\n    }\n  }\n  /**\r\n   * Frames and sends a close message.\r\n   *\r\n   * @param {Buffer} data The message to send\r\n   * @param {Boolean} mask Specifies whether or not to mask `data`\r\n   * @param {Function} cb Callback\r\n   * @private\r\n   */\n\n\n  doClose(data, mask, cb) {\n    this.sendFrame(Sender.frame(data, {\n      fin: true,\n      rsv1: false,\n      opcode: 0x08,\n      mask,\n      readOnly: false\n    }), cb);\n  }\n  /**\r\n   * Sends a ping message to the other peer.\r\n   *\r\n   * @param {*} data The message to send\r\n   * @param {Boolean} mask Specifies whether or not to mask `data`\r\n   * @param {Function} cb Callback\r\n   * @public\r\n   */\n\n\n  ping(data, mask, cb) {\n    var readOnly = true;\n\n    if (!Buffer.isBuffer(data)) {\n      if (data instanceof ArrayBuffer) {\n        data = Buffer.from(data);\n      } else if (ArrayBuffer.isView(data)) {\n        data = viewToBuffer(data);\n      } else {\n        data = Buffer.from(data);\n        readOnly = false;\n      }\n    }\n\n    if (this._deflating) {\n      this.enqueue([this.doPing, data, mask, readOnly, cb]);\n    } else {\n      this.doPing(data, mask, readOnly, cb);\n    }\n  }\n  /**\r\n   * Frames and sends a ping message.\r\n   *\r\n   * @param {*} data The message to send\r\n   * @param {Boolean} mask Specifies whether or not to mask `data`\r\n   * @param {Boolean} readOnly Specifies whether `data` can be modified\r\n   * @param {Function} cb Callback\r\n   * @private\r\n   */\n\n\n  doPing(data, mask, readOnly, cb) {\n    this.sendFrame(Sender.frame(data, {\n      fin: true,\n      rsv1: false,\n      opcode: 0x09,\n      mask,\n      readOnly\n    }), cb);\n  }\n  /**\r\n   * Sends a pong message to the other peer.\r\n   *\r\n   * @param {*} data The message to send\r\n   * @param {Boolean} mask Specifies whether or not to mask `data`\r\n   * @param {Function} cb Callback\r\n   * @public\r\n   */\n\n\n  pong(data, mask, cb) {\n    var readOnly = true;\n\n    if (!Buffer.isBuffer(data)) {\n      if (data instanceof ArrayBuffer) {\n        data = Buffer.from(data);\n      } else if (ArrayBuffer.isView(data)) {\n        data = viewToBuffer(data);\n      } else {\n        data = Buffer.from(data);\n        readOnly = false;\n      }\n    }\n\n    if (this._deflating) {\n      this.enqueue([this.doPong, data, mask, readOnly, cb]);\n    } else {\n      this.doPong(data, mask, readOnly, cb);\n    }\n  }\n  /**\r\n   * Frames and sends a pong message.\r\n   *\r\n   * @param {*} data The message to send\r\n   * @param {Boolean} mask Specifies whether or not to mask `data`\r\n   * @param {Boolean} readOnly Specifies whether `data` can be modified\r\n   * @param {Function} cb Callback\r\n   * @private\r\n   */\n\n\n  doPong(data, mask, readOnly, cb) {\n    this.sendFrame(Sender.frame(data, {\n      fin: true,\n      rsv1: false,\n      opcode: 0x0a,\n      mask,\n      readOnly\n    }), cb);\n  }\n  /**\r\n   * Sends a data message to the other peer.\r\n   *\r\n   * @param {*} data The message to send\r\n   * @param {Object} options Options object\r\n   * @param {Boolean} options.compress Specifies whether or not to compress `data`\r\n   * @param {Boolean} options.binary Specifies whether `data` is binary or text\r\n   * @param {Boolean} options.fin Specifies whether the fragment is the last one\r\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\r\n   * @param {Function} cb Callback\r\n   * @public\r\n   */\n\n\n  send(data, options, cb) {\n    var opcode = options.binary ? 2 : 1;\n    var rsv1 = options.compress;\n    var readOnly = true;\n\n    if (!Buffer.isBuffer(data)) {\n      if (data instanceof ArrayBuffer) {\n        data = Buffer.from(data);\n      } else if (ArrayBuffer.isView(data)) {\n        data = viewToBuffer(data);\n      } else {\n        data = Buffer.from(data);\n        readOnly = false;\n      }\n    }\n\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    if (this._firstFragment) {\n      this._firstFragment = false;\n\n      if (rsv1 && perMessageDeflate) {\n        rsv1 = data.length >= perMessageDeflate._threshold;\n      }\n\n      this._compress = rsv1;\n    } else {\n      rsv1 = false;\n      opcode = 0;\n    }\n\n    if (options.fin) this._firstFragment = true;\n\n    if (perMessageDeflate) {\n      const opts = {\n        fin: options.fin,\n        rsv1,\n        opcode,\n        mask: options.mask,\n        readOnly\n      };\n\n      if (this._deflating) {\n        this.enqueue([this.dispatch, data, this._compress, opts, cb]);\n      } else {\n        this.dispatch(data, this._compress, opts, cb);\n      }\n    } else {\n      this.sendFrame(Sender.frame(data, {\n        fin: options.fin,\n        rsv1: false,\n        opcode,\n        mask: options.mask,\n        readOnly\n      }), cb);\n    }\n  }\n  /**\r\n   * Dispatches a data message.\r\n   *\r\n   * @param {Buffer} data The message to send\r\n   * @param {Boolean} compress Specifies whether or not to compress `data`\r\n   * @param {Object} options Options object\r\n   * @param {Number} options.opcode The opcode\r\n   * @param {Boolean} options.readOnly Specifies whether `data` can be modified\r\n   * @param {Boolean} options.fin Specifies whether or not to set the FIN bit\r\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\r\n   * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit\r\n   * @param {Function} cb Callback\r\n   * @private\r\n   */\n\n\n  dispatch(data, compress, options, cb) {\n    if (!compress) {\n      this.sendFrame(Sender.frame(data, options), cb);\n      return;\n    }\n\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n    this._deflating = true;\n    perMessageDeflate.compress(data, options.fin, (_, buf) => {\n      options.readOnly = false;\n      this.sendFrame(Sender.frame(buf, options), cb);\n      this._deflating = false;\n      this.dequeue();\n    });\n  }\n  /**\r\n   * Executes queued send operations.\r\n   *\r\n   * @private\r\n   */\n\n\n  dequeue() {\n    while (!this._deflating && this._queue.length) {\n      const params = this._queue.shift();\n\n      this._bufferedBytes -= params[1].length;\n      params[0].apply(this, params.slice(1));\n    }\n  }\n  /**\r\n   * Enqueues a send operation.\r\n   *\r\n   * @param {Array} params Send operation parameters.\r\n   * @private\r\n   */\n\n\n  enqueue(params) {\n    this._bufferedBytes += params[1].length;\n\n    this._queue.push(params);\n  }\n  /**\r\n   * Sends a frame.\r\n   *\r\n   * @param {Buffer[]} list The frame to send\r\n   * @param {Function} cb Callback\r\n   * @private\r\n   */\n\n\n  sendFrame(list, cb) {\n    if (list.length === 2) {\n      this._socket.write(list[0]);\n\n      this._socket.write(list[1], cb);\n    } else {\n      this._socket.write(list[0], cb);\n    }\n  }\n\n}\n\nmodule.exports = Sender;\n/**\r\n * Converts an `ArrayBuffer` view into a buffer.\r\n *\r\n * @param {(DataView|TypedArray)} view The view to convert\r\n * @return {Buffer} Converted view\r\n * @private\r\n */\n\nfunction viewToBuffer(view) {\n  const buf = Buffer.from(view.buffer);\n\n  if (view.byteLength !== view.buffer.byteLength) {\n    return buf.slice(view.byteOffset, view.byteOffset + view.byteLength);\n  }\n\n  return buf;\n}","map":{"version":3,"sources":["C:/Users/khouloud/Documents/PI/MERN_Stack_PI/node_modules/ws/lib/sender.js"],"names":["crypto","require","PerMessageDeflate","bufferUtil","validation","constants","Sender","constructor","socket","extensions","_extensions","_socket","_firstFragment","_compress","_bufferedBytes","_deflating","_queue","frame","data","options","merge","length","mask","readOnly","offset","payloadLength","target","Buffer","allocUnsafe","fin","opcode","rsv1","writeUInt16BE","writeUInt32BE","copy","randomBytes","close","code","cb","buf","undefined","EMPTY_BUFFER","isValidStatusCode","TypeError","byteLength","write","enqueue","doClose","sendFrame","ping","isBuffer","ArrayBuffer","from","isView","viewToBuffer","doPing","pong","doPong","send","binary","compress","perMessageDeflate","extensionName","_threshold","opts","dispatch","_","dequeue","params","shift","apply","slice","push","list","module","exports","view","buffer","byteOffset"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst crypto = require('crypto');\r\n\r\nconst PerMessageDeflate = require('./permessage-deflate');\r\nconst bufferUtil = require('./buffer-util');\r\nconst validation = require('./validation');\r\nconst constants = require('./constants');\r\n\r\n/**\r\n * HyBi Sender implementation.\r\n */\r\nclass Sender {\r\n  /**\r\n   * Creates a Sender instance.\r\n   *\r\n   * @param {net.Socket} socket The connection socket\r\n   * @param {Object} extensions An object containing the negotiated extensions\r\n   */\r\n  constructor (socket, extensions) {\r\n    this._extensions = extensions || {};\r\n    this._socket = socket;\r\n\r\n    this._firstFragment = true;\r\n    this._compress = false;\r\n\r\n    this._bufferedBytes = 0;\r\n    this._deflating = false;\r\n    this._queue = [];\r\n  }\r\n\r\n  /**\r\n   * Frames a piece of data according to the HyBi WebSocket protocol.\r\n   *\r\n   * @param {Buffer} data The data to frame\r\n   * @param {Object} options Options object\r\n   * @param {Number} options.opcode The opcode\r\n   * @param {Boolean} options.readOnly Specifies whether `data` can be modified\r\n   * @param {Boolean} options.fin Specifies whether or not to set the FIN bit\r\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\r\n   * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit\r\n   * @return {Buffer[]} The framed data as a list of `Buffer` instances\r\n   * @public\r\n   */\r\n  static frame (data, options) {\r\n    const merge = data.length < 1024 || (options.mask && options.readOnly);\r\n    var offset = options.mask ? 6 : 2;\r\n    var payloadLength = data.length;\r\n\r\n    if (data.length >= 65536) {\r\n      offset += 8;\r\n      payloadLength = 127;\r\n    } else if (data.length > 125) {\r\n      offset += 2;\r\n      payloadLength = 126;\r\n    }\r\n\r\n    const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);\r\n\r\n    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\r\n    if (options.rsv1) target[0] |= 0x40;\r\n\r\n    if (payloadLength === 126) {\r\n      target.writeUInt16BE(data.length, 2);\r\n    } else if (payloadLength === 127) {\r\n      target.writeUInt32BE(0, 2);\r\n      target.writeUInt32BE(data.length, 6);\r\n    }\r\n\r\n    if (!options.mask) {\r\n      target[1] = payloadLength;\r\n      if (merge) {\r\n        data.copy(target, offset);\r\n        return [target];\r\n      }\r\n\r\n      return [target, data];\r\n    }\r\n\r\n    const mask = crypto.randomBytes(4);\r\n\r\n    target[1] = payloadLength | 0x80;\r\n    target[offset - 4] = mask[0];\r\n    target[offset - 3] = mask[1];\r\n    target[offset - 2] = mask[2];\r\n    target[offset - 1] = mask[3];\r\n\r\n    if (merge) {\r\n      bufferUtil.mask(data, mask, target, offset, data.length);\r\n      return [target];\r\n    }\r\n\r\n    bufferUtil.mask(data, mask, data, 0, data.length);\r\n    return [target, data];\r\n  }\r\n\r\n  /**\r\n   * Sends a close message to the other peer.\r\n   *\r\n   * @param {(Number|undefined)} code The status code component of the body\r\n   * @param {String} data The message component of the body\r\n   * @param {Boolean} mask Specifies whether or not to mask the message\r\n   * @param {Function} cb Callback\r\n   * @public\r\n   */\r\n  close (code, data, mask, cb) {\r\n    var buf;\r\n\r\n    if (code === undefined) {\r\n      buf = constants.EMPTY_BUFFER;\r\n    } else if (typeof code !== 'number' || !validation.isValidStatusCode(code)) {\r\n      throw new TypeError('First argument must be a valid error code number');\r\n    } else if (data === undefined || data === '') {\r\n      buf = Buffer.allocUnsafe(2);\r\n      buf.writeUInt16BE(code, 0);\r\n    } else {\r\n      buf = Buffer.allocUnsafe(2 + Buffer.byteLength(data));\r\n      buf.writeUInt16BE(code, 0);\r\n      buf.write(data, 2);\r\n    }\r\n\r\n    if (this._deflating) {\r\n      this.enqueue([this.doClose, buf, mask, cb]);\r\n    } else {\r\n      this.doClose(buf, mask, cb);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Frames and sends a close message.\r\n   *\r\n   * @param {Buffer} data The message to send\r\n   * @param {Boolean} mask Specifies whether or not to mask `data`\r\n   * @param {Function} cb Callback\r\n   * @private\r\n   */\r\n  doClose (data, mask, cb) {\r\n    this.sendFrame(Sender.frame(data, {\r\n      fin: true,\r\n      rsv1: false,\r\n      opcode: 0x08,\r\n      mask,\r\n      readOnly: false\r\n    }), cb);\r\n  }\r\n\r\n  /**\r\n   * Sends a ping message to the other peer.\r\n   *\r\n   * @param {*} data The message to send\r\n   * @param {Boolean} mask Specifies whether or not to mask `data`\r\n   * @param {Function} cb Callback\r\n   * @public\r\n   */\r\n  ping (data, mask, cb) {\r\n    var readOnly = true;\r\n\r\n    if (!Buffer.isBuffer(data)) {\r\n      if (data instanceof ArrayBuffer) {\r\n        data = Buffer.from(data);\r\n      } else if (ArrayBuffer.isView(data)) {\r\n        data = viewToBuffer(data);\r\n      } else {\r\n        data = Buffer.from(data);\r\n        readOnly = false;\r\n      }\r\n    }\r\n\r\n    if (this._deflating) {\r\n      this.enqueue([this.doPing, data, mask, readOnly, cb]);\r\n    } else {\r\n      this.doPing(data, mask, readOnly, cb);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Frames and sends a ping message.\r\n   *\r\n   * @param {*} data The message to send\r\n   * @param {Boolean} mask Specifies whether or not to mask `data`\r\n   * @param {Boolean} readOnly Specifies whether `data` can be modified\r\n   * @param {Function} cb Callback\r\n   * @private\r\n   */\r\n  doPing (data, mask, readOnly, cb) {\r\n    this.sendFrame(Sender.frame(data, {\r\n      fin: true,\r\n      rsv1: false,\r\n      opcode: 0x09,\r\n      mask,\r\n      readOnly\r\n    }), cb);\r\n  }\r\n\r\n  /**\r\n   * Sends a pong message to the other peer.\r\n   *\r\n   * @param {*} data The message to send\r\n   * @param {Boolean} mask Specifies whether or not to mask `data`\r\n   * @param {Function} cb Callback\r\n   * @public\r\n   */\r\n  pong (data, mask, cb) {\r\n    var readOnly = true;\r\n\r\n    if (!Buffer.isBuffer(data)) {\r\n      if (data instanceof ArrayBuffer) {\r\n        data = Buffer.from(data);\r\n      } else if (ArrayBuffer.isView(data)) {\r\n        data = viewToBuffer(data);\r\n      } else {\r\n        data = Buffer.from(data);\r\n        readOnly = false;\r\n      }\r\n    }\r\n\r\n    if (this._deflating) {\r\n      this.enqueue([this.doPong, data, mask, readOnly, cb]);\r\n    } else {\r\n      this.doPong(data, mask, readOnly, cb);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Frames and sends a pong message.\r\n   *\r\n   * @param {*} data The message to send\r\n   * @param {Boolean} mask Specifies whether or not to mask `data`\r\n   * @param {Boolean} readOnly Specifies whether `data` can be modified\r\n   * @param {Function} cb Callback\r\n   * @private\r\n   */\r\n  doPong (data, mask, readOnly, cb) {\r\n    this.sendFrame(Sender.frame(data, {\r\n      fin: true,\r\n      rsv1: false,\r\n      opcode: 0x0a,\r\n      mask,\r\n      readOnly\r\n    }), cb);\r\n  }\r\n\r\n  /**\r\n   * Sends a data message to the other peer.\r\n   *\r\n   * @param {*} data The message to send\r\n   * @param {Object} options Options object\r\n   * @param {Boolean} options.compress Specifies whether or not to compress `data`\r\n   * @param {Boolean} options.binary Specifies whether `data` is binary or text\r\n   * @param {Boolean} options.fin Specifies whether the fragment is the last one\r\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\r\n   * @param {Function} cb Callback\r\n   * @public\r\n   */\r\n  send (data, options, cb) {\r\n    var opcode = options.binary ? 2 : 1;\r\n    var rsv1 = options.compress;\r\n    var readOnly = true;\r\n\r\n    if (!Buffer.isBuffer(data)) {\r\n      if (data instanceof ArrayBuffer) {\r\n        data = Buffer.from(data);\r\n      } else if (ArrayBuffer.isView(data)) {\r\n        data = viewToBuffer(data);\r\n      } else {\r\n        data = Buffer.from(data);\r\n        readOnly = false;\r\n      }\r\n    }\r\n\r\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\r\n\r\n    if (this._firstFragment) {\r\n      this._firstFragment = false;\r\n      if (rsv1 && perMessageDeflate) {\r\n        rsv1 = data.length >= perMessageDeflate._threshold;\r\n      }\r\n      this._compress = rsv1;\r\n    } else {\r\n      rsv1 = false;\r\n      opcode = 0;\r\n    }\r\n\r\n    if (options.fin) this._firstFragment = true;\r\n\r\n    if (perMessageDeflate) {\r\n      const opts = {\r\n        fin: options.fin,\r\n        rsv1,\r\n        opcode,\r\n        mask: options.mask,\r\n        readOnly\r\n      };\r\n\r\n      if (this._deflating) {\r\n        this.enqueue([this.dispatch, data, this._compress, opts, cb]);\r\n      } else {\r\n        this.dispatch(data, this._compress, opts, cb);\r\n      }\r\n    } else {\r\n      this.sendFrame(Sender.frame(data, {\r\n        fin: options.fin,\r\n        rsv1: false,\r\n        opcode,\r\n        mask: options.mask,\r\n        readOnly\r\n      }), cb);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Dispatches a data message.\r\n   *\r\n   * @param {Buffer} data The message to send\r\n   * @param {Boolean} compress Specifies whether or not to compress `data`\r\n   * @param {Object} options Options object\r\n   * @param {Number} options.opcode The opcode\r\n   * @param {Boolean} options.readOnly Specifies whether `data` can be modified\r\n   * @param {Boolean} options.fin Specifies whether or not to set the FIN bit\r\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\r\n   * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit\r\n   * @param {Function} cb Callback\r\n   * @private\r\n   */\r\n  dispatch (data, compress, options, cb) {\r\n    if (!compress) {\r\n      this.sendFrame(Sender.frame(data, options), cb);\r\n      return;\r\n    }\r\n\r\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\r\n\r\n    this._deflating = true;\r\n    perMessageDeflate.compress(data, options.fin, (_, buf) => {\r\n      options.readOnly = false;\r\n      this.sendFrame(Sender.frame(buf, options), cb);\r\n      this._deflating = false;\r\n      this.dequeue();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Executes queued send operations.\r\n   *\r\n   * @private\r\n   */\r\n  dequeue () {\r\n    while (!this._deflating && this._queue.length) {\r\n      const params = this._queue.shift();\r\n\r\n      this._bufferedBytes -= params[1].length;\r\n      params[0].apply(this, params.slice(1));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enqueues a send operation.\r\n   *\r\n   * @param {Array} params Send operation parameters.\r\n   * @private\r\n   */\r\n  enqueue (params) {\r\n    this._bufferedBytes += params[1].length;\r\n    this._queue.push(params);\r\n  }\r\n\r\n  /**\r\n   * Sends a frame.\r\n   *\r\n   * @param {Buffer[]} list The frame to send\r\n   * @param {Function} cb Callback\r\n   * @private\r\n   */\r\n  sendFrame (list, cb) {\r\n    if (list.length === 2) {\r\n      this._socket.write(list[0]);\r\n      this._socket.write(list[1], cb);\r\n    } else {\r\n      this._socket.write(list[0], cb);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Sender;\r\n\r\n/**\r\n * Converts an `ArrayBuffer` view into a buffer.\r\n *\r\n * @param {(DataView|TypedArray)} view The view to convert\r\n * @return {Buffer} Converted view\r\n * @private\r\n */\r\nfunction viewToBuffer (view) {\r\n  const buf = Buffer.from(view.buffer);\r\n\r\n  if (view.byteLength !== view.buffer.byteLength) {\r\n    return buf.slice(view.byteOffset, view.byteOffset + view.byteLength);\r\n  }\r\n\r\n  return buf;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}