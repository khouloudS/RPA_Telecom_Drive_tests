{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\khouloud\\\\Documents\\\\PI\\\\MERN_Stack_PI\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\khouloud\\\\Documents\\\\PI\\\\MERN_Stack_PI\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst uuid = require(\"uuid\");\n\nconst connector_1 = require(\"./connector\");\n\nconst DEFAULT_TTL = 60 * 60 * 48;\n/**\n * Registrar connector implementation for twilsock\n */\n\nclass TwilsockConnector extends connector_1.Connector {\n  constructor(context, twilsock, config) {\n    super(config);\n    this.twilsock = twilsock;\n    this.context = context;\n    context.id = uuid.v4();\n    this.twilsock.on('stateChanged', state => {\n      if (state !== 'connected') {\n        this.emit('transportReady', false);\n      }\n    });\n    this.twilsock.on('registered', id => {\n      if (context && id === context.id && twilsock.state === 'connected') {\n        this.emit('transportReady', true);\n      }\n    });\n  }\n\n  setNotificationId(...args) {}\n\n  updateToken(token) {// no need to do anything here, twilsock backend handles it on it's own\n    // so just ignoring here\n  }\n\n  updateContextRequest(messageTypes) {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var context;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            context = {\n              product_id: _this.context.productId,\n              notification_protocol_version: 4,\n              endpoint_platform: _this.context.platform,\n              message_types: messageTypes\n            };\n\n            _this.emit('transportReady', false);\n\n            _context.next = 4;\n            return _this.twilsock.setNotificationsContext(_this.context.id, context);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  updateRegistration(registration, reasons) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (reasons.has('messageType')) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 2:\n            _context2.next = 4;\n            return _this2.updateContextRequest(Array.from(registration.messageTypes));\n\n          case 4:\n            return _context2.abrupt(\"return\", registration);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  }\n\n  removeRegistration() {\n    return this.twilsock.removeNotificationsContext(this.context.id);\n  }\n\n}\n\nexports.TwilsockConnector = TwilsockConnector;","map":{"version":3,"sources":["C:/Users/khouloud/Documents/PI/MERN_Stack_PI/node_modules/twilio-notifications/lib/twilsock.connector.js"],"names":["Object","defineProperty","exports","value","uuid","require","connector_1","DEFAULT_TTL","TwilsockConnector","Connector","constructor","context","twilsock","config","id","v4","on","state","emit","setNotificationId","args","updateToken","token","updateContextRequest","messageTypes","product_id","productId","notification_protocol_version","endpoint_platform","platform","message_types","setNotificationsContext","updateRegistration","registration","reasons","has","Array","from","removeRegistration","removeNotificationsContext"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAME,WAAW,GAAG,KAAK,EAAL,GAAU,EAA9B;AACA;;;;AAGA,MAAMC,iBAAN,SAAgCF,WAAW,CAACG,SAA5C,CAAsD;AAClDC,EAAAA,WAAW,CAACC,OAAD,EAAUC,QAAV,EAAoBC,MAApB,EAA4B;AACnC,UAAMA,MAAN;AACA,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKD,OAAL,GAAeA,OAAf;AACAA,IAAAA,OAAO,CAACG,EAAR,GAAaV,IAAI,CAACW,EAAL,EAAb;AACA,SAAKH,QAAL,CAAcI,EAAd,CAAiB,cAAjB,EAAiCC,KAAK,IAAI;AACtC,UAAIA,KAAK,KAAK,WAAd,EAA2B;AACvB,aAAKC,IAAL,CAAU,gBAAV,EAA4B,KAA5B;AACH;AACJ,KAJD;AAKA,SAAKN,QAAL,CAAcI,EAAd,CAAiB,YAAjB,EAA+BF,EAAE,IAAI;AACjC,UAAIH,OAAO,IAAIG,EAAE,KAAKH,OAAO,CAACG,EAA1B,IAAgCF,QAAQ,CAACK,KAAT,KAAmB,WAAvD,EAAoE;AAChE,aAAKC,IAAL,CAAU,gBAAV,EAA4B,IAA5B;AACH;AACJ,KAJD;AAKH;;AACDC,EAAAA,iBAAiB,CAAC,GAAGC,IAAJ,EAAU,CAAG;;AAC9BC,EAAAA,WAAW,CAACC,KAAD,EAAQ,CACf;AACA;AACH;;AACKC,EAAAA,oBAAN,CAA2BC,YAA3B,EAAyC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACjCb,YAAAA,OADiC,GACvB;AACVc,cAAAA,UAAU,EAAE,KAAI,CAACd,OAAL,CAAae,SADf;AAEVC,cAAAA,6BAA6B,EAAE,CAFrB;AAGVC,cAAAA,iBAAiB,EAAE,KAAI,CAACjB,OAAL,CAAakB,QAHtB;AAIVC,cAAAA,aAAa,EAAEN;AAJL,aADuB;;AAOrC,YAAA,KAAI,CAACN,IAAL,CAAU,gBAAV,EAA4B,KAA5B;;AAPqC;AAAA,mBAQ/B,KAAI,CAACN,QAAL,CAAcmB,uBAAd,CAAsC,KAAI,CAACpB,OAAL,CAAaG,EAAnD,EAAuDH,OAAvD,CAR+B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASxC;;AACKqB,EAAAA,kBAAN,CAAyBC,YAAzB,EAAuCC,OAAvC,EAAgD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gBACvCA,OAAO,CAACC,GAAR,CAAY,aAAZ,CADuC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,mBAItC,MAAI,CAACZ,oBAAL,CAA0Ba,KAAK,CAACC,IAAN,CAAWJ,YAAY,CAACT,YAAxB,CAA1B,CAJsC;;AAAA;AAAA,8CAKrCS,YALqC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAM/C;;AACDK,EAAAA,kBAAkB,GAAG;AACjB,WAAO,KAAK1B,QAAL,CAAc2B,0BAAd,CAAyC,KAAK5B,OAAL,CAAaG,EAAtD,CAAP;AACH;;AAzCiD;;AA2CtDZ,OAAO,CAACM,iBAAR,GAA4BA,iBAA5B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst uuid = require(\"uuid\");\nconst connector_1 = require(\"./connector\");\nconst DEFAULT_TTL = 60 * 60 * 48;\n/**\n * Registrar connector implementation for twilsock\n */\nclass TwilsockConnector extends connector_1.Connector {\n    constructor(context, twilsock, config) {\n        super(config);\n        this.twilsock = twilsock;\n        this.context = context;\n        context.id = uuid.v4();\n        this.twilsock.on('stateChanged', state => {\n            if (state !== 'connected') {\n                this.emit('transportReady', false);\n            }\n        });\n        this.twilsock.on('registered', id => {\n            if (context && id === context.id && twilsock.state === 'connected') {\n                this.emit('transportReady', true);\n            }\n        });\n    }\n    setNotificationId(...args) { }\n    updateToken(token) {\n        // no need to do anything here, twilsock backend handles it on it's own\n        // so just ignoring here\n    }\n    async updateContextRequest(messageTypes) {\n        let context = {\n            product_id: this.context.productId,\n            notification_protocol_version: 4,\n            endpoint_platform: this.context.platform,\n            message_types: messageTypes\n        };\n        this.emit('transportReady', false);\n        await this.twilsock.setNotificationsContext(this.context.id, context);\n    }\n    async updateRegistration(registration, reasons) {\n        if (!reasons.has('messageType')) {\n            return;\n        }\n        await this.updateContextRequest(Array.from(registration.messageTypes));\n        return registration;\n    }\n    removeRegistration() {\n        return this.twilsock.removeNotificationsContext(this.context.id);\n    }\n}\nexports.TwilsockConnector = TwilsockConnector;\n"]},"metadata":{},"sourceType":"script"}