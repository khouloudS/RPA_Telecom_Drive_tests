{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\khouloud\\\\Documents\\\\PI\\\\MERN_Stack_PI\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\khouloud\\\\Documents\\\\PI\\\\MERN_Stack_PI\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst logger_1 = require(\"./logger\");\n\nconst configuration_1 = require(\"./configuration\");\n\nconst media_1 = require(\"./media\");\n\nexports.Media = media_1.Media;\nexports.McsMedia = media_1.Media;\n\nconst transport_1 = require(\"./services/transport\");\n\nconst network_1 = require(\"./services/network\");\n\nconst log = logger_1.Logger.scope(''); //log.setLevel('trace');\n\nconst SDK_VERSION = require('./../package.json').version;\n\nconst MSG_NO_TOKEN = 'A valid Twilio token should be provided';\n/**\n * @classdesc A Client provides an interface for Media Content Service\n */\n\nclass Client {\n  /**\n   * @param {String} token - Access token\n   * @param {String} baseUrl - Base URL for Media Content Service, i.e. /v1/Services/{serviceSid}/Media\n   * @param {Client#ClientOptions} [options] - Options to customize the Client\n   */\n  constructor(token, baseUrl, options = {}) {\n    this.options = options;\n    this.options.logLevel = this.options.logLevel || 'silent';\n    this.config = new configuration_1.Configuration(token, baseUrl, this.options);\n\n    if (!token) {\n      throw new Error(MSG_NO_TOKEN);\n    }\n\n    log.setLevel(this.options.logLevel);\n    this.options.transport = this.options.transport || new transport_1.Transport();\n    this.transport = this.options.transport;\n    this.network = new network_1.Network(this.config, this.transport);\n  }\n  /**\n   * These options can be passed to Client constructor\n   * @typedef {Object} Client#ClientOptions\n   * @property {String} [logLevel='error'] - The level of logging to enable. Valid options\n   *   (from strictest to broadest): ['silent', 'error', 'warn', 'info', 'debug', 'trace']\n   */\n\n  /**\n   * Update the token used for Client operations\n   * @param {String} token - The JWT string of the new token\n   * @public\n   * @returns {void}\n   */\n\n\n  updateToken(token) {\n    log.info('updateToken');\n\n    if (!token) {\n      throw new Error(MSG_NO_TOKEN);\n    }\n\n    this.config.updateToken(token);\n  }\n  /**\n   * Gets media from media service\n   * @param {String} sid - Media's SID\n   * @public\n   * @returns {Promise<Media>}\n   */\n\n\n  get(sid) {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _this.network.get(\"\".concat(_this.config.baseUrl, \"/\").concat(sid));\n\n          case 2:\n            response = _context.sent;\n            return _context.abrupt(\"return\", new media_1.Media(_this.config, _this.network, response.body));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n  /**\n   * Posts raw content to media service\n   * @param {String} contentType - content type of media\n   * @param {String|Buffer} media - content to post\n   * @public\n   * @returns {Promise<Media>}\n   */\n\n\n  post(contentType, media) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _this2.network.post(_this2.config.baseUrl, media, contentType);\n\n          case 2:\n            response = _context2.sent;\n            return _context2.abrupt(\"return\", new media_1.Media(_this2.config, _this2.network, response.body));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  }\n  /**\n   * Posts FormData to media service. Can be used only with browser engine's FormData.\n   * In non-browser FormData case the method will do promise reject with\n   * new TypeError(\"Posting FormData supported only with browser engine's FormData\")\n   * @param {FormData} formData - form data to post\n   * @public\n   * @returns {Promise<Media>}\n   */\n\n\n  postFormData(formData) {\n    var _this3 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _this3.network.post(_this3.config.baseUrl, formData);\n\n          case 2:\n            response = _context3.sent;\n            return _context3.abrupt(\"return\", new media_1.Media(_this3.config, _this3.network, response.body));\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }))();\n  }\n\n}\n\nexports.Client = Client;\nexports.McsClient = Client;\nClient.version = SDK_VERSION;\nexports.default = Client;","map":{"version":3,"sources":["C:/Users/khouloud/Documents/PI/MERN_Stack_PI/node_modules/twilio-mcs-client/lib/client.js"],"names":["Object","defineProperty","exports","value","logger_1","require","configuration_1","media_1","Media","McsMedia","transport_1","network_1","log","Logger","scope","SDK_VERSION","version","MSG_NO_TOKEN","Client","constructor","token","baseUrl","options","logLevel","config","Configuration","Error","setLevel","transport","Transport","network","Network","updateToken","info","get","sid","response","body","post","contentType","media","postFormData","formData","McsClient","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst logger_1 = require(\"./logger\");\nconst configuration_1 = require(\"./configuration\");\nconst media_1 = require(\"./media\");\nexports.Media = media_1.Media;\nexports.McsMedia = media_1.Media;\nconst transport_1 = require(\"./services/transport\");\nconst network_1 = require(\"./services/network\");\nconst log = logger_1.Logger.scope('');\n//log.setLevel('trace');\nconst SDK_VERSION = require('./../package.json').version;\nconst MSG_NO_TOKEN = 'A valid Twilio token should be provided';\n/**\n * @classdesc A Client provides an interface for Media Content Service\n */\nclass Client {\n    /**\n     * @param {String} token - Access token\n     * @param {String} baseUrl - Base URL for Media Content Service, i.e. /v1/Services/{serviceSid}/Media\n     * @param {Client#ClientOptions} [options] - Options to customize the Client\n     */\n    constructor(token, baseUrl, options = {}) {\n        this.options = options;\n        this.options.logLevel = this.options.logLevel || 'silent';\n        this.config = new configuration_1.Configuration(token, baseUrl, this.options);\n        if (!token) {\n            throw new Error(MSG_NO_TOKEN);\n        }\n        log.setLevel(this.options.logLevel);\n        this.options.transport = this.options.transport || new transport_1.Transport();\n        this.transport = this.options.transport;\n        this.network = new network_1.Network(this.config, this.transport);\n    }\n    /**\n     * These options can be passed to Client constructor\n     * @typedef {Object} Client#ClientOptions\n     * @property {String} [logLevel='error'] - The level of logging to enable. Valid options\n     *   (from strictest to broadest): ['silent', 'error', 'warn', 'info', 'debug', 'trace']\n     */\n    /**\n     * Update the token used for Client operations\n     * @param {String} token - The JWT string of the new token\n     * @public\n     * @returns {void}\n     */\n    updateToken(token) {\n        log.info('updateToken');\n        if (!token) {\n            throw new Error(MSG_NO_TOKEN);\n        }\n        this.config.updateToken(token);\n    }\n    /**\n     * Gets media from media service\n     * @param {String} sid - Media's SID\n     * @public\n     * @returns {Promise<Media>}\n     */\n    async get(sid) {\n        let response = await this.network.get(`${this.config.baseUrl}/${sid}`);\n        return new media_1.Media(this.config, this.network, response.body);\n    }\n    /**\n     * Posts raw content to media service\n     * @param {String} contentType - content type of media\n     * @param {String|Buffer} media - content to post\n     * @public\n     * @returns {Promise<Media>}\n     */\n    async post(contentType, media) {\n        let response = await this.network.post(this.config.baseUrl, media, contentType);\n        return new media_1.Media(this.config, this.network, response.body);\n    }\n    /**\n     * Posts FormData to media service. Can be used only with browser engine's FormData.\n     * In non-browser FormData case the method will do promise reject with\n     * new TypeError(\"Posting FormData supported only with browser engine's FormData\")\n     * @param {FormData} formData - form data to post\n     * @public\n     * @returns {Promise<Media>}\n     */\n    async postFormData(formData) {\n        let response = await this.network.post(this.config.baseUrl, formData);\n        return new media_1.Media(this.config, this.network, response.body);\n    }\n}\nexports.Client = Client;\nexports.McsClient = Client;\nClient.version = SDK_VERSION;\nexports.default = Client;\n"]},"metadata":{},"sourceType":"script"}