{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\khouloud\\\\Documents\\\\PI\\\\MERN_Stack_PI\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\khouloud\\\\Documents\\\\PI\\\\MERN_Stack_PI\\\\src\\\\views\\\\driver\\\\Maps.js\";\nimport React from 'react';\nimport { withGoogleMap, withScriptjs, GoogleMap, Polyline, Marker } from 'react-google-maps';\nimport axios from \"axios\";\n\nclass Map extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      progress: []\n    };\n    this.path = [{\n      lat: 36.81477236601238,\n      lng: 10.189578804217952\n    }, {\n      lat: 36.81477236601238,\n      lng: 10.189650329355125\n    }, {\n      lat: 36.81477236601238,\n      lng: 10.189674171940629\n    }, {\n      lat: 36.81477236601238,\n      lng: 10.189698013216464\n    }, {\n      lat: 36.814810540600746,\n      lng: 10.189817222214975\n    }, {\n      lat: 36.81482962841204,\n      lng: 10.189841064800483\n    }, {\n      lat: 36.814848715170086,\n      lng: 10.18988874866182\n    }, {\n      lat: 36.8148868897204,\n      lng: 10.189960273798995\n    }, {\n      lat: 36.81490597751265,\n      lng: 10.189984115074827\n    }, {\n      lat: 36.81492506425167,\n      lng: 10.190007957660335\n    }, {\n      lat: 36.81494415098594,\n      lng: 10.190031798936168\n    }, {\n      lat: 36.814963238763895,\n      lng: 10.190055641521674\n    }, {\n      lat: 36.81498232548864,\n      lng: 10.190079482797508\n    }, {\n      lat: 36.81500141325708,\n      lng: 10.190103325383012\n    }, {\n      lat: 36.81502049997232,\n      lng: 10.190103325383012\n    }, {\n      lat: 36.81507776218638,\n      lng: 10.19015100793468\n    }, {\n      lat: 36.81511593557394,\n      lng: 10.190174850520187\n    }, {\n      lat: 36.81513502330911,\n      lng: 10.190174850520187\n    }, {\n      lat: 36.81515410999101,\n      lng: 10.190198691796018\n    }, {\n      lat: 36.81523045876796,\n      lng: 10.19024637565736\n    }, {\n      lat: 36.81524954647455,\n      lng: 10.190270218242865\n    }, {\n      lat: 36.8152686331279,\n      lng: 10.190294059518699\n    }, {\n      lat: 36.8153068074688,\n      lng: 10.190317902104203\n    }, {\n      lat: 36.815344981790645,\n      lng: 10.190389427241378\n    }, {\n      lat: 36.815383156093446,\n      lng: 10.190437111102717\n    }, {\n      lat: 36.815421329852995,\n      lng: 10.190460952378551\n    }, {\n      lat: 36.81545950411771,\n      lng: 10.19050863623989\n    }, {\n      lat: 36.81547859124295,\n      lng: 10.190532478825395\n    }, {\n      lat: 36.81549767836343,\n      lng: 10.19055632010123\n    }, {\n      lat: 36.81549767836343,\n      lng: 10.190604003962568\n    }, {\n      lat: 36.815516765479146,\n      lng: 10.190627845238405\n    }, {\n      lat: 36.8155358525901,\n      lng: 10.190651687823909\n    }, {\n      lat: 36.81557402627347,\n      lng: 10.190699371685248\n    }, {\n      lat: 36.815593113370156,\n      lng: 10.190723212961082\n    }, {\n      lat: 36.81561220046207,\n      lng: 10.19074705554659\n    }, {\n      lat: 36.81563128754922,\n      lng: 10.190770896822421\n    }, {\n      lat: 36.81563128754922,\n      lng: 10.190794738098255\n    }, {\n      lat: 36.81566946170928,\n      lng: 10.190890105820934\n    }, {\n      lat: 36.815707635850245,\n      lng: 10.19091394840644\n    }, {\n      lat: 36.81572672238936,\n      lng: 10.190937789682273\n    }, {\n      lat: 36.81578398355089,\n      lng: 10.191009314819446\n    }, {\n      lat: 36.81580307059521,\n      lng: 10.19103315740495\n    }, {\n      lat: 36.81582215763477,\n      lng: 10.19103315740495\n    }, {\n      lat: 36.815841244669585,\n      lng: 10.191056998680786\n    }, {\n      lat: 36.81586033169961,\n      lng: 10.191056998680786\n    }, {\n      lat: 36.815898505221185,\n      lng: 10.191104682542125\n    }, {\n      lat: 36.81591759223693,\n      lng: 10.191128525127631\n    }, {\n      lat: 36.81597485325567,\n      lng: 10.191152366403465\n    }, {\n      lat: 36.8159939402524,\n      lng: 10.191152366403465\n    }, {\n      lat: 36.81607028766746,\n      lng: 10.191176208988972\n    }, {\n      lat: 36.8161466355306,\n      lng: 10.191176208988972\n    }, {\n      lat: 36.816203896378,\n      lng: 10.191223891540638\n    }, {\n      lat: 36.816261156658314,\n      lng: 10.191271575401977\n    }, {\n      lat: 36.81631841742005,\n      lng: 10.191295417987483\n    }, {\n      lat: 36.816375678138925,\n      lng: 10.191343101848823\n    }, {\n      lat: 36.81639476503571,\n      lng: 10.191366943124656\n    }, {\n      lat: 36.81639476503571,\n      lng: 10.191390785710162\n    }, {\n      lat: 36.81639476503571,\n      lng: 10.191438469571501\n    }, {\n      lat: 36.81639476503571,\n      lng: 10.191462310847333\n    }, {\n      lat: 36.81639476503571,\n      lng: 10.191509994708674\n    }, {\n      lat: 36.816432938290745,\n      lng: 10.191629203707185\n    }, {\n      lat: 36.81647111205095,\n      lng: 10.191700728844358\n    }, {\n      lat: 36.816509285792165,\n      lng: 10.191843780428377\n    }, {\n      lat: 36.8165283726556,\n      lng: 10.191962989426889\n    }, {\n      lat: 36.81658563321743,\n      lng: 10.192034515873734\n    }, {\n      lat: 36.816642893212176,\n      lng: 10.192153724872249\n    }, {\n      lat: 36.816681066867716,\n      lng: 10.192249092594926\n    }, {\n      lat: 36.816700153688316,\n      lng: 10.1923206177321\n    }, {\n      lat: 36.816757414121625,\n      lng: 10.19236830159344\n    }, {\n      lat: 36.81679558719581,\n      lng: 10.19241598545478\n    }, {\n      lat: 36.816852847557755,\n      lng: 10.192439826730613\n    }, {\n      lat: 36.816891021108546,\n      lng: 10.192487510591953\n    }, {\n      lat: 36.81692919464032,\n      lng: 10.192511353177457\n    }, {\n      lat: 36.816948280874826,\n      lng: 10.192559035729124\n    }, {\n      lat: 36.81700554112254,\n      lng: 10.192582878314632\n    }, {\n      lat: 36.81704371459719,\n      lng: 10.192606719590465\n    }, {\n      lat: 36.81706280132738,\n      lng: 10.192606719590465\n    }, {\n      lat: 36.817120060965195,\n      lng: 10.192630562175971\n    }, {\n      lat: 36.817139147676315,\n      lng: 10.192654403451805\n    }, {\n      lat: 36.81719640778121,\n      lng: 10.192654403451805\n    }, {\n      lat: 36.81721549447333,\n      lng: 10.192654403451805\n    }, {\n      lat: 36.81725366784332,\n      lng: 10.192678246037309\n    }, {\n      lat: 36.81729184066997,\n      lng: 10.192678246037309\n    }, {\n      lat: 36.81731092733828,\n      lng: 10.192678246037309\n    }, {\n      lat: 36.817330014001854,\n      lng: 10.192678246037309\n    }, {\n      lat: 36.817349100660635,\n      lng: 10.192702087313144\n    }, {\n      lat: 36.817368187314685,\n      lng: 10.192725929898648\n    }, {\n      lat: 36.8174063606085,\n      lng: 10.192773612450315\n    }, {\n      lat: 36.81742544724824,\n      lng: 10.192797455035823\n    }, {\n      lat: 36.81742544724824,\n      lng: 10.192821296311656\n    }, {\n      lat: 36.81742544724824,\n      lng: 10.192868980172996\n    }, {\n      lat: 36.81744453388325,\n      lng: 10.192916664034335\n    }, {\n      lat: 36.81746361998927,\n      lng: 10.192940506619841\n    }, {\n      lat: 36.817482706614754,\n      lng: 10.193012031757014\n    }, {\n      lat: 36.817501793235465,\n      lng: 10.193035873032848\n    }, {\n      lat: 36.81753996646263,\n      lng: 10.193059715618354\n    }, {\n      lat: 36.81755905306906,\n      lng: 10.193083556894187\n    }, {\n      lat: 36.81759722626768,\n      lng: 10.193107399479691\n    }, {\n      lat: 36.817616312859826,\n      lng: 10.193131240755527\n    }, {\n      lat: 36.817654485505656,\n      lng: 10.193155083341033\n    }, {\n      lat: 36.822941269910814,\n      lng: 10.198781761953349\n    }];\n    this.velocity = 5;\n    this.initialDate = new Date();\n    this.color = \"\";\n    this.arr = [];\n    this.markerRed = [];\n    this.imageFlag = 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png';\n    this.image = 'https://img.icons8.com/flat_round/20/000000/error--v1.png';\n    this.imageCar = 'https://img.icons8.com/offices/30/000000/rv-campground.png';\n    this.get_address_lat_lng_start = [];\n    this.get_address_lat_lng_end = [];\n\n    this.getDistance = () => {\n      // seconds between when the component loaded and now\n      const differentInTime = (new Date() - this.initialDate) / 1000; // pass to seconds\n\n      return differentInTime * this.velocity; // d = v*t -- thanks Newton!\n    };\n\n    this.componentDidMount = () => {\n      this.interval = window.setInterval(this.moveObject, 1000);\n      axios.get('http://localhost:4000/api/planning/get_address').then(response => {\n        this.setState({\n          get_address: response.data\n        });\n        console.log(response.data);\n        this.get_address_lat_lng_start.push({\n          lat: response.data[0][1],\n          lng: response.data[0][0]\n        });\n        this.get_address_lat_lng_end.push({\n          lat: response.data[response.data.length - 1][1],\n          lng: response.data[response.data.length - 1][0]\n        });\n        console.log(this.get_address_lat_lng_end);\n        console.log(this.get_address_lat_lng_start);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    this.componentWillUnmount = () => {\n      window.clearInterval(this.interval);\n    };\n\n    this.moveObject = () => {\n      const distance = this.getDistance();\n\n      if (!distance) {\n        return;\n      }\n      /*function sleep(milliseconds) {\r\n          const date = Date.now();\r\n          let currentDate = null;\r\n          do {\r\n              currentDate = Date.now();\r\n          } while (currentDate - date < milliseconds);\r\n      }*/\n\n\n      let progress = this.path.filter(coordinates => coordinates.distance < distance);\n      const nextLine = this.path.find(coordinates => coordinates.distance > distance);\n      var random = 0;\n      var count = 0; //var markerGreen;\n\n      if (!nextLine) {\n        this.setState({\n          progress\n        });\n        return; // it's the end!\n      }\n\n      const lastLine = progress[progress.length - 1];\n      const lastLineLatLng = new window.google.maps.LatLng(lastLine.lat, lastLine.lng);\n      const nextLineLatLng = new window.google.maps.LatLng(nextLine.lat, nextLine.lng); // distance of this line\n\n      const totalDistance = nextLine.distance - lastLine.distance;\n      const percentage = (distance - lastLine.distance) / totalDistance;\n      const position = window.google.maps.geometry.spherical.interpolate(lastLineLatLng, nextLineLatLng, percentage);\n\n      if (count % 5 === 0) {\n        random = Math.random();\n\n        if (random < 0.5) {\n          random = Math.floor(random);\n        } else {\n          random = Math.ceil(random);\n        }\n\n        if (random === 0) {\n          console.log(\"red\"); // this.polylineDrawRed =   <Polyline path={this.state.progress} options={{ strokeColor: \"#FF0000\"}} />\n          //console.log(position.lat()+\" , \"+ position.lng())\n\n          this.arr.push({\n            lat: position.lat(),\n            lng: position.lng()\n          });\n          this.markerRed.push(React.createElement(Marker, {\n            position: this.arr[1],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 265\n            },\n            __self: this\n          }));\n          progress = progress.concat(position);\n          this.setState({\n            progress\n          });\n        } else {\n          console.log(\"green\");\n          this.polylineDrawGreen = React.createElement(Polyline, {\n            path: this.state.progress,\n            options: {\n              strokeColor: \"#9efd38 \"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 271\n            },\n            __self: this\n          });\n          var prg = [];\n          prg = this.state.progress;\n          console.log(this.state.progress[0]);\n          console.log(this.state.progress[this.state.progress.length]);\n          this.polylineDrawRed = React.createElement(Polyline, {\n            path: prg,\n            options: {\n              strokeColor: \"#FF0000 \"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 276\n            },\n            __self: this\n          });\n          progress = progress.concat(position); //  this.setState({progress});\n\n          console.log(!nextLine);\n        }\n\n        this.setState({\n          progress\n        });\n        console.log(random); //sleep(1000)\n        // console.log(this.state.progress)\n      } //this.setState({ progress });\n\n    };\n\n    this.componentWillMount = () => {\n      this.path = this.path.map((coordinates, i, array) => {\n        if (i === 0) {\n          return _objectSpread({}, coordinates, {\n            distance: 0\n          }); // it begins here!\n        }\n\n        const lat1 = coordinates.lat,\n              lng1 = coordinates.lng;\n        const latLong1 = new window.google.maps.LatLng(lat1, lng1);\n        const _array$ = array[0],\n              lat2 = _array$.lat,\n              lng2 = _array$.lng;\n        const latLong2 = new window.google.maps.LatLng(lat2, lng2); // in meters:\n\n        const distance = window.google.maps.geometry.spherical.computeDistanceBetween(latLong1, latLong2);\n        return _objectSpread({}, coordinates, {\n          distance\n        });\n      });\n    };\n\n    this.render = () => {\n      return React.createElement(GoogleMap, {\n        defaultZoom: 16,\n        defaultCenter: {\n          lat: 36.822941269910814,\n          lng: 10.198781761953349\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      }, this.state.progress && React.createElement(React.Fragment, null, React.createElement(Marker, {\n        position: this.get_address_lat_lng_start[0],\n        icon: this.imageFlag,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }), React.createElement(Marker, {\n        position: this.get_address_lat_lng_end[0],\n        icon: this.imageFlag,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        },\n        __self: this\n      }), this.polylineDrawGreen, this.polylineDrawRed, React.createElement(Polyline, {\n        path: this.path,\n        options: {\n          strokeColor: \"#fefd38 \"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337\n        },\n        __self: this\n      }), React.createElement(Marker, {\n        position: this.state.progress[this.state.progress.length - 1],\n        icon: this.imageCar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338\n        },\n        __self: this\n      }), this.arr.map((value, index) => {\n        return React.createElement(Marker, {\n          position: this.arr[index],\n          icon: this.image,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 342\n          },\n          __self: this\n        });\n      })));\n    };\n  }\n\n}\n\nconst MapComponent = withScriptjs(withGoogleMap(Map));\nexport default (() => React.createElement(MapComponent, {\n  googleMapURL: \"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\",\n  loadingElement: React.createElement(\"div\", {\n    style: {\n      height: \"100%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361\n    },\n    __self: this\n  }),\n  containerElement: React.createElement(\"div\", {\n    style: {\n      height: \"650px\",\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362\n    },\n    __self: this\n  }),\n  mapElement: React.createElement(\"div\", {\n    style: {\n      height: \"200%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363\n    },\n    __self: this\n  }),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 359\n  },\n  __self: this\n}));","map":{"version":3,"sources":["C:/Users/khouloud/Documents/PI/MERN_Stack_PI/src/views/driver/Maps.js"],"names":["React","withGoogleMap","withScriptjs","GoogleMap","Polyline","Marker","axios","Map","Component","state","progress","path","lat","lng","velocity","initialDate","Date","color","arr","markerRed","imageFlag","image","imageCar","get_address_lat_lng_start","get_address_lat_lng_end","getDistance","differentInTime","componentDidMount","interval","window","setInterval","moveObject","get","then","response","setState","get_address","data","console","log","push","length","catch","error","componentWillUnmount","clearInterval","distance","filter","coordinates","nextLine","find","random","count","lastLine","lastLineLatLng","google","maps","LatLng","nextLineLatLng","totalDistance","percentage","position","geometry","spherical","interpolate","Math","floor","ceil","concat","polylineDrawGreen","strokeColor","prg","polylineDrawRed","componentWillMount","map","i","array","lat1","lng1","latLong1","lat2","lng2","latLong2","computeDistanceBetween","render","value","index","MapComponent","height","width"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {withGoogleMap, withScriptjs, GoogleMap, Polyline, Marker} from 'react-google-maps'\r\nimport axios from \"axios\";\r\n\r\nclass Map extends React.Component {\r\n    state = {\r\n        progress: [],\r\n    }\r\n\r\n   /* path = [\r\n        { lat: 18.566516, lng: -68.435996 },\r\n        { lat: 18.5644, lng: -68.423036 },\r\n        { lat: 18.563586, lng: -68.418744 },\r\n        { lat: 18.562339, lng: -68.410725 },\r\n        { lat: 18.560927, lng: -68.402459 },\r\n        { lat: 18.559605, lng: -68.394354 },\r\n        { lat: 18.559028, lng: -68.391003 },\r\n        { lat: 18.558841, lng: -68.390594 },\r\n        { lat: 18.558795, lng: -68.390387 },\r\n        { lat: 18.558767, lng: -68.390312 },\r\n        { lat: 18.558744, lng: -68.390256 },\r\n        { lat: 18.558726, lng: -68.390202 },\r\n        { lat: 18.55867, lng: -68.390124 },\r\n        { lat: 18.558663, lng: -68.390111 },\r\n        { lat: 18.558602, lng: -68.389995 },\r\n        { lat: 18.5585, lng: -68.389867 },\r\n        { lat: 18.558462, lng: -68.389837 },\r\n        { lat: 18.558396, lng: -68.389781 },\r\n        { lat: 18.55828, lng: -68.389641 },\r\n        { lat: 18.558234, lng: -68.389557 },\r\n        { lat: 18.558143, lng: -68.389469 },\r\n        { lat: 18.558089, lng: -68.389362 },\r\n        { lat: 18.558062, lng: -68.389265 },\r\n        { lat: 18.558011, lng: -68.389069 },\r\n        { lat: 18.557985, lng: -68.388965 },\r\n        { lat: 18.557988, lng: -68.38879 },\r\n        { lat: 18.558032, lng: -68.388603 },\r\n        { lat: 18.55806, lng: -68.388525 },\r\n        { lat: 18.558113, lng: -68.388425 },\r\n        { lat: 18.558192, lng: -68.388297 },\r\n        { lat: 18.558301, lng: -68.388181 },\r\n        { lat: 18.558497, lng: -68.388045 },\r\n        { lat: 18.558571, lng: -68.388002 },\r\n        { lat: 18.558701, lng: -68.387927 },\r\n        { lat: 18.558863, lng: -68.387895 },\r\n        { lat: 18.559046, lng: -68.387887 },\r\n        { lat: 18.559308, lng: -68.387922 },\r\n        { lat: 18.559677, lng: -68.388185 },\r\n        { lat: 18.559824, lng: -68.388314 },\r\n        { lat: 18.559929, lng: -68.388397 },\r\n        { lat: 18.560018, lng: -68.388512 },\r\n        { lat: 18.560203, lng: -68.388607 },\r\n        { lat: 18.560472, lng: -68.388615 },\r\n        { lat: 18.560655, lng: -68.388613 },\r\n        { lat: 18.560957, lng: -68.388572 },\r\n        { lat: 18.561206, lng: -68.388521 }\r\n    ]*/\r\n\r\n      path = [\r\n          { lat: 36.81477236601238, lng: 10.189578804217952 },\r\n          { lat: 36.81477236601238, lng: 10.189650329355125 },\r\n          { lat: 36.81477236601238, lng: 10.189674171940629 },\r\n          { lat: 36.81477236601238, lng: 10.189698013216464 },\r\n          { lat: 36.814810540600746, lng: 10.189817222214975 },\r\n          { lat: 36.81482962841204, lng: 10.189841064800483 },\r\n          { lat: 36.814848715170086, lng: 10.18988874866182 },\r\n          { lat: 36.8148868897204, lng: 10.189960273798995 },\r\n          { lat: 36.81490597751265, lng: 10.189984115074827 },\r\n          { lat: 36.81492506425167, lng: 10.190007957660335 },\r\n          { lat: 36.81494415098594, lng: 10.190031798936168 },\r\n          { lat: 36.814963238763895, lng: 10.190055641521674 },\r\n          { lat: 36.81498232548864, lng: 10.190079482797508 },\r\n          { lat: 36.81500141325708, lng: 10.190103325383012 },\r\n          { lat: 36.81502049997232, lng: 10.190103325383012 },\r\n          { lat: 36.81507776218638, lng: 10.19015100793468 },\r\n          { lat: 36.81511593557394, lng: 10.190174850520187 },\r\n          { lat: 36.81513502330911, lng: 10.190174850520187 },\r\n          { lat: 36.81515410999101, lng: 10.190198691796018 },\r\n          { lat: 36.81523045876796, lng: 10.19024637565736 },\r\n          { lat: 36.81524954647455, lng: 10.190270218242865 },\r\n          { lat: 36.8152686331279, lng: 10.190294059518699 },\r\n          { lat: 36.8153068074688, lng: 10.190317902104203 },\r\n          { lat: 36.815344981790645, lng: 10.190389427241378 },\r\n          { lat: 36.815383156093446, lng: 10.190437111102717 },\r\n          { lat: 36.815421329852995, lng: 10.190460952378551 },\r\n          { lat: 36.81545950411771, lng: 10.19050863623989 },\r\n          { lat: 36.81547859124295, lng: 10.190532478825395 },\r\n          { lat: 36.81549767836343, lng: 10.19055632010123 },\r\n          { lat: 36.81549767836343, lng: 10.190604003962568 },\r\n          { lat: 36.815516765479146, lng: 10.190627845238405 },\r\n          { lat: 36.8155358525901, lng: 10.190651687823909 },\r\n          { lat: 36.81557402627347, lng: 10.190699371685248 },\r\n          { lat: 36.815593113370156, lng: 10.190723212961082 },\r\n          { lat: 36.81561220046207, lng: 10.19074705554659 },\r\n          { lat: 36.81563128754922, lng: 10.190770896822421 },\r\n          { lat: 36.81563128754922, lng: 10.190794738098255 },\r\n          { lat: 36.81566946170928, lng: 10.190890105820934 },\r\n          { lat: 36.815707635850245, lng: 10.19091394840644 },\r\n          { lat: 36.81572672238936, lng: 10.190937789682273 },\r\n          { lat: 36.81578398355089, lng: 10.191009314819446 },\r\n          { lat: 36.81580307059521, lng: 10.19103315740495 },\r\n          { lat: 36.81582215763477, lng: 10.19103315740495 },\r\n          { lat: 36.815841244669585, lng: 10.191056998680786 },\r\n          { lat: 36.81586033169961, lng: 10.191056998680786 },\r\n          { lat: 36.815898505221185, lng: 10.191104682542125 },\r\n          { lat: 36.81591759223693, lng: 10.191128525127631 },\r\n          { lat: 36.81597485325567, lng: 10.191152366403465 },\r\n          { lat: 36.8159939402524, lng: 10.191152366403465 },\r\n          { lat: 36.81607028766746, lng: 10.191176208988972 },\r\n          { lat: 36.8161466355306, lng: 10.191176208988972 },\r\n          { lat: 36.816203896378, lng: 10.191223891540638 },\r\n          { lat: 36.816261156658314, lng: 10.191271575401977 },\r\n          { lat: 36.81631841742005, lng: 10.191295417987483 },\r\n          { lat: 36.816375678138925, lng: 10.191343101848823 },\r\n          { lat: 36.81639476503571, lng: 10.191366943124656 },\r\n          { lat: 36.81639476503571, lng: 10.191390785710162 },\r\n          { lat: 36.81639476503571, lng: 10.191438469571501 },\r\n          { lat: 36.81639476503571, lng: 10.191462310847333 },\r\n          { lat: 36.81639476503571, lng: 10.191509994708674 },\r\n          { lat: 36.816432938290745, lng: 10.191629203707185 },\r\n          { lat: 36.81647111205095, lng: 10.191700728844358 },\r\n          { lat: 36.816509285792165, lng: 10.191843780428377 },\r\n          { lat: 36.8165283726556, lng: 10.191962989426889 },\r\n          { lat: 36.81658563321743, lng: 10.192034515873734 },\r\n          { lat: 36.816642893212176, lng: 10.192153724872249 },\r\n          { lat: 36.816681066867716, lng: 10.192249092594926 },\r\n          { lat: 36.816700153688316, lng: 10.1923206177321 },\r\n          { lat: 36.816757414121625, lng: 10.19236830159344 },\r\n          { lat: 36.81679558719581, lng: 10.19241598545478 },\r\n          { lat: 36.816852847557755, lng: 10.192439826730613 },\r\n          { lat: 36.816891021108546, lng: 10.192487510591953 },\r\n          { lat: 36.81692919464032, lng: 10.192511353177457 },\r\n          { lat: 36.816948280874826, lng: 10.192559035729124 },\r\n          { lat: 36.81700554112254, lng: 10.192582878314632 },\r\n          { lat: 36.81704371459719, lng: 10.192606719590465 },\r\n          { lat: 36.81706280132738, lng: 10.192606719590465 },\r\n          { lat: 36.817120060965195, lng: 10.192630562175971 },\r\n          { lat: 36.817139147676315, lng: 10.192654403451805 },\r\n          { lat: 36.81719640778121, lng: 10.192654403451805 },\r\n          { lat: 36.81721549447333, lng: 10.192654403451805 },\r\n          { lat: 36.81725366784332, lng: 10.192678246037309 },\r\n          { lat: 36.81729184066997, lng: 10.192678246037309 },\r\n          { lat: 36.81731092733828, lng: 10.192678246037309 },\r\n          { lat: 36.817330014001854, lng: 10.192678246037309 },\r\n          { lat: 36.817349100660635, lng: 10.192702087313144 },\r\n          { lat: 36.817368187314685, lng: 10.192725929898648 },\r\n          { lat: 36.8174063606085, lng: 10.192773612450315 },\r\n          { lat: 36.81742544724824, lng: 10.192797455035823 },\r\n          { lat: 36.81742544724824, lng: 10.192821296311656 },\r\n          { lat: 36.81742544724824, lng: 10.192868980172996 },\r\n          { lat: 36.81744453388325, lng: 10.192916664034335 },\r\n          { lat: 36.81746361998927, lng: 10.192940506619841 },\r\n          { lat: 36.817482706614754, lng: 10.193012031757014 },\r\n          { lat: 36.817501793235465, lng: 10.193035873032848 },\r\n          { lat: 36.81753996646263, lng: 10.193059715618354 },\r\n          { lat: 36.81755905306906, lng: 10.193083556894187 },\r\n          { lat: 36.81759722626768, lng: 10.193107399479691 },\r\n          { lat: 36.817616312859826, lng: 10.193131240755527 },\r\n          { lat: 36.817654485505656, lng: 10.193155083341033 },\r\n          {lat: 36.822941269910814 , lng: 10.198781761953349}\r\n\r\n      ]\r\n\r\n    velocity = 5\r\n    initialDate = new Date()\r\n    color = \"\";\r\n    polylineDrawGreen;\r\n    polylineDrawRed;\r\n    arr = [];\r\n    markerRed = [];\r\n    imageFlag = 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png';\r\n    image = 'https://img.icons8.com/flat_round/20/000000/error--v1.png';\r\n    imageCar = 'https://img.icons8.com/offices/30/000000/rv-campground.png';\r\n    get_address_lat_lng_start = [];\r\n    get_address_lat_lng_end = [];\r\n    getDistance = () => {\r\n        // seconds between when the component loaded and now\r\n        const differentInTime = (new Date() - this.initialDate) / 1000 // pass to seconds\r\n        return differentInTime * this.velocity // d = v*t -- thanks Newton!\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.interval = window.setInterval(this.moveObject, 1000)\r\n        axios.get('http://localhost:4000/api/planning/get_address')\r\n            .then(response => {\r\n                this.setState({ get_address: response.data });\r\n                console.log(response.data);\r\n                    this.get_address_lat_lng_start.push({lat: response.data[0][1],lng: response.data[0][0]})\r\n                    this.get_address_lat_lng_end.push({lat: response.data[response.data.length-1][1],lng: response.data[response.data.length-1][0]})\r\n\r\n                console.log(this.get_address_lat_lng_end );\r\n                console.log(this.get_address_lat_lng_start)\r\n\r\n            })\r\n            .catch(function (error){\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n        window.clearInterval(this.interval)\r\n    }\r\n\r\n    moveObject = () => {\r\n        const distance = this.getDistance()\r\n        if (!distance) {\r\n            return\r\n        }\r\n        /*function sleep(milliseconds) {\r\n            const date = Date.now();\r\n            let currentDate = null;\r\n            do {\r\n                currentDate = Date.now();\r\n            } while (currentDate - date < milliseconds);\r\n        }*/\r\n        let progress = this.path.filter(coordinates => coordinates.distance < distance)\r\n\r\n        const nextLine = this.path.find(coordinates => coordinates.distance > distance)\r\n\r\n\r\n        var random = 0;\r\n\r\n        var count = 0;\r\n        //var markerGreen;\r\n\r\n\r\n        if (!nextLine) {\r\n            this.setState({progress});\r\n            return // it's the end!\r\n        }\r\n        const lastLine = progress[progress.length - 1];\r\n\r\n        const lastLineLatLng = new window.google.maps.LatLng(\r\n            lastLine.lat,\r\n            lastLine.lng\r\n        );\r\n\r\n        const nextLineLatLng = new window.google.maps.LatLng(\r\n            nextLine.lat,\r\n            nextLine.lng\r\n        );\r\n\r\n        // distance of this line\r\n        const totalDistance = nextLine.distance - lastLine.distance\r\n        const percentage = (distance - lastLine.distance) / totalDistance\r\n\r\n        const position = window.google.maps.geometry.spherical.interpolate(\r\n            lastLineLatLng,\r\n            nextLineLatLng,\r\n            percentage\r\n        );\r\n\r\n        if (count % 5 === 0) {\r\n            random = Math.random();\r\n            if (random < 0.5) {\r\n                random = Math.floor(random)\r\n            } else {\r\n                random = Math.ceil(random)\r\n            }\r\n            if (random === 0) {\r\n                console.log(\"red\");\r\n                // this.polylineDrawRed =   <Polyline path={this.state.progress} options={{ strokeColor: \"#FF0000\"}} />\r\n                //console.log(position.lat()+\" , \"+ position.lng())\r\n                this.arr.push({lat: position.lat(), lng: position.lng()});\r\n                this.markerRed.push(<Marker position={this.arr[1]}/>);\r\n                progress = progress.concat(position);\r\n                this.setState({progress});\r\n\r\n            } else {\r\n                console.log(\"green\")\r\n                this.polylineDrawGreen = <Polyline path={this.state.progress} options={{strokeColor: \"#9efd38 \"}}/>\r\n                var prg = [];\r\n                  prg = this.state.progress;\r\n                  console.log(this.state.progress[0])\r\n                  console.log(this.state.progress[this.state.progress.length])\r\n                  this.polylineDrawRed =  <Polyline path={prg} options={{strokeColor: \"#FF0000 \"}}/>\r\n\r\n                progress = progress.concat(position);\r\n                //  this.setState({progress});\r\n                console.log(!nextLine);\r\n\r\n            }\r\n            this.setState({progress});\r\n\r\n            console.log(random);\r\n            //sleep(1000)\r\n            // console.log(this.state.progress)\r\n        }\r\n\r\n\r\n        //this.setState({ progress });\r\n    }\r\n\r\n    componentWillMount = () => {\r\n        this.path = this.path.map((coordinates, i, array) => {\r\n                if (i === 0) {\r\n                    return {...coordinates, distance: 0} // it begins here!\r\n                }\r\n\r\n                const {lat: lat1, lng: lng1} = coordinates\r\n                const latLong1 = new window.google.maps.LatLng(lat1, lng1)\r\n\r\n                const {lat: lat2, lng: lng2} = array[0]\r\n                const latLong2 = new window.google.maps.LatLng(lat2, lng2)\r\n\r\n                // in meters:\r\n                const distance = window.google.maps.geometry.spherical.computeDistanceBetween(\r\n                    latLong1,\r\n                    latLong2\r\n                );\r\n\r\n\r\n                return {...coordinates, distance}\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <GoogleMap\r\n                defaultZoom={16}\r\n                defaultCenter={{\r\n                lat: 36.822941269910814, lng: 10.198781761953349\r\n                }}\r\n            >\r\n                {\r\n\r\n                    this.state.progress && (\r\n                        <>\r\n                            <Marker position={this.get_address_lat_lng_start[0]} icon={this.imageFlag}/>\r\n                            <Marker position={this.get_address_lat_lng_end[0]} icon={this.imageFlag}/>\r\n\r\n                            {this.polylineDrawGreen}\r\n                            {this.polylineDrawRed}\r\n                            <Polyline path={this.path} options={{strokeColor: \"#fefd38 \"}}/>\r\n                            <Marker position={this.state.progress[this.state.progress.length - 1]}\r\n                                    icon={this.imageCar}/>\r\n\r\n                            {this.arr.map((value, index) => {\r\n                                return <Marker position={this.arr[index]}\r\n                                               icon={this.image}\r\n                                />\r\n                            })}\r\n\r\n                        </>\r\n\r\n                    )\r\n                }\r\n            </GoogleMap>\r\n        )\r\n    }\r\n}\r\n\r\nconst MapComponent = withScriptjs(withGoogleMap(Map))\r\n\r\nexport default () => (\r\n    <MapComponent\r\n        googleMapURL=\"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\"\r\n        loadingElement={<div style={{height: `100%`}}/>}\r\n        containerElement={<div style={{height: `650px`, width: '100%'}}/>}\r\n        mapElement={<div style={{height: `200%`}}/>}\r\n    />\r\n)\r\n"]},"metadata":{},"sourceType":"module"}