{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\khouloud\\\\Documents\\\\PI\\\\MERN_Stack_PI\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\khouloud\\\\Documents\\\\PI\\\\MERN_Stack_PI\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst syncerror_1 = require(\"./utils/syncerror\");\n\nconst sanitize_1 = require(\"./utils/sanitize\");\n\nconst logger_1 = require(\"./utils/logger\");\n\nconst entity_1 = require(\"./entity\");\n\nconst mergingqueue_1 = require(\"./mergingqueue\");\n\nconst closeable_1 = require(\"./closeable\");\n\nclass SyncDocumentImpl extends entity_1.SyncEntity {\n  /**\n   * @private\n   */\n  constructor(services, descriptor, removalHandler) {\n    super(services, removalHandler);\n    this.isDeleted = false;\n\n    const updateRequestReducer = (acc, input) => typeof input.ttl === 'number' ? {\n      ttl: input.ttl\n    } : acc;\n\n    this.updateMergingQueue = new mergingqueue_1.MergingQueue(updateRequestReducer);\n    this.descriptor = descriptor;\n    this.descriptor.data = this.descriptor.data || {};\n    this.descriptor.date_updated = new Date(this.descriptor.date_updated);\n  } // private props\n\n\n  get uri() {\n    return this.descriptor.url;\n  }\n\n  get revision() {\n    return this.descriptor.revision;\n  }\n\n  get lastEventId() {\n    return this.descriptor.last_event_id;\n  }\n\n  get dateExpires() {\n    return this.descriptor.date_expires;\n  }\n\n  static get type() {\n    return 'document';\n  }\n\n  get type() {\n    return 'document';\n  } // below properties are specific to Insights only\n\n\n  get indexName() {\n    return undefined;\n  }\n\n  get queryString() {\n    return undefined;\n  } // public props, documented along with class description\n\n\n  get sid() {\n    return this.descriptor.sid;\n  }\n\n  get value() {\n    return this.descriptor.data;\n  }\n\n  get dateUpdated() {\n    return this.descriptor.date_updated;\n  }\n\n  get uniqueName() {\n    return this.descriptor.unique_name || null;\n  }\n  /**\n   * Update data entity with new data\n   * @private\n   */\n\n\n  _update(update) {\n    update.date_created = new Date(update.date_created);\n\n    switch (update.type) {\n      case 'document_updated':\n        if (update.id > this.lastEventId) {\n          this.descriptor.last_event_id = update.id;\n          this.descriptor.revision = update.document_revision;\n          this.descriptor.date_updated = update.date_created;\n          this.descriptor.data = update.document_data;\n          this.broadcastEventToListeners('updated', {\n            value: update.document_data,\n            isLocal: false\n          });\n          this.services.storage.update(this.type, this.sid, this.uniqueName, {\n            last_event_id: update.id,\n            revision: update.document_revision,\n            date_updated: update.date_created,\n            data: update.document_data\n          });\n        } else {\n          logger_1.default.trace('Document update skipped, current:', this.lastEventId, ', remote:', update.id);\n        }\n\n        break;\n\n      case 'document_removed':\n        this.onRemoved(false);\n        break;\n    }\n  }\n\n  set(value, metadataUpdates) {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var input;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            input = metadataUpdates || {};\n            sanitize_1.validateOptionalTtl(input.ttl);\n            return _context.abrupt(\"return\", _this.updateMergingQueue.squashAndAdd(input, input => _this._setUnconditionally(value, input.ttl)));\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  mutate(mutator, metadataUpdates) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var input;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            input = metadataUpdates || {};\n            sanitize_1.validateOptionalTtl(input.ttl);\n            return _context2.abrupt(\"return\", _this2.updateMergingQueue.add(input, input => _this2._setWithIfMatch(mutator, input.ttl)));\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  }\n\n  update(obj, metadataUpdates) {\n    var _this3 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", _this3.mutate(remote => Object.assign(remote, obj), metadataUpdates));\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }))();\n  }\n\n  setTtl(ttl) {\n    var _this4 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            sanitize_1.validateMandatoryTtl(ttl);\n            _context4.next = 3;\n            return _this4._postUpdateToServer({\n              ttl\n            });\n\n          case 3:\n            response = _context4.sent;\n            _this4.descriptor.date_expires = response.date_expires;\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }))();\n  }\n  /**\n   * @private\n   */\n\n\n  _setUnconditionally(value, ttl) {\n    var _this5 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return _this5._postUpdateToServer({\n              data: value,\n              revision: undefined,\n              ttl\n            });\n\n          case 2:\n            result = _context5.sent;\n\n            _this5._handleSuccessfulUpdateResult(result);\n\n            return _context5.abrupt(\"return\", _this5.value);\n\n          case 5:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5);\n    }))();\n  }\n  /**\n   * @private\n   */\n\n\n  _setWithIfMatch(mutatorFunction, ttl) {\n    var _this6 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var data, revision, result;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            data = mutatorFunction(sanitize_1.deepClone(_this6.value));\n\n            if (!data) {\n              _context6.next = 22;\n              break;\n            }\n\n            revision = _this6.revision;\n            _context6.prev = 3;\n            _context6.next = 6;\n            return _this6._postUpdateToServer({\n              data,\n              revision,\n              ttl\n            });\n\n          case 6:\n            result = _context6.sent;\n\n            _this6._handleSuccessfulUpdateResult(result);\n\n            return _context6.abrupt(\"return\", _this6.value);\n\n          case 11:\n            _context6.prev = 11;\n            _context6.t0 = _context6[\"catch\"](3);\n\n            if (!(_context6.t0.status === 412)) {\n              _context6.next = 19;\n              break;\n            }\n\n            _context6.next = 16;\n            return _this6._softSync();\n\n          case 16:\n            return _context6.abrupt(\"return\", _this6._setWithIfMatch(mutatorFunction));\n\n          case 19:\n            throw _context6.t0;\n\n          case 20:\n            _context6.next = 23;\n            break;\n\n          case 22:\n            return _context6.abrupt(\"return\", _this6.value);\n\n          case 23:\n          case \"end\":\n            return _context6.stop();\n        }\n      }, _callee6, null, [[3, 11]]);\n    }))();\n  }\n  /**\n   * @private\n   */\n\n\n  _handleSuccessfulUpdateResult(result) {\n    if (result.last_event_id > this.descriptor.last_event_id) {\n      // Ignore returned value if we already got a newer one\n      this.descriptor.revision = result.revision;\n      this.descriptor.data = result.data;\n      this.descriptor.last_event_id = result.last_event_id;\n      this.descriptor.date_expires = result.date_expires;\n      this.descriptor.date_updated = new Date(result.date_updated);\n      this.services.storage.update(this.type, this.sid, this.uniqueName, {\n        last_event_id: result.last_event_id,\n        revision: result.revision,\n        date_updated: result.date_updated,\n        data: result.data\n      });\n      this.broadcastEventToListeners('updated', {\n        value: this.value,\n        isLocal: true\n      });\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  _postUpdateToServer(request) {\n    var _this7 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      var requestBody, ifMatch, response;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) switch (_context7.prev = _context7.next) {\n          case 0:\n            if (_this7.isDeleted) {\n              _context7.next = 17;\n              break;\n            }\n\n            requestBody = {\n              data: request.data\n            };\n\n            if (request.ttl !== undefined) {\n              requestBody.ttl = request.ttl;\n            }\n\n            ifMatch = request.revision;\n            _context7.prev = 4;\n            _context7.next = 7;\n            return _this7.services.network.post(_this7.uri, requestBody, ifMatch);\n\n          case 7:\n            response = _context7.sent;\n            return _context7.abrupt(\"return\", {\n              revision: response.body.revision,\n              data: request.data,\n              last_event_id: response.body.last_event_id,\n              date_updated: response.body.date_updated,\n              date_expires: response.body.date_expires\n            });\n\n          case 11:\n            _context7.prev = 11;\n            _context7.t0 = _context7[\"catch\"](4);\n\n            if (_context7.t0.status === 404) {\n              _this7.onRemoved(false);\n            }\n\n            throw _context7.t0;\n\n          case 15:\n            _context7.next = 18;\n            break;\n\n          case 17:\n            return _context7.abrupt(\"return\", Promise.reject(new syncerror_1.SyncError('The Document has been removed', 404, 54100)));\n\n          case 18:\n          case \"end\":\n            return _context7.stop();\n        }\n      }, _callee7, null, [[4, 11]]);\n    }))();\n  }\n  /**\n   * Get new data from server\n   * @private\n   */\n\n\n  _softSync() {\n    var _this8 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) switch (_context8.prev = _context8.next) {\n          case 0:\n            return _context8.abrupt(\"return\", _this8.services.network.get(_this8.uri).then(response => {\n              const event = {\n                type: 'document_updated',\n                id: response.body.last_event_id,\n                document_revision: response.body.revision,\n                document_data: response.body.data,\n                date_created: response.body.date_updated\n              };\n\n              _this8._update(event);\n\n              return _this8;\n            }).catch(err => {\n              if (err.status === 404) {\n                _this8.onRemoved(false);\n              } else {\n                logger_1.default.error(\"Can't get updates for \".concat(_this8.sid, \":\"), err);\n              }\n            }));\n\n          case 1:\n          case \"end\":\n            return _context8.stop();\n        }\n      }, _callee8);\n    }))();\n  }\n\n  onRemoved(locally) {\n    if (this.isDeleted) {\n      return;\n    } else {\n      this.isDeleted = true;\n\n      this._unsubscribe();\n\n      this.removalHandler(this.type, this.sid, this.uniqueName);\n      this.broadcastEventToListeners('removed', {\n        isLocal: locally\n      });\n    }\n  }\n\n  removeDocument() {\n    var _this9 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) switch (_context9.prev = _context9.next) {\n          case 0:\n            if (_this9.isDeleted) {\n              _context9.next = 6;\n              break;\n            }\n\n            _context9.next = 3;\n            return _this9.services.network.delete(_this9.uri);\n\n          case 3:\n            _this9.onRemoved(true);\n\n            _context9.next = 7;\n            break;\n\n          case 6:\n            return _context9.abrupt(\"return\", Promise.reject(new syncerror_1.SyncError('The Document has been removed', 404, 54100)));\n\n          case 7:\n          case \"end\":\n            return _context9.stop();\n        }\n      }, _callee9);\n    }))();\n  }\n\n}\n\nexports.SyncDocumentImpl = SyncDocumentImpl;\n/**\n * @class\n * @alias Document\n * @classdesc Represents a Sync Document, the contents of which is a single JSON object.\n * Use the {@link Client#document} method to obtain a reference to a Sync Document.\n * @property {String} sid The immutable identifier of this document, assigned by the system.\n * @property {String} [uniqueName=null] An optional immutable identifier that may be assigned by the programmer\n * to this document during creation. Globally unique among other Documents.\n * @property {Date} dateUpdated Date when the Document was last updated.\n * @property {Object} value The contents of this document.\n *\n * @fires Document#removed\n * @fires Document#updated\n */\n\nclass SyncDocument extends closeable_1.default {\n  constructor(syncDocumentImpl) {\n    super();\n    this.syncDocumentImpl = syncDocumentImpl;\n    this.syncDocumentImpl.attach(this);\n  } // private props\n\n\n  get uri() {\n    return this.syncDocumentImpl.uri;\n  }\n\n  get revision() {\n    return this.syncDocumentImpl.revision;\n  }\n\n  get lastEventId() {\n    return this.syncDocumentImpl.lastEventId;\n  }\n\n  get dateExpires() {\n    return this.syncDocumentImpl.dateExpires;\n  }\n\n  static get type() {\n    return SyncDocumentImpl.type;\n  }\n\n  get type() {\n    return SyncDocumentImpl.type;\n  } // public props, documented along with class description\n\n\n  get sid() {\n    return this.syncDocumentImpl.sid;\n  }\n\n  get value() {\n    return this.syncDocumentImpl.value;\n  }\n\n  get dateUpdated() {\n    return this.syncDocumentImpl.dateUpdated;\n  }\n\n  get uniqueName() {\n    return this.syncDocumentImpl.uniqueName;\n  }\n  /**\n   * Assign new contents to this document. The current value will be overwritten.\n   * @param {Object} value The new contents to assign.\n   * @param {Document#Metadata} [metadataUpdates] New document metadata.\n   * @returns {Promise<Object>} A promise resolving to the new value of the document.\n   * @public\n   * @example\n   * // Say, the Document value is { name: 'John Smith', age: 34 }\n   * document.set({ name: 'Barbara Oaks' }, { ttl: 86400 })\n   *   .then(function(newValue) {\n   *     // Now the Document value is { name: 'Barbara Oaks' }\n   *     console.log('Document set() successful, new value:', newValue);\n   *   })\n   *   .catch(function(error) {\n   *     console.error('Document set() failed', error);\n   *   });\n   */\n\n\n  set(value, metadataUpdates) {\n    var _this10 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) switch (_context10.prev = _context10.next) {\n          case 0:\n            _this10.ensureNotClosed();\n\n            return _context10.abrupt(\"return\", _this10.syncDocumentImpl.set(value, metadataUpdates));\n\n          case 2:\n          case \"end\":\n            return _context10.stop();\n        }\n      }, _callee10);\n    }))();\n  }\n  /**\n   * Schedules a modification to this document that will apply a mutation function.\n   * @param {Document~Mutator} mutator A function that outputs a new value based on the existing value.\n   * May be called multiple times, particularly if this Document is modified concurrently by remote code.\n   * If the mutation ultimately succeeds, the Document will have made the particular transition described\n   * by this function.\n   * @param {Document#Metadata} [metadataUpdates] New document metadata.\n   * @return {Promise<Object>} Resolves with the most recent Document state, whether the output of a\n   *    successful mutation or a state that prompted graceful cancellation (mutator returned <code>null</code>).\n   * @public\n   * @example\n   * var mutatorFunction = function(currentValue) {\n   *     currentValue.viewCount = (currentValue.viewCount || 0) + 1;\n   *     return currentValue;\n   * };\n   * document.mutate(mutatorFunction, { ttl: 86400 }))\n   *   .then(function(newValue) {\n   *     console.log('Document mutate() successful, new value:', newValue);\n   *   })\n   *   .catch(function(error) {\n   *     console.error('Document mutate() failed', error);\n   *   });\n   */\n\n\n  mutate(mutator, metadataUpdates) {\n    var _this11 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) switch (_context11.prev = _context11.next) {\n          case 0:\n            _this11.ensureNotClosed();\n\n            return _context11.abrupt(\"return\", _this11.syncDocumentImpl.mutate(mutator, metadataUpdates));\n\n          case 2:\n          case \"end\":\n            return _context11.stop();\n        }\n      }, _callee11);\n    }))();\n  }\n  /**\n   * Modify a document by appending new fields (or by overwriting existing ones) with the values from the provided Object.\n   * This is equivalent to\n   * <pre>\n   * document.mutate(function(currentValue) {\n   *   return Object.assign(currentValue, obj));\n   * });\n   * </pre>\n   * @param {Object} obj Specifies the particular (top-level) attributes that will receive new values.\n   * @param {Document#Metadata} [metadataUpdates] New document metadata.\n   * @return {Promise<Object>} A promise resolving to the new value of the document.\n   * @public\n   * @example\n   * // Say, the Document value is { name: 'John Smith' }\n   * document.update({ age: 34 }, { ttl: 86400 })\n   *   .then(function(newValue) {\n   *     // Now the Document value is { name: 'John Smith', age: 34 }\n   *     console.log('Document update() successful, new value:', newValue);\n   *   })\n   *   .catch(function(error) {\n   *     console.error('Document update() failed', error);\n   *   });\n   */\n\n\n  update(obj, metadataUpdates) {\n    var _this12 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) switch (_context12.prev = _context12.next) {\n          case 0:\n            _this12.ensureNotClosed();\n\n            return _context12.abrupt(\"return\", _this12.syncDocumentImpl.update(obj, metadataUpdates));\n\n          case 2:\n          case \"end\":\n            return _context12.stop();\n        }\n      }, _callee12);\n    }))();\n  }\n  /**\n   * Update the time-to-live of the document.\n   * @param {Number} ttl Specifies the time-to-live in seconds after which the document is subject to automatic deletion. The value 0 means infinity.\n   * @return {Promise<void>} A promise that resolves after the TTL update was successful.\n   * @public\n   * @example\n   * document.setTtl(3600)\n   *   .then(function() {\n   *     console.log('Document setTtl() successful');\n   *   })\n   *   .catch(function(error) {\n   *     console.error('Document setTtl() failed', error);\n   *   });\n   */\n\n\n  setTtl(ttl) {\n    var _this13 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) switch (_context13.prev = _context13.next) {\n          case 0:\n            _this13.ensureNotClosed();\n\n            return _context13.abrupt(\"return\", _this13.syncDocumentImpl.setTtl(ttl));\n\n          case 2:\n          case \"end\":\n            return _context13.stop();\n        }\n      }, _callee13);\n    }))();\n  }\n  /**\n   * Delete a document.\n   * @return {Promise<void>} A promise which resolves if (and only if) the document is ultimately deleted.\n   * @public\n   * @example\n   * document.removeDocument()\n   *   .then(function() {\n   *     console.log('Document removeDocument() successful');\n   *   })\n   *   .catch(function(error) {\n   *     console.error('Document removeDocument() failed', error);\n   *   });\n   */\n\n\n  removeDocument() {\n    var _this14 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n      return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n        while (1) switch (_context14.prev = _context14.next) {\n          case 0:\n            _this14.ensureNotClosed();\n\n            return _context14.abrupt(\"return\", _this14.syncDocumentImpl.removeDocument());\n\n          case 2:\n          case \"end\":\n            return _context14.stop();\n        }\n      }, _callee14);\n    }))();\n  }\n  /**\n   * Conclude work with the document instance and remove all event listeners attached to it.\n   * Any subsequent operation on this object will be rejected with error.\n   * Other local copies of this document will continue operating and receiving events normally.\n   * @public\n   * @example\n   * document.close();\n   */\n\n\n  close() {\n    super.close();\n    this.syncDocumentImpl.detach(this.listenerUuid);\n  }\n\n}\n\nexports.SyncDocument = SyncDocument;\nexports.default = SyncDocument;\n/**\n * Contains Document metadata.\n * @typedef {Object} Document#Metadata\n * @property {Number} [ttl] Specifies the time-to-live in seconds after which the document is subject to automatic deletion.\n * The value 0 means infinity.\n */\n\n/**\n * Applies a transformation to the document value.\n * @callback Document~Mutator\n * @param {Object} currentValue The current value of the document in the cloud.\n * @return {Object} The desired new value for the document or <code>null</code> to gracefully cancel the mutation.\n */\n\n/**\n * Fired when the document is removed, whether the remover was local or remote.\n * @event Document#removed\n * @param {Object} args Arguments provided with the event.\n * @param {Boolean} args.isLocal Equals 'true' if document was removed by local actor, 'false' otherwise.\n * @example\n * document.on('removed', function(args) {\n *   console.log('Document ' + document.sid + ' was removed');\n *   console.log('args.isLocal:', args.isLocal);\n * });\n */\n\n/**\n * Fired when the document's contents have changed, whether the updater was local or remote.\n * @event Document#updated\n * @param {Object} args Arguments provided with the event.\n * @param {Object} args.value A snapshot of the document's new contents.\n * @param {Boolean} args.isLocal Equals 'true' if document was updated by local actor, 'false' otherwise.\n * @example\n * document.on('updated', function(args) {\n *   console.log('Document ' + document.sid + ' was updated');\n *   console.log('args.value: ', args.value);\n *   console.log('args.isLocal: ', args.isLocal);\n * });\n */","map":{"version":3,"sources":["C:/Users/khouloud/Documents/PI/MERN_Stack_PI/node_modules/twilio-sync/lib/syncdocument.js"],"names":["Object","defineProperty","exports","value","syncerror_1","require","sanitize_1","logger_1","entity_1","mergingqueue_1","closeable_1","SyncDocumentImpl","SyncEntity","constructor","services","descriptor","removalHandler","isDeleted","updateRequestReducer","acc","input","ttl","updateMergingQueue","MergingQueue","data","date_updated","Date","uri","url","revision","lastEventId","last_event_id","dateExpires","date_expires","type","indexName","undefined","queryString","sid","dateUpdated","uniqueName","unique_name","_update","update","date_created","id","document_revision","document_data","broadcastEventToListeners","isLocal","storage","default","trace","onRemoved","set","metadataUpdates","validateOptionalTtl","squashAndAdd","_setUnconditionally","mutate","mutator","add","_setWithIfMatch","obj","remote","assign","setTtl","validateMandatoryTtl","_postUpdateToServer","response","result","_handleSuccessfulUpdateResult","mutatorFunction","deepClone","status","_softSync","request","requestBody","ifMatch","network","post","body","Promise","reject","SyncError","get","then","event","catch","err","error","locally","_unsubscribe","removeDocument","delete","SyncDocument","syncDocumentImpl","attach","ensureNotClosed","close","detach","listenerUuid"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst syncerror_1 = require(\"./utils/syncerror\");\nconst sanitize_1 = require(\"./utils/sanitize\");\nconst logger_1 = require(\"./utils/logger\");\nconst entity_1 = require(\"./entity\");\nconst mergingqueue_1 = require(\"./mergingqueue\");\nconst closeable_1 = require(\"./closeable\");\nclass SyncDocumentImpl extends entity_1.SyncEntity {\n    /**\n     * @private\n     */\n    constructor(services, descriptor, removalHandler) {\n        super(services, removalHandler);\n        this.isDeleted = false;\n        const updateRequestReducer = (acc, input) => (typeof input.ttl === 'number') ? { ttl: input.ttl }\n            : acc;\n        this.updateMergingQueue = new mergingqueue_1.MergingQueue(updateRequestReducer);\n        this.descriptor = descriptor;\n        this.descriptor.data = this.descriptor.data || {};\n        this.descriptor.date_updated = new Date(this.descriptor.date_updated);\n    }\n    // private props\n    get uri() {\n        return this.descriptor.url;\n    }\n    get revision() {\n        return this.descriptor.revision;\n    }\n    get lastEventId() {\n        return this.descriptor.last_event_id;\n    }\n    get dateExpires() {\n        return this.descriptor.date_expires;\n    }\n    static get type() {\n        return 'document';\n    }\n    get type() {\n        return 'document';\n    }\n    // below properties are specific to Insights only\n    get indexName() {\n        return undefined;\n    }\n    get queryString() {\n        return undefined;\n    }\n    // public props, documented along with class description\n    get sid() {\n        return this.descriptor.sid;\n    }\n    get value() {\n        return this.descriptor.data;\n    }\n    get dateUpdated() {\n        return this.descriptor.date_updated;\n    }\n    get uniqueName() {\n        return this.descriptor.unique_name || null;\n    }\n    /**\n     * Update data entity with new data\n     * @private\n     */\n    _update(update) {\n        update.date_created = new Date(update.date_created);\n        switch (update.type) {\n            case 'document_updated':\n                if (update.id > this.lastEventId) {\n                    this.descriptor.last_event_id = update.id;\n                    this.descriptor.revision = update.document_revision;\n                    this.descriptor.date_updated = update.date_created;\n                    this.descriptor.data = update.document_data;\n                    this.broadcastEventToListeners('updated', { value: update.document_data, isLocal: false });\n                    this.services.storage.update(this.type, this.sid, this.uniqueName, {\n                        last_event_id: update.id,\n                        revision: update.document_revision,\n                        date_updated: update.date_created,\n                        data: update.document_data\n                    });\n                }\n                else {\n                    logger_1.default.trace('Document update skipped, current:', this.lastEventId, ', remote:', update.id);\n                }\n                break;\n            case 'document_removed':\n                this.onRemoved(false);\n                break;\n        }\n    }\n    async set(value, metadataUpdates) {\n        const input = metadataUpdates || {};\n        sanitize_1.validateOptionalTtl(input.ttl);\n        return this.updateMergingQueue.squashAndAdd(input, input => this._setUnconditionally(value, input.ttl));\n    }\n    async mutate(mutator, metadataUpdates) {\n        const input = metadataUpdates || {};\n        sanitize_1.validateOptionalTtl(input.ttl);\n        return this.updateMergingQueue.add(input, input => this._setWithIfMatch(mutator, input.ttl));\n    }\n    async update(obj, metadataUpdates) {\n        return this.mutate(remote => Object.assign(remote, obj), metadataUpdates);\n    }\n    async setTtl(ttl) {\n        sanitize_1.validateMandatoryTtl(ttl);\n        const response = await this._postUpdateToServer({ ttl });\n        this.descriptor.date_expires = response.date_expires;\n    }\n    /**\n     * @private\n     */\n    async _setUnconditionally(value, ttl) {\n        let result = await this._postUpdateToServer({ data: value, revision: undefined, ttl });\n        this._handleSuccessfulUpdateResult(result);\n        return this.value;\n    }\n    /**\n     * @private\n     */\n    async _setWithIfMatch(mutatorFunction, ttl) {\n        let data = mutatorFunction(sanitize_1.deepClone(this.value));\n        if (data) {\n            let revision = this.revision;\n            try {\n                let result = await this._postUpdateToServer({ data, revision, ttl });\n                this._handleSuccessfulUpdateResult(result);\n                return this.value;\n            }\n            catch (error) {\n                if (error.status === 412) {\n                    await this._softSync();\n                    return this._setWithIfMatch(mutatorFunction);\n                }\n                else {\n                    throw error;\n                }\n            }\n        }\n        else {\n            return this.value;\n        }\n    }\n    /**\n     * @private\n     */\n    _handleSuccessfulUpdateResult(result) {\n        if (result.last_event_id > this.descriptor.last_event_id) {\n            // Ignore returned value if we already got a newer one\n            this.descriptor.revision = result.revision;\n            this.descriptor.data = result.data;\n            this.descriptor.last_event_id = result.last_event_id;\n            this.descriptor.date_expires = result.date_expires;\n            this.descriptor.date_updated = new Date(result.date_updated);\n            this.services.storage.update(this.type, this.sid, this.uniqueName, {\n                last_event_id: result.last_event_id,\n                revision: result.revision,\n                date_updated: result.date_updated,\n                data: result.data\n            });\n            this.broadcastEventToListeners('updated', { value: this.value, isLocal: true });\n        }\n    }\n    /**\n     * @private\n     */\n    async _postUpdateToServer(request) {\n        if (!this.isDeleted) {\n            const requestBody = {\n                data: request.data\n            };\n            if (request.ttl !== undefined) {\n                requestBody.ttl = request.ttl;\n            }\n            const ifMatch = request.revision;\n            try {\n                const response = await this.services.network.post(this.uri, requestBody, ifMatch);\n                return {\n                    revision: response.body.revision,\n                    data: request.data,\n                    last_event_id: response.body.last_event_id,\n                    date_updated: response.body.date_updated,\n                    date_expires: response.body.date_expires\n                };\n            }\n            catch (error) {\n                if (error.status === 404) {\n                    this.onRemoved(false);\n                }\n                throw error;\n            }\n        }\n        else {\n            return Promise.reject(new syncerror_1.SyncError('The Document has been removed', 404, 54100));\n        }\n    }\n    /**\n     * Get new data from server\n     * @private\n     */\n    async _softSync() {\n        return this.services.network.get(this.uri)\n            .then(response => {\n            const event = {\n                type: 'document_updated',\n                id: response.body.last_event_id,\n                document_revision: response.body.revision,\n                document_data: response.body.data,\n                date_created: response.body.date_updated\n            };\n            this._update(event);\n            return this;\n        })\n            .catch(err => {\n            if (err.status === 404) {\n                this.onRemoved(false);\n            }\n            else {\n                logger_1.default.error(`Can't get updates for ${this.sid}:`, err);\n            }\n        });\n    }\n    onRemoved(locally) {\n        if (this.isDeleted) {\n            return;\n        }\n        else {\n            this.isDeleted = true;\n            this._unsubscribe();\n            this.removalHandler(this.type, this.sid, this.uniqueName);\n            this.broadcastEventToListeners('removed', { isLocal: locally });\n        }\n    }\n    async removeDocument() {\n        if (!this.isDeleted) {\n            await this.services.network.delete(this.uri);\n            this.onRemoved(true);\n        }\n        else {\n            return Promise.reject(new syncerror_1.SyncError('The Document has been removed', 404, 54100));\n        }\n    }\n}\nexports.SyncDocumentImpl = SyncDocumentImpl;\n/**\n * @class\n * @alias Document\n * @classdesc Represents a Sync Document, the contents of which is a single JSON object.\n * Use the {@link Client#document} method to obtain a reference to a Sync Document.\n * @property {String} sid The immutable identifier of this document, assigned by the system.\n * @property {String} [uniqueName=null] An optional immutable identifier that may be assigned by the programmer\n * to this document during creation. Globally unique among other Documents.\n * @property {Date} dateUpdated Date when the Document was last updated.\n * @property {Object} value The contents of this document.\n *\n * @fires Document#removed\n * @fires Document#updated\n */\nclass SyncDocument extends closeable_1.default {\n    constructor(syncDocumentImpl) {\n        super();\n        this.syncDocumentImpl = syncDocumentImpl;\n        this.syncDocumentImpl.attach(this);\n    }\n    // private props\n    get uri() {\n        return this.syncDocumentImpl.uri;\n    }\n    get revision() {\n        return this.syncDocumentImpl.revision;\n    }\n    get lastEventId() {\n        return this.syncDocumentImpl.lastEventId;\n    }\n    get dateExpires() {\n        return this.syncDocumentImpl.dateExpires;\n    }\n    static get type() {\n        return SyncDocumentImpl.type;\n    }\n    get type() {\n        return SyncDocumentImpl.type;\n    }\n    // public props, documented along with class description\n    get sid() {\n        return this.syncDocumentImpl.sid;\n    }\n    get value() {\n        return this.syncDocumentImpl.value;\n    }\n    get dateUpdated() {\n        return this.syncDocumentImpl.dateUpdated;\n    }\n    get uniqueName() {\n        return this.syncDocumentImpl.uniqueName;\n    }\n    /**\n     * Assign new contents to this document. The current value will be overwritten.\n     * @param {Object} value The new contents to assign.\n     * @param {Document#Metadata} [metadataUpdates] New document metadata.\n     * @returns {Promise<Object>} A promise resolving to the new value of the document.\n     * @public\n     * @example\n     * // Say, the Document value is { name: 'John Smith', age: 34 }\n     * document.set({ name: 'Barbara Oaks' }, { ttl: 86400 })\n     *   .then(function(newValue) {\n     *     // Now the Document value is { name: 'Barbara Oaks' }\n     *     console.log('Document set() successful, new value:', newValue);\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Document set() failed', error);\n     *   });\n     */\n    async set(value, metadataUpdates) {\n        this.ensureNotClosed();\n        return this.syncDocumentImpl.set(value, metadataUpdates);\n    }\n    /**\n     * Schedules a modification to this document that will apply a mutation function.\n     * @param {Document~Mutator} mutator A function that outputs a new value based on the existing value.\n     * May be called multiple times, particularly if this Document is modified concurrently by remote code.\n     * If the mutation ultimately succeeds, the Document will have made the particular transition described\n     * by this function.\n     * @param {Document#Metadata} [metadataUpdates] New document metadata.\n     * @return {Promise<Object>} Resolves with the most recent Document state, whether the output of a\n     *    successful mutation or a state that prompted graceful cancellation (mutator returned <code>null</code>).\n     * @public\n     * @example\n     * var mutatorFunction = function(currentValue) {\n     *     currentValue.viewCount = (currentValue.viewCount || 0) + 1;\n     *     return currentValue;\n     * };\n     * document.mutate(mutatorFunction, { ttl: 86400 }))\n     *   .then(function(newValue) {\n     *     console.log('Document mutate() successful, new value:', newValue);\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Document mutate() failed', error);\n     *   });\n     */\n    async mutate(mutator, metadataUpdates) {\n        this.ensureNotClosed();\n        return this.syncDocumentImpl.mutate(mutator, metadataUpdates);\n    }\n    /**\n     * Modify a document by appending new fields (or by overwriting existing ones) with the values from the provided Object.\n     * This is equivalent to\n     * <pre>\n     * document.mutate(function(currentValue) {\n     *   return Object.assign(currentValue, obj));\n     * });\n     * </pre>\n     * @param {Object} obj Specifies the particular (top-level) attributes that will receive new values.\n     * @param {Document#Metadata} [metadataUpdates] New document metadata.\n     * @return {Promise<Object>} A promise resolving to the new value of the document.\n     * @public\n     * @example\n     * // Say, the Document value is { name: 'John Smith' }\n     * document.update({ age: 34 }, { ttl: 86400 })\n     *   .then(function(newValue) {\n     *     // Now the Document value is { name: 'John Smith', age: 34 }\n     *     console.log('Document update() successful, new value:', newValue);\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Document update() failed', error);\n     *   });\n     */\n    async update(obj, metadataUpdates) {\n        this.ensureNotClosed();\n        return this.syncDocumentImpl.update(obj, metadataUpdates);\n    }\n    /**\n     * Update the time-to-live of the document.\n     * @param {Number} ttl Specifies the time-to-live in seconds after which the document is subject to automatic deletion. The value 0 means infinity.\n     * @return {Promise<void>} A promise that resolves after the TTL update was successful.\n     * @public\n     * @example\n     * document.setTtl(3600)\n     *   .then(function() {\n     *     console.log('Document setTtl() successful');\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Document setTtl() failed', error);\n     *   });\n     */\n    async setTtl(ttl) {\n        this.ensureNotClosed();\n        return this.syncDocumentImpl.setTtl(ttl);\n    }\n    /**\n     * Delete a document.\n     * @return {Promise<void>} A promise which resolves if (and only if) the document is ultimately deleted.\n     * @public\n     * @example\n     * document.removeDocument()\n     *   .then(function() {\n     *     console.log('Document removeDocument() successful');\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Document removeDocument() failed', error);\n     *   });\n     */\n    async removeDocument() {\n        this.ensureNotClosed();\n        return this.syncDocumentImpl.removeDocument();\n    }\n    /**\n     * Conclude work with the document instance and remove all event listeners attached to it.\n     * Any subsequent operation on this object will be rejected with error.\n     * Other local copies of this document will continue operating and receiving events normally.\n     * @public\n     * @example\n     * document.close();\n     */\n    close() {\n        super.close();\n        this.syncDocumentImpl.detach(this.listenerUuid);\n    }\n}\nexports.SyncDocument = SyncDocument;\nexports.default = SyncDocument;\n/**\n * Contains Document metadata.\n * @typedef {Object} Document#Metadata\n * @property {Number} [ttl] Specifies the time-to-live in seconds after which the document is subject to automatic deletion.\n * The value 0 means infinity.\n */\n/**\n * Applies a transformation to the document value.\n * @callback Document~Mutator\n * @param {Object} currentValue The current value of the document in the cloud.\n * @return {Object} The desired new value for the document or <code>null</code> to gracefully cancel the mutation.\n */\n/**\n * Fired when the document is removed, whether the remover was local or remote.\n * @event Document#removed\n * @param {Object} args Arguments provided with the event.\n * @param {Boolean} args.isLocal Equals 'true' if document was removed by local actor, 'false' otherwise.\n * @example\n * document.on('removed', function(args) {\n *   console.log('Document ' + document.sid + ' was removed');\n *   console.log('args.isLocal:', args.isLocal);\n * });\n */\n/**\n * Fired when the document's contents have changed, whether the updater was local or remote.\n * @event Document#updated\n * @param {Object} args Arguments provided with the event.\n * @param {Object} args.value A snapshot of the document's new contents.\n * @param {Boolean} args.isLocal Equals 'true' if document was updated by local actor, 'false' otherwise.\n * @example\n * document.on('updated', function(args) {\n *   console.log('Document ' + document.sid + ' was updated');\n *   console.log('args.value: ', args.value);\n *   console.log('args.isLocal: ', args.isLocal);\n * });\n */\n"]},"metadata":{},"sourceType":"script"}