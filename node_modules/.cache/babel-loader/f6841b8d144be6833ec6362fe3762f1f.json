{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\khouloud\\\\Documents\\\\PI\\\\MERN_Stack_PI\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\khouloud\\\\Documents\\\\PI\\\\MERN_Stack_PI\\\\src\\\\views\\\\driver\\\\Maps.js\";\nimport React from 'react';\nimport { withGoogleMap, withScriptjs, GoogleMap, Polyline, Marker } from 'react-google-maps';\n\nclass Map extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      progress: []\n    };\n    this.path = [{\n      lat: 18.566516,\n      lng: -68.435996\n    }, {\n      lat: 18.5644,\n      lng: -68.423036\n    }, {\n      lat: 18.563586,\n      lng: -68.418744\n    }, {\n      lat: 18.562339,\n      lng: -68.410725\n    }, {\n      lat: 18.560927,\n      lng: -68.402459\n    }, {\n      lat: 18.559605,\n      lng: -68.394354\n    }, {\n      lat: 18.559028,\n      lng: -68.391003\n    }, {\n      lat: 18.558841,\n      lng: -68.390594\n    }, {\n      lat: 18.558795,\n      lng: -68.390387\n    }, {\n      lat: 18.558767,\n      lng: -68.390312\n    }, {\n      lat: 18.558744,\n      lng: -68.390256\n    }, {\n      lat: 18.558726,\n      lng: -68.390202\n    }, {\n      lat: 18.55867,\n      lng: -68.390124\n    }, {\n      lat: 18.558663,\n      lng: -68.390111\n    }, {\n      lat: 18.558602,\n      lng: -68.389995\n    }, {\n      lat: 18.5585,\n      lng: -68.389867\n    }, {\n      lat: 18.558462,\n      lng: -68.389837\n    }, {\n      lat: 18.558396,\n      lng: -68.389781\n    }, {\n      lat: 18.55828,\n      lng: -68.389641\n    }, {\n      lat: 18.558234,\n      lng: -68.389557\n    }, {\n      lat: 18.558143,\n      lng: -68.389469\n    }, {\n      lat: 18.558089,\n      lng: -68.389362\n    }, {\n      lat: 18.558062,\n      lng: -68.389265\n    }, {\n      lat: 18.558011,\n      lng: -68.389069\n    }, {\n      lat: 18.557985,\n      lng: -68.388965\n    }, {\n      lat: 18.557988,\n      lng: -68.38879\n    }, {\n      lat: 18.558032,\n      lng: -68.388603\n    }, {\n      lat: 18.55806,\n      lng: -68.388525\n    }, {\n      lat: 18.558113,\n      lng: -68.388425\n    }, {\n      lat: 18.558192,\n      lng: -68.388297\n    }, {\n      lat: 18.558301,\n      lng: -68.388181\n    }, {\n      lat: 18.558497,\n      lng: -68.388045\n    }, {\n      lat: 18.558571,\n      lng: -68.388002\n    }, {\n      lat: 18.558701,\n      lng: -68.387927\n    }, {\n      lat: 18.558863,\n      lng: -68.387895\n    }, {\n      lat: 18.559046,\n      lng: -68.387887\n    }, {\n      lat: 18.559308,\n      lng: -68.387922\n    }, {\n      lat: 18.559677,\n      lng: -68.388185\n    }, {\n      lat: 18.559824,\n      lng: -68.388314\n    }, {\n      lat: 18.559929,\n      lng: -68.388397\n    }, {\n      lat: 18.560018,\n      lng: -68.388512\n    }, {\n      lat: 18.560203,\n      lng: -68.388607\n    }, {\n      lat: 18.560472,\n      lng: -68.388615\n    }, {\n      lat: 18.560655,\n      lng: -68.388613\n    }, {\n      lat: 18.560957,\n      lng: -68.388572\n    }, {\n      lat: 18.561206,\n      lng: -68.388521\n    }];\n    this.velocity = 5;\n    this.initialDate = new Date();\n    this.color = \"\";\n    this.arr = [];\n    this.markerRed = [];\n    this.imageFlag = 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png';\n    this.image = 'https://img.icons8.com/flat_round/20/000000/error--v1.png';\n    this.imageCar = 'https://img.icons8.com/offices/30/000000/rv-campground.png';\n\n    this.getDistance = () => {\n      // seconds between when the component loaded and now\n      const differentInTime = (new Date() - this.initialDate) / 1000; // pass to seconds\n\n      return differentInTime * this.velocity; // d = v*t -- thanks Newton!\n    };\n\n    this.componentDidMount = () => {\n      this.interval = window.setInterval(this.moveObject, 1000);\n      const DirectionsService = new google.maps.DirectionsService();\n      DirectionsService.route({\n        origin: new google.maps.LatLng(41.8507300, -87.6512600),\n        destination: new google.maps.LatLng(41.8525800, -87.6514100),\n        travelMode: google.maps.TravelMode.DRIVING\n      }, (result, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          this.setState({\n            directions: result\n          });\n        } else {\n          console.error(\"error fetching directions \".concat(result));\n        }\n      });\n    };\n\n    this.componentWillUnmount = () => {\n      window.clearInterval(this.interval);\n    };\n\n    this.moveObject = () => {\n      const distance = this.getDistance();\n\n      if (!distance) {\n        return;\n      }\n      /*function sleep(milliseconds) {\r\n          const date = Date.now();\r\n          let currentDate = null;\r\n          do {\r\n              currentDate = Date.now();\r\n          } while (currentDate - date < milliseconds);\r\n      }*/\n\n\n      let progress = this.path.filter(coordinates => coordinates.distance < distance);\n      const nextLine = this.path.find(coordinates => coordinates.distance > distance);\n      var random = 0;\n      var count = 0; //var markerGreen;\n\n      if (!nextLine) {\n        this.setState({\n          progress\n        });\n        return; // it's the end!\n      }\n\n      const lastLine = progress[progress.length - 1];\n      const lastLineLatLng = new window.google.maps.LatLng(lastLine.lat, lastLine.lng);\n      const nextLineLatLng = new window.google.maps.LatLng(nextLine.lat, nextLine.lng); // distance of this line\n\n      const totalDistance = nextLine.distance - lastLine.distance;\n      const percentage = (distance - lastLine.distance) / totalDistance;\n      const position = window.google.maps.geometry.spherical.interpolate(lastLineLatLng, nextLineLatLng, percentage);\n\n      if (count % 5 === 0) {\n        random = Math.random();\n\n        if (random < 0.5) {\n          random = Math.floor(random);\n        } else {\n          random = Math.ceil(random);\n        }\n\n        if (random === 0) {\n          console.log(\"red\"); // this.polylineDrawRed =   <Polyline path={this.state.progress} options={{ strokeColor: \"#FF0000\"}} />\n          //console.log(position.lat()+\" , \"+ position.lng())\n\n          this.arr.push({\n            lat: position.lat(),\n            lng: position.lng()\n          });\n          this.markerRed.push(React.createElement(Marker, {\n            position: this.arr[1],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 160\n            },\n            __self: this\n          }));\n          progress = progress.concat(position);\n          this.setState({\n            progress\n          });\n        } else {\n          console.log(\"green\");\n          this.polylineDrawGreen = React.createElement(Polyline, {\n            path: this.state.progress,\n            options: {\n              strokeColor: \"#9efd38 \"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 166\n            },\n            __self: this\n          });\n          progress = progress.concat(position); //  this.setState({progress});\n\n          console.log(!nextLine);\n        }\n\n        this.setState({\n          progress\n        });\n        console.log(random); //sleep(1000)\n        // console.log(this.state.progress)\n      } //this.setState({ progress });\n\n    };\n\n    this.componentWillMount = () => {\n      this.path = this.path.map((coordinates, i, array) => {\n        if (i === 0) {\n          return _objectSpread({}, coordinates, {\n            distance: 0\n          }); // it begins here!\n        }\n\n        const lat1 = coordinates.lat,\n              lng1 = coordinates.lng;\n        const latLong1 = new window.google.maps.LatLng(lat1, lng1);\n        const _array$ = array[0],\n              lat2 = _array$.lat,\n              lng2 = _array$.lng;\n        const latLong2 = new window.google.maps.LatLng(lat2, lng2); // in meters:\n\n        const distance = window.google.maps.geometry.spherical.computeDistanceBetween(latLong1, latLong2);\n        return _objectSpread({}, coordinates, {\n          distance\n        });\n      });\n    };\n\n    this.render = () => {\n      return React.createElement(GoogleMap, {\n        defaultZoom: 16,\n        defaultCenter: {\n          lat: 18.566516,\n          lng: -68.435996\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, this.state.progress && React.createElement(React.Fragment, null, React.createElement(Marker, {\n        position: this.path[0],\n        icon: this.imageFlag,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }), React.createElement(Marker, {\n        position: this.path[this.path.length - 1],\n        icon: this.imageFlag,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }), this.polylineDrawGreen, React.createElement(Marker, {\n        position: this.state.progress[this.state.progress.length - 1],\n        icon: this.imageCar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }), this.arr.map((value, index) => {\n        return React.createElement(Marker, {\n          position: this.arr[index],\n          icon: this.image,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 227\n          },\n          __self: this\n        });\n      }), props.directions && React.createElement(DirectionsRenderer, {\n        directions: props.directions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      })));\n    };\n  }\n\n}\n\nconst MapComponent = withScriptjs(withGoogleMap(Map));\nexport default (() => React.createElement(MapComponent, {\n  googleMapURL: \"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\",\n  loadingElement: React.createElement(\"div\", {\n    style: {\n      height: \"100%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }),\n  containerElement: React.createElement(\"div\", {\n    style: {\n      height: \"650px\",\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247\n    },\n    __self: this\n  }),\n  mapElement: React.createElement(\"div\", {\n    style: {\n      height: \"100%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248\n    },\n    __self: this\n  }),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 244\n  },\n  __self: this\n}));","map":{"version":3,"sources":["C:/Users/khouloud/Documents/PI/MERN_Stack_PI/src/views/driver/Maps.js"],"names":["React","withGoogleMap","withScriptjs","GoogleMap","Polyline","Marker","Map","Component","state","progress","path","lat","lng","velocity","initialDate","Date","color","arr","markerRed","imageFlag","image","imageCar","getDistance","differentInTime","componentDidMount","interval","window","setInterval","moveObject","DirectionsService","google","maps","route","origin","LatLng","destination","travelMode","TravelMode","DRIVING","result","status","DirectionsStatus","OK","setState","directions","console","error","componentWillUnmount","clearInterval","distance","filter","coordinates","nextLine","find","random","count","lastLine","length","lastLineLatLng","nextLineLatLng","totalDistance","percentage","position","geometry","spherical","interpolate","Math","floor","ceil","log","push","concat","polylineDrawGreen","strokeColor","componentWillMount","map","i","array","lat1","lng1","latLong1","lat2","lng2","latLong2","computeDistanceBetween","render","value","index","props","MapComponent","height","width"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { withGoogleMap, withScriptjs, GoogleMap, Polyline, Marker } from 'react-google-maps'\r\n\r\nclass Map extends React.Component {\r\n    state = {\r\n        progress: [],\r\n    }\r\n\r\n    path = [\r\n        { lat: 18.566516, lng: -68.435996 },\r\n        { lat: 18.5644, lng: -68.423036 },\r\n        { lat: 18.563586, lng: -68.418744 },\r\n        { lat: 18.562339, lng: -68.410725 },\r\n        { lat: 18.560927, lng: -68.402459 },\r\n        { lat: 18.559605, lng: -68.394354 },\r\n        { lat: 18.559028, lng: -68.391003 },\r\n        { lat: 18.558841, lng: -68.390594 },\r\n        { lat: 18.558795, lng: -68.390387 },\r\n        { lat: 18.558767, lng: -68.390312 },\r\n        { lat: 18.558744, lng: -68.390256 },\r\n        { lat: 18.558726, lng: -68.390202 },\r\n        { lat: 18.55867, lng: -68.390124 },\r\n        { lat: 18.558663, lng: -68.390111 },\r\n        { lat: 18.558602, lng: -68.389995 },\r\n        { lat: 18.5585, lng: -68.389867 },\r\n        { lat: 18.558462, lng: -68.389837 },\r\n        { lat: 18.558396, lng: -68.389781 },\r\n        { lat: 18.55828, lng: -68.389641 },\r\n        { lat: 18.558234, lng: -68.389557 },\r\n        { lat: 18.558143, lng: -68.389469 },\r\n        { lat: 18.558089, lng: -68.389362 },\r\n        { lat: 18.558062, lng: -68.389265 },\r\n        { lat: 18.558011, lng: -68.389069 },\r\n        { lat: 18.557985, lng: -68.388965 },\r\n        { lat: 18.557988, lng: -68.38879 },\r\n        { lat: 18.558032, lng: -68.388603 },\r\n        { lat: 18.55806, lng: -68.388525 },\r\n        { lat: 18.558113, lng: -68.388425 },\r\n        { lat: 18.558192, lng: -68.388297 },\r\n        { lat: 18.558301, lng: -68.388181 },\r\n        { lat: 18.558497, lng: -68.388045 },\r\n        { lat: 18.558571, lng: -68.388002 },\r\n        { lat: 18.558701, lng: -68.387927 },\r\n        { lat: 18.558863, lng: -68.387895 },\r\n        { lat: 18.559046, lng: -68.387887 },\r\n        { lat: 18.559308, lng: -68.387922 },\r\n        { lat: 18.559677, lng: -68.388185 },\r\n        { lat: 18.559824, lng: -68.388314 },\r\n        { lat: 18.559929, lng: -68.388397 },\r\n        { lat: 18.560018, lng: -68.388512 },\r\n        { lat: 18.560203, lng: -68.388607 },\r\n        { lat: 18.560472, lng: -68.388615 },\r\n        { lat: 18.560655, lng: -68.388613 },\r\n        { lat: 18.560957, lng: -68.388572 },\r\n        { lat: 18.561206, lng: -68.388521 }\r\n    ]\r\n\r\n    velocity = 5\r\n    initialDate = new Date()\r\n    color = \"\";\r\n    polylineDrawGreen;\r\n    polylineDrawRed;\r\n    arr = [];\r\n    markerRed = [];\r\n    imageFlag = 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png';\r\n    image = 'https://img.icons8.com/flat_round/20/000000/error--v1.png';\r\n    imageCar = 'https://img.icons8.com/offices/30/000000/rv-campground.png';\r\n\r\n    getDistance = () => {\r\n        // seconds between when the component loaded and now\r\n        const differentInTime = (new Date() - this.initialDate) / 1000 // pass to seconds\r\n        return differentInTime * this.velocity // d = v*t -- thanks Newton!\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.interval = window.setInterval(this.moveObject, 1000)\r\n        const DirectionsService = new google.maps.DirectionsService();\r\n\r\n        DirectionsService.route({\r\n            origin: new google.maps.LatLng(41.8507300, -87.6512600),\r\n            destination: new google.maps.LatLng(41.8525800, -87.6514100),\r\n            travelMode: google.maps.TravelMode.DRIVING,\r\n        }, (result, status) => {\r\n            if (status === google.maps.DirectionsStatus.OK) {\r\n                this.setState({\r\n                    directions: result,\r\n                });\r\n            } else {\r\n                console.error(`error fetching directions ${result}`);\r\n            }\r\n        });\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n        window.clearInterval(this.interval)\r\n    }\r\n\r\n    moveObject = () => {\r\n        const distance = this.getDistance()\r\n        if (! distance) {\r\n            return\r\n        }\r\n        /*function sleep(milliseconds) {\r\n            const date = Date.now();\r\n            let currentDate = null;\r\n            do {\r\n                currentDate = Date.now();\r\n            } while (currentDate - date < milliseconds);\r\n        }*/\r\n        let progress = this.path.filter(coordinates => coordinates.distance < distance)\r\n\r\n         const nextLine = this.path.find(coordinates => coordinates.distance > distance)\r\n\r\n\r\n        var random = 0;\r\n\r\n        var count = 0;\r\n        //var markerGreen;\r\n\r\n\r\n        if (! nextLine) {\r\n            this.setState({ progress });\r\n            return // it's the end!\r\n        }\r\n        const lastLine = progress[progress.length - 1];\r\n\r\n        const lastLineLatLng = new window.google.maps.LatLng(\r\n            lastLine.lat,\r\n            lastLine.lng\r\n        );\r\n\r\n        const nextLineLatLng = new window.google.maps.LatLng(\r\n            nextLine.lat,\r\n            nextLine.lng\r\n        );\r\n\r\n        // distance of this line\r\n        const totalDistance = nextLine.distance - lastLine.distance\r\n        const percentage = (distance - lastLine.distance) / totalDistance\r\n\r\n        const position = window.google.maps.geometry.spherical.interpolate(\r\n            lastLineLatLng,\r\n            nextLineLatLng,\r\n            percentage\r\n        );\r\n\r\n        if (count % 5 === 0) {\r\n            random =Math.random();\r\n            if(random<0.5){\r\n                random =Math.floor(random)\r\n            }\r\n            else{\r\n                random= Math.ceil(random)\r\n            }\r\n            if (random === 0) {\r\n                console.log(\"red\");\r\n                // this.polylineDrawRed =   <Polyline path={this.state.progress} options={{ strokeColor: \"#FF0000\"}} />\r\n                //console.log(position.lat()+\" , \"+ position.lng())\r\n                this.arr.push({ lat: position.lat(), lng:position.lng()});\r\n                this.markerRed.push(<Marker position={this.arr[1]}/>);\r\n                progress = progress.concat(position);\r\n                this.setState({progress});\r\n\r\n            } else {\r\n                console.log(\"green\")\r\n                this.polylineDrawGreen =   <Polyline path={this.state.progress} options={{ strokeColor: \"#9efd38 \"}} />\r\n                progress = progress.concat(position);\r\n                //  this.setState({progress});\r\n                console.log(! nextLine);\r\n\r\n            }\r\n             this.setState({progress});\r\n\r\n            console.log(random);\r\n            //sleep(1000)\r\n            // console.log(this.state.progress)\r\n        }\r\n\r\n\r\n        //this.setState({ progress });\r\n    }\r\n\r\n    componentWillMount = () => {\r\n        this.path = this.path.map((coordinates, i, array) => {\r\n                if (i === 0) {\r\n                    return { ...coordinates, distance: 0 } // it begins here!\r\n                }\r\n\r\n                const { lat: lat1, lng: lng1 } = coordinates\r\n                const latLong1 = new window.google.maps.LatLng(lat1, lng1)\r\n\r\n                const { lat: lat2, lng: lng2 } = array[0]\r\n                const latLong2 = new window.google.maps.LatLng(lat2, lng2)\r\n\r\n                // in meters:\r\n                const distance = window.google.maps.geometry.spherical.computeDistanceBetween(\r\n                    latLong1,\r\n                    latLong2\r\n                );\r\n\r\n\r\n                return { ...coordinates, distance }\r\n            }\r\n\r\n        );\r\n    }\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <GoogleMap\r\n                defaultZoom={16}\r\n                defaultCenter={ {\r\n                    lat: 18.566516, lng: -68.435996\r\n                }}\r\n            >\r\n                {\r\n\r\n                    this.state.progress && (\r\n                        <>\r\n                            <Marker position={this.path[0] } icon={this.imageFlag}/>\r\n                            <Marker position={this.path[this.path.length-1] } icon={this.imageFlag}/>\r\n                            {this.polylineDrawGreen}\r\n                            <Marker position={this.state.progress[this.state.progress.length - 1] } icon={this.imageCar} />\r\n\r\n                            {this.arr.map((value, index) => {\r\n                                return <Marker position={this.arr[index]}\r\n                                               icon={this.image}\r\n                                />\r\n                            })}\r\n                            {props.directions && <DirectionsRenderer directions={props.directions} />}\r\n                        </>\r\n\r\n                    )\r\n                }\r\n            </GoogleMap>\r\n        )\r\n    }\r\n}\r\n\r\nconst MapComponent = withScriptjs(withGoogleMap(Map))\r\n\r\nexport default () => (\r\n    <MapComponent\r\n        googleMapURL=\"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\"\r\n        loadingElement={<div style={{ height: `100%` }} />}\r\n        containerElement={<div style={{ height: `650px`, width: '100%' }} />}\r\n        mapElement={<div style={{ height: `100%` }} />}\r\n    />\r\n\r\n)\r\n"]},"metadata":{},"sourceType":"module"}