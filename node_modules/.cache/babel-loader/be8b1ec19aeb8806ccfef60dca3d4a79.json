{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\khouloud\\\\Documents\\\\PI\\\\MERN_Stack_PI\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"C:\\\\Users\\\\khouloud\\\\Documents\\\\PI\\\\MERN_Stack_PI\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\khouloud\\\\Documents\\\\PI\\\\MERN_Stack_PI\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\n/**\r\n * Module to use LocationIQ's geocoding and reverse geocoding.\r\n */\nlet LocationIQ;\nexport default LocationIQ = {\n  token: null,\n\n  /**\r\n   * Initialize the module.\r\n   * @param {String} token The LocationIQ token.\r\n   * @see https://locationiq.com/docs\r\n   */\n  init(token) {\n    this.token = token;\n  },\n\n  /**\r\n   * @returns {boolean} True if the module has been initiated. False otherwise.\r\n   */\n  get isInit() {\n    return !!this.token;\n  },\n\n  /**\r\n   * Do <a href=\"https://locationiq.com/docs#reverse-geocoding\">(reverse) geocoding</a>, converting geographic coordinates into a human-readable address.\r\n   * Accepted parameters:\r\n   * <ul>\r\n   *     <li>from(Number latitude, Number longitude)</li>\r\n   *     <li>from(Array [latitude, longitude])</li>\r\n   *     <li>from(Object {latitude, longitude})</li>\r\n   *     <li>from(Object {lat, lng})</li>\r\n   * </ul>\r\n   * @returns {Promise.<Object>} Object containing informations about the place at the coordinates.\r\n   * @see https://locationiq.com/docs#reverse-geocoding\r\n   */\n  reverse(...params) {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var queryParams, url, response, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (LocationIQ.isInit) {\n              _context.next = 2;\n              break;\n            }\n\n            throw {\n              code: LocationIQ.Errors.NOT_INITIATED,\n              message: \"LocationIQ isn't initialized. Call LocationIQ.init function, passing it your token as parameter.\"\n            };\n\n          case 2:\n            // (latitude, longitude)\n            if (!isNaN(params[0]) && !isNaN(params[1])) queryParams = {\n              lat: \"\".concat(params[0]),\n              lon: \"\".concat(params[1])\n            }; // [latitude, longitude]\n            else if (params[0] instanceof Array) queryParams = {\n                lat: \"\".concat(params[0][0]),\n                lon: \"\".concat(params[0][1])\n              }; // {latitude, longitude}  or {lat, lng}\n              else if (params[0] instanceof Object) queryParams = {\n                  lat: \"\".concat(params[0].lat || params[0].latitude),\n                  lon: \"\".concat(params[0].lng || params[0].longitude)\n                }; // --- start geocoding ---\n            // check query params\n\n            if (queryParams) {\n              _context.next = 5;\n              break;\n            }\n\n            throw {\n              code: LocationIQ.Errors.INVALID_PARAMETERS,\n              message: \"Invalid parameters : \\n\" + JSON.stringify(params, null, 2)\n            };\n\n          case 5:\n            queryParams = _objectSpread({\n              key: _this.token,\n              format: 'json'\n            }, queryParams); // build url\n\n            url = \"https://us1.locationiq.com/v1/reverse.php?\".concat(toQueryParams(queryParams));\n            _context.prev = 7;\n            _context.next = 10;\n            return fetch(url);\n\n          case 10:\n            response = _context.sent;\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](7);\n            throw {\n              code: LocationIQ.Errors.FETCHING,\n              message: \"Error while fetching. Check your network.\",\n              origin: _context.t0\n            };\n\n          case 16:\n            _context.prev = 16;\n            _context.next = 19;\n            return response.json();\n\n          case 19:\n            data = _context.sent;\n            _context.next = 25;\n            break;\n\n          case 22:\n            _context.prev = 22;\n            _context.t1 = _context[\"catch\"](16);\n            throw {\n              code: LocationIQ.Errors.PARSING,\n              message: \"Error while parsing response's body into JSON. The response is in the error's 'origin' field. Try to parse it yourself.\",\n              origin: response\n            };\n\n          case 25:\n            if (!(data.place_id === undefined)) {\n              _context.next = 27;\n              break;\n            }\n\n            throw {\n              code: LocationIQ.Errors.SERVER,\n              message: \"Error from the server while geocoding. The received datas are in the error's 'origin' field. Check it for more informations.\",\n              origin: data\n            };\n\n          case 27:\n            return _context.abrupt(\"return\", data);\n\n          case 28:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[7, 13], [16, 22]]);\n    }))();\n  },\n\n  /**\r\n   * Do <a href=\"https://locationiq.com/docs#forward-geocoding\">(search) geocoding</a>, converting human-readable address into geographic coordinates.\r\n   * Accepted parameters:\r\n   * <ul>\r\n   *     <li>from(String address)</li>\r\n   * </ul>\r\n   * @returns {Promise.<Object>} Object containing informations about the place at the coordinates.\r\n   * @see https://locationiq.com/docs#forward-geocoding\r\n   */\n  search(...params) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var queryParams, url, response, data;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (LocationIQ.isInit) {\n              _context2.next = 2;\n              break;\n            }\n\n            throw {\n              code: LocationIQ.Errors.NOT_INITIATED,\n              message: \"LocationIQ isn't initialized. Call LocationIQ.init function, passing it your token as parameter.\"\n            };\n\n          case 2:\n            // address\n            if (typeof params[0] === 'string') queryParams = {\n              q: params[0]\n            }; // --- start geocoding ---\n            // check query params\n\n            if (queryParams) {\n              _context2.next = 5;\n              break;\n            }\n\n            throw {\n              code: LocationIQ.Errors.INVALID_PARAMETERS,\n              message: \"Invalid parameters : \\n\" + JSON.stringify(params, null, 2)\n            };\n\n          case 5:\n            queryParams = _objectSpread({\n              key: _this2.token,\n              format: 'json'\n            }, queryParams); // build url\n\n            url = \"https://us1.locationiq.com/v1/search.php?\".concat(toQueryParams(queryParams));\n            _context2.prev = 7;\n            _context2.next = 10;\n            return fetch(url);\n\n          case 10:\n            response = _context2.sent;\n            _context2.next = 16;\n            break;\n\n          case 13:\n            _context2.prev = 13;\n            _context2.t0 = _context2[\"catch\"](7);\n            throw {\n              code: LocationIQ.Errors.FETCHING,\n              message: \"Error while fetching. Check your network.\",\n              origin: _context2.t0\n            };\n\n          case 16:\n            _context2.prev = 16;\n            _context2.next = 19;\n            return response.json();\n\n          case 19:\n            data = _context2.sent;\n            _context2.next = 25;\n            break;\n\n          case 22:\n            _context2.prev = 22;\n            _context2.t1 = _context2[\"catch\"](16);\n            throw {\n              code: LocationIQ.Errors.PARSING,\n              message: \"Error while parsing response's body into JSON. The response is in the error's 'origin' field. Try to parse it yourself.\",\n              origin: response\n            };\n\n          case 25:\n            if (!(data[0] === undefined)) {\n              _context2.next = 27;\n              break;\n            }\n\n            throw {\n              code: LocationIQ.Errors.SERVER,\n              message: \"Error from the server while geocoding. The received datas are in the error's 'origin' field. Check it for more informations.\",\n              origin: data\n            };\n\n          case 27:\n            return _context2.abrupt(\"return\", data);\n\n          case 28:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[7, 13], [16, 22]]);\n    }))();\n  },\n\n  /**\r\n   * All possible errors.\r\n   */\n  Errors: {\n    /**\r\n     * Module hasn't been initiated. Call {@link LocationIQ.init}.\r\n     */\n    NOT_INITIATED: 0,\n\n    /**\r\n     * Parameters are invalid.\r\n     */\n    INVALID_PARAMETERS: 1,\n\n    /**\r\n     * Error wile fetching to server.\r\n     * The error.origin property contains the original fetch error.\r\n     */\n    FETCHING: 2,\n\n    /**\r\n     * Error while parsing server response.\r\n     * The error.origin property contains the response.\r\n     */\n    PARSING: 3,\n\n    /**\r\n     * Error from the server.\r\n     * The error.origin property contains the response's body.\r\n     */\n    SERVER: 4\n  }\n};\n/**\r\n * Convert an object into query parameters.\r\n * @param {Object} object Object to convert.\r\n * @returns {string} Encoded query parameters.\r\n */\n\nfunction toQueryParams(object) {\n  return Object.keys(object).filter(key => !!object[key]).map(key => key + \"=\" + encodeURIComponent(object[key])).join(\"&\");\n}","map":{"version":3,"sources":["C:/Users/khouloud/Documents/PI/MERN_Stack_PI/node_modules/react-native-locationiq/LocationIQ.js"],"names":["LocationIQ","token","init","isInit","reverse","params","code","Errors","NOT_INITIATED","message","isNaN","queryParams","lat","lon","Array","Object","latitude","lng","longitude","INVALID_PARAMETERS","JSON","stringify","key","format","url","toQueryParams","fetch","response","FETCHING","origin","json","data","PARSING","place_id","undefined","SERVER","search","q","object","keys","filter","map","encodeURIComponent","join"],"mappings":";;;;AAAA;;;AAGA,IAAIA,UAAJ;AACA,eAAeA,UAAU,GAAG;AAC3BC,EAAAA,KAAK,EAAG,IADmB;;AAG3B;;;;;AAKAC,EAAAA,IAAI,CAACD,KAAD,EAAQ;AACX,SAAKA,KAAL,GAAaA,KAAb;AACA,GAV0B;;AAY3B;;;AAGA,MAAIE,MAAJ,GAAa;AACZ,WAAO,CAAC,CAAC,KAAKF,KAAd;AACA,GAjB0B;;AAmB3B;;;;;;;;;;;;AAYMG,EAAAA,OAAN,CAAc,GAAGC,MAAjB,EAAyB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAEnBL,UAAU,CAACG,MAFQ;AAAA;AAAA;AAAA;;AAAA,kBAGjB;AACLG,cAAAA,IAAI,EAAGN,UAAU,CAACO,MAAX,CAAkBC,aADpB;AAELC,cAAAA,OAAO,EAAG;AAFL,aAHiB;;AAAA;AAWxB;AACA,gBAAI,CAACC,KAAK,CAACL,MAAM,CAAC,CAAD,CAAP,CAAN,IAAqB,CAACK,KAAK,CAACL,MAAM,CAAC,CAAD,CAAP,CAA/B,EACCM,WAAW,GAAG;AAACC,cAAAA,GAAG,YAAMP,MAAM,CAAC,CAAD,CAAZ,CAAJ;AAAuBQ,cAAAA,GAAG,YAAMR,MAAM,CAAC,CAAD,CAAZ;AAA1B,aAAd,CADD,CAGA;AAHA,iBAIK,IAAIA,MAAM,CAAC,CAAD,CAAN,YAAqBS,KAAzB,EACJH,WAAW,GAAG;AAACC,gBAAAA,GAAG,YAAMP,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAN,CAAJ;AAA0BQ,gBAAAA,GAAG,YAAMR,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAN;AAA7B,eAAd,CADI,CAGL;AAHK,mBAIA,IAAIA,MAAM,CAAC,CAAD,CAAN,YAAqBU,MAAzB,EACJJ,WAAW,GAAG;AAACC,kBAAAA,GAAG,YAAMP,MAAM,CAAC,CAAD,CAAN,CAAUO,GAAV,IAAiBP,MAAM,CAAC,CAAD,CAAN,CAAUW,QAAjC,CAAJ;AAAiDH,kBAAAA,GAAG,YAAMR,MAAM,CAAC,CAAD,CAAN,CAAUY,GAAV,IAAiBZ,MAAM,CAAC,CAAD,CAAN,CAAUa,SAAjC;AAApD,iBAAd,CArBuB,CAuBxB;AAEA;;AAzBwB,gBA0BnBP,WA1BmB;AAAA;AAAA;AAAA;;AAAA,kBA4BjB;AACLL,cAAAA,IAAI,EAAGN,UAAU,CAACO,MAAX,CAAkBY,kBADpB;AAELV,cAAAA,OAAO,EAAG,4BAA4BW,IAAI,CAACC,SAAL,CAAehB,MAAf,EAAuB,IAAvB,EAA6B,CAA7B;AAFjC,aA5BiB;;AAAA;AAiCxBM,YAAAA,WAAW;AAAKW,cAAAA,GAAG,EAAE,KAAI,CAACrB,KAAf;AAAsBsB,cAAAA,MAAM,EAAE;AAA9B,eAAyCZ,WAAzC,CAAX,CAjCwB,CAkCxB;;AACMa,YAAAA,GAnCkB,uDAmCiCC,aAAa,CAACd,WAAD,CAnC9C;AAAA;AAAA;AAAA,mBAyCNe,KAAK,CAACF,GAAD,CAzCC;;AAAA;AAyCvBG,YAAAA,QAzCuB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,kBA2CjB;AACLrB,cAAAA,IAAI,EAAGN,UAAU,CAACO,MAAX,CAAkBqB,QADpB;AAELnB,cAAAA,OAAO,EAAG,2CAFL;AAGLoB,cAAAA,MAAM;AAHD,aA3CiB;;AAAA;AAAA;AAAA;AAAA,mBAoDVF,QAAQ,CAACG,IAAT,EApDU;;AAAA;AAoDvBC,YAAAA,IApDuB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,kBAsDjB;AACLzB,cAAAA,IAAI,EAAGN,UAAU,CAACO,MAAX,CAAkByB,OADpB;AAELvB,cAAAA,OAAO,EAAG,yHAFL;AAGLoB,cAAAA,MAAM,EAAGF;AAHJ,aAtDiB;;AAAA;AAAA,kBA8DpBI,IAAI,CAACE,QAAL,KAAkBC,SA9DE;AAAA;AAAA;AAAA;;AAAA,kBA+DjB;AACL5B,cAAAA,IAAI,EAAGN,UAAU,CAACO,MAAX,CAAkB4B,MADpB;AAEL1B,cAAAA,OAAO,EAAG,8HAFL;AAGLoB,cAAAA,MAAM,EAAGE;AAHJ,aA/DiB;;AAAA;AAAA,6CAqEjBA,IArEiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsExB,GArG0B;;AAuG3B;;;;;;;;;AASMK,EAAAA,MAAN,CAAa,GAAG/B,MAAhB,EAAwB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAElBL,UAAU,CAACG,MAFO;AAAA;AAAA;AAAA;;AAAA,kBAGhB;AACLG,cAAAA,IAAI,EAAGN,UAAU,CAACO,MAAX,CAAkBC,aADpB;AAELC,cAAAA,OAAO,EAAG;AAFL,aAHgB;;AAAA;AAWvB;AACA,gBAAI,OAAOJ,MAAM,CAAC,CAAD,CAAb,KAAqB,QAAzB,EACCM,WAAW,GAAG;AAAC0B,cAAAA,CAAC,EAAGhC,MAAM,CAAC,CAAD;AAAX,aAAd,CAbsB,CAevB;AAEA;;AAjBuB,gBAkBlBM,WAlBkB;AAAA;AAAA;AAAA;;AAAA,kBAoBhB;AACLL,cAAAA,IAAI,EAAGN,UAAU,CAACO,MAAX,CAAkBY,kBADpB;AAELV,cAAAA,OAAO,EAAG,4BAA4BW,IAAI,CAACC,SAAL,CAAehB,MAAf,EAAuB,IAAvB,EAA6B,CAA7B;AAFjC,aApBgB;;AAAA;AAyBvBM,YAAAA,WAAW;AAAKW,cAAAA,GAAG,EAAE,MAAI,CAACrB,KAAf;AAAsBsB,cAAAA,MAAM,EAAE;AAA9B,eAAyCZ,WAAzC,CAAX,CAzBuB,CA0BvB;;AACMa,YAAAA,GA3BiB,sDA2BiCC,aAAa,CAACd,WAAD,CA3B9C;AAAA;AAAA;AAAA,mBAiCLe,KAAK,CAACF,GAAD,CAjCA;;AAAA;AAiCtBG,YAAAA,QAjCsB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,kBAmChB;AACLrB,cAAAA,IAAI,EAAGN,UAAU,CAACO,MAAX,CAAkBqB,QADpB;AAELnB,cAAAA,OAAO,EAAG,2CAFL;AAGLoB,cAAAA,MAAM;AAHD,aAnCgB;;AAAA;AAAA;AAAA;AAAA,mBA4CTF,QAAQ,CAACG,IAAT,EA5CS;;AAAA;AA4CtBC,YAAAA,IA5CsB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,kBA8ChB;AACLzB,cAAAA,IAAI,EAAGN,UAAU,CAACO,MAAX,CAAkByB,OADpB;AAELvB,cAAAA,OAAO,EAAG,yHAFL;AAGLoB,cAAAA,MAAM,EAAGF;AAHJ,aA9CgB;;AAAA;AAAA,kBAsDnBI,IAAI,CAAC,CAAD,CAAJ,KAAYG,SAtDO;AAAA;AAAA;AAAA;;AAAA,kBAuDhB;AACL5B,cAAAA,IAAI,EAAGN,UAAU,CAACO,MAAX,CAAkB4B,MADpB;AAEL1B,cAAAA,OAAO,EAAG,8HAFL;AAGLoB,cAAAA,MAAM,EAAGE;AAHJ,aAvDgB;;AAAA;AAAA,8CA6DhBA,IA7DgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8DvB,GA9K0B;;AAgL3B;;;AAGAxB,EAAAA,MAAM,EAAG;AACR;;;AAGAC,IAAAA,aAAa,EAAG,CAJR;;AAMR;;;AAGAW,IAAAA,kBAAkB,EAAG,CATb;;AAWR;;;;AAIAS,IAAAA,QAAQ,EAAG,CAfH;;AAiBR;;;;AAIAI,IAAAA,OAAO,EAAG,CArBF;;AAuBR;;;;AAIAG,IAAAA,MAAM,EAAG;AA3BD;AAnLkB,CAA5B;AAkNA;;;;;;AAKA,SAASV,aAAT,CAAuBa,MAAvB,EAA+B;AAC9B,SAAOvB,MAAM,CAACwB,IAAP,CAAYD,MAAZ,EACLE,MADK,CACElB,GAAG,IAAI,CAAC,CAACgB,MAAM,CAAChB,GAAD,CADjB,EAELmB,GAFK,CAEDnB,GAAG,IAAIA,GAAG,GAAG,GAAN,GAAYoB,kBAAkB,CAACJ,MAAM,CAAChB,GAAD,CAAP,CAFpC,EAGLqB,IAHK,CAGA,GAHA,CAAP;AAIA","sourcesContent":["/**\r\n * Module to use LocationIQ's geocoding and reverse geocoding.\r\n */\r\nlet LocationIQ;\r\nexport default LocationIQ = {\r\n\ttoken : null,\r\n\t\r\n\t/**\r\n\t * Initialize the module.\r\n\t * @param {String} token The LocationIQ token.\r\n\t * @see https://locationiq.com/docs\r\n\t */\r\n\tinit(token) {\r\n\t\tthis.token = token;\r\n\t},\r\n\r\n\t/**\r\n\t * @returns {boolean} True if the module has been initiated. False otherwise.\r\n\t */\r\n\tget isInit() {\r\n\t\treturn !!this.token;\r\n\t},\r\n\r\n\t/**\r\n\t * Do <a href=\"https://locationiq.com/docs#reverse-geocoding\">(reverse) geocoding</a>, converting geographic coordinates into a human-readable address.\r\n\t * Accepted parameters:\r\n\t * <ul>\r\n\t *     <li>from(Number latitude, Number longitude)</li>\r\n\t *     <li>from(Array [latitude, longitude])</li>\r\n\t *     <li>from(Object {latitude, longitude})</li>\r\n\t *     <li>from(Object {lat, lng})</li>\r\n\t * </ul>\r\n\t * @returns {Promise.<Object>} Object containing informations about the place at the coordinates.\r\n\t * @see https://locationiq.com/docs#reverse-geocoding\r\n\t */\r\n\tasync reverse(...params) {\r\n\t\t// check api key\r\n\t\tif (!LocationIQ.isInit)\r\n\t\t\tthrow {\r\n\t\t\t\tcode : LocationIQ.Errors.NOT_INITIATED,\r\n\t\t\t\tmessage : \"LocationIQ isn't initialized. Call LocationIQ.init function, passing it your token as parameter.\",\r\n\t\t\t};\r\n\r\n\t\t// --- convert parameters ---\r\n\t\tlet queryParams;\r\n\r\n\t\t// (latitude, longitude)\r\n\t\tif (!isNaN(params[0]) && !isNaN(params[1]))\r\n\t\t\tqueryParams = {lat : `${params[0]}`, lon : `${params[1]}`};\r\n\r\n\t\t// [latitude, longitude]\r\n\t\telse if (params[0] instanceof Array)\r\n\t\t\tqueryParams = {lat : `${params[0][0]}`, lon : `${params[0][1]}`};\r\n\r\n\t\t// {latitude, longitude}  or {lat, lng}\r\n\t\telse if (params[0] instanceof Object)\r\n\t\t\tqueryParams = {lat : `${params[0].lat || params[0].latitude}`, lon : `${params[0].lng || params[0].longitude}`};\r\n\r\n\t\t// --- start geocoding ---\r\n\r\n\t\t// check query params\r\n\t\tif (!queryParams)\r\n\t\t// no query params, means parameters where invalid\r\n\t\t\tthrow {\r\n\t\t\t\tcode : LocationIQ.Errors.INVALID_PARAMETERS,\r\n\t\t\t\tmessage : \"Invalid parameters : \\n\" + JSON.stringify(params, null, 2),\r\n\t\t\t};\r\n\r\n\t\tqueryParams = { key: this.token, format: 'json', ...queryParams }\r\n\t\t// build url\r\n\t\tconst url = `https://us1.locationiq.com/v1/reverse.php?${toQueryParams(queryParams)}`;\r\n\r\n\t\tlet response, data;\r\n\r\n\t\t// fetch\r\n\t\ttry {\r\n\t\t\tresponse = await fetch(url);\r\n\t\t} catch(error) {\r\n\t\t\tthrow {\r\n\t\t\t\tcode : LocationIQ.Errors.FETCHING,\r\n\t\t\t\tmessage : \"Error while fetching. Check your network.\",\r\n\t\t\t\torigin : error,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// parse\r\n\t\ttry {\r\n\t\t\tdata = await response.json();\r\n\t\t} catch(error) {\r\n\t\t\tthrow {\r\n\t\t\t\tcode : LocationIQ.Errors.PARSING,\r\n\t\t\t\tmessage : \"Error while parsing response's body into JSON. The response is in the error's 'origin' field. Try to parse it yourself.\",\r\n\t\t\t\torigin : response,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// check response's data\r\n\t\tif (data.place_id === undefined)\r\n\t\t\tthrow {\r\n\t\t\t\tcode : LocationIQ.Errors.SERVER,\r\n\t\t\t\tmessage : \"Error from the server while geocoding. The received datas are in the error's 'origin' field. Check it for more informations.\",\r\n\t\t\t\torigin : data,\r\n\t\t\t};\r\n\r\n\t\treturn data;\r\n\t},\r\n\r\n\t/**\r\n\t * Do <a href=\"https://locationiq.com/docs#forward-geocoding\">(search) geocoding</a>, converting human-readable address into geographic coordinates.\r\n\t * Accepted parameters:\r\n\t * <ul>\r\n\t *     <li>from(String address)</li>\r\n\t * </ul>\r\n\t * @returns {Promise.<Object>} Object containing informations about the place at the coordinates.\r\n\t * @see https://locationiq.com/docs#forward-geocoding\r\n\t */\r\n\tasync search(...params) {\r\n\t\t// check api key\r\n\t\tif (!LocationIQ.isInit)\r\n\t\t\tthrow {\r\n\t\t\t\tcode : LocationIQ.Errors.NOT_INITIATED,\r\n\t\t\t\tmessage : \"LocationIQ isn't initialized. Call LocationIQ.init function, passing it your token as parameter.\",\r\n\t\t\t};\r\n\r\n\t\t// --- convert parameters ---\r\n\t\tlet queryParams;\r\n\r\n\t\t// address\r\n\t\tif (typeof params[0] === 'string')\r\n\t\t\tqueryParams = {q : params[0]};\r\n\r\n\t\t// --- start geocoding ---\r\n\r\n\t\t// check query params\r\n\t\tif (!queryParams)\r\n\t\t// no query params, means parameters where invalid\r\n\t\t\tthrow {\r\n\t\t\t\tcode : LocationIQ.Errors.INVALID_PARAMETERS,\r\n\t\t\t\tmessage : \"Invalid parameters : \\n\" + JSON.stringify(params, null, 2),\r\n\t\t\t};\r\n\r\n\t\tqueryParams = { key: this.token, format: 'json', ...queryParams }\r\n\t\t// build url\r\n\t\tconst url = `https://us1.locationiq.com/v1/search.php?${toQueryParams(queryParams)}`;\r\n\r\n\t\tlet response, data;\r\n\r\n\t\t// fetch\r\n\t\ttry {\r\n\t\t\tresponse = await fetch(url);\r\n\t\t} catch(error) {\r\n\t\t\tthrow {\r\n\t\t\t\tcode : LocationIQ.Errors.FETCHING,\r\n\t\t\t\tmessage : \"Error while fetching. Check your network.\",\r\n\t\t\t\torigin : error,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// parse\r\n\t\ttry {\r\n\t\t\tdata = await response.json();\r\n\t\t} catch(error) {\r\n\t\t\tthrow {\r\n\t\t\t\tcode : LocationIQ.Errors.PARSING,\r\n\t\t\t\tmessage : \"Error while parsing response's body into JSON. The response is in the error's 'origin' field. Try to parse it yourself.\",\r\n\t\t\t\torigin : response,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// check response's data\r\n\t\tif (data[0] === undefined)\r\n\t\t\tthrow {\r\n\t\t\t\tcode : LocationIQ.Errors.SERVER,\r\n\t\t\t\tmessage : \"Error from the server while geocoding. The received datas are in the error's 'origin' field. Check it for more informations.\",\r\n\t\t\t\torigin : data,\r\n\t\t\t};\r\n\r\n\t\treturn data;\r\n\t},\r\n\r\n\t/**\r\n\t * All possible errors.\r\n\t */\r\n\tErrors : {\r\n\t\t/**\r\n\t\t * Module hasn't been initiated. Call {@link LocationIQ.init}.\r\n\t\t */\r\n\t\tNOT_INITIATED : 0,\r\n\r\n\t\t/**\r\n\t\t * Parameters are invalid.\r\n\t\t */\r\n\t\tINVALID_PARAMETERS : 1,\r\n\r\n\t\t/**\r\n\t\t * Error wile fetching to server.\r\n\t\t * The error.origin property contains the original fetch error.\r\n\t\t */\r\n\t\tFETCHING : 2,\r\n\r\n\t\t/**\r\n\t\t * Error while parsing server response.\r\n\t\t * The error.origin property contains the response.\r\n\t\t */\r\n\t\tPARSING : 3,\r\n\r\n\t\t/**\r\n\t\t * Error from the server.\r\n\t\t * The error.origin property contains the response's body.\r\n\t\t */\r\n\t\tSERVER : 4,\r\n\t},\r\n}\r\n\r\n/**\r\n * Convert an object into query parameters.\r\n * @param {Object} object Object to convert.\r\n * @returns {string} Encoded query parameters.\r\n */\r\nfunction toQueryParams(object) {\r\n\treturn Object.keys(object)\r\n\t\t.filter(key => !!object[key])\r\n\t\t.map(key => key + \"=\" + encodeURIComponent(object[key]))\r\n\t\t.join(\"&\")\r\n}\r\n"]},"metadata":{},"sourceType":"module"}