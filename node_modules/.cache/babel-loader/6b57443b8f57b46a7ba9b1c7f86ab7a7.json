{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Khouloud\\\\Desktop\\\\4TWIN2019\\\\4TwinSem2\\\\pi_Project\\\\MERN_Stack_PI\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\Khouloud\\\\Desktop\\\\4TWIN2019\\\\4TwinSem2\\\\pi_Project\\\\MERN_Stack_PI\\\\src\\\\views\\\\driver\\\\Maps.js\";\nimport React from 'react';\nimport { withGoogleMap, withScriptjs, GoogleMap, Polyline, Marker } from 'react-google-maps';\n\nclass Map extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      progress: []\n    };\n    this.path = [{\n      lat: -33.847927,\n      lng: 150.6517938\n    }, {\n      lat: -37.9722342,\n      lng: 144.7729561\n    }, {\n      lat: -31.9546904,\n      lng: 115.8350292\n    }];\n    this.velocity = 5;\n    this.initialDate = new Date();\n\n    this.getDistance = () => {\n      // seconds between when the component loaded and now\n      const differentInTime = (new Date() - this.initialDate) / 1000; // pass to seconds\n\n      return differentInTime * this.velocity; // d = v*t -- thanks Newton!\n    };\n\n    this.componentDidMount = () => {\n      this.interval = window.setInterval(this.moveObject, 1000);\n    };\n\n    this.componentWillUnmount = () => {\n      window.clearInterval(this.interval);\n    };\n\n    this.moveObject = () => {\n      const distance = this.getDistance();\n\n      if (!distance) {\n        return;\n      }\n\n      let progress = this.path.filter(coordinates => coordinates.distance < distance);\n      const nextLine = this.path.find(coordinates => coordinates.distance > distance);\n\n      if (!nextLine) {\n        this.setState({\n          progress\n        });\n        return; // it's the end!\n      }\n\n      const lastLine = progress[progress.length - 1];\n      const lastLineLatLng = new window.google.maps.LatLng(lastLine.lat, lastLine.lng);\n      const nextLineLatLng = new window.google.maps.LatLng(nextLine.lat, nextLine.lng); // distance of this line\n\n      const totalDistance = nextLine.distance - lastLine.distance;\n      const percentage = (distance - lastLine.distance) / totalDistance;\n      const position = window.google.maps.geometry.spherical.interpolate(lastLineLatLng, nextLineLatLng, percentage);\n      progress = progress.concat(position);\n      this.setState({\n        progress\n      });\n    };\n\n    this.componentWillMount = () => {\n      this.path = this.path.map((coordinates, i, array) => {\n        if (i === 0) {\n          return _objectSpread({}, coordinates, {\n            distance: 0\n          }); // it begins here!\n        }\n\n        const lat1 = coordinates.lat,\n              lng1 = coordinates.lng;\n        const latLong1 = new window.google.maps.LatLng(lat1, lng1);\n        const _array$ = array[0],\n              lat2 = _array$.lat,\n              lng2 = _array$.lng;\n        const latLong2 = new window.google.maps.LatLng(lat2, lng2); // in meters:\n\n        const distance = window.google.maps.geometry.spherical.computeDistanceBetween(latLong1, latLong2);\n        return _objectSpread({}, coordinates, {\n          distance\n        });\n      });\n      console.log(this.path);\n    };\n\n    this.render = () => {\n      return React.createElement(GoogleMap, {\n        defaultZoom: 16,\n        defaultCenter: {\n          lat: -33.847927,\n          lng: 150.6517938\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, this.state.progress && React.createElement(React.Fragment, null, React.createElement(Polyline, {\n        path: this.state.progress,\n        options: {\n          strokeColor: \"#FF0000 \"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }), React.createElement(Marker, {\n        position: this.state.progress[this.state.progress.length - 1],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      })));\n    };\n  }\n\n}\n\nconst MapComponent = withScriptjs(withGoogleMap(Map));\nexport default (() => React.createElement(MapComponent, {\n  googleMapURL: \"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\",\n  loadingElement: React.createElement(\"div\", {\n    style: {\n      height: \"100%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }),\n  containerElement: React.createElement(\"div\", {\n    style: {\n      height: \"650px\",\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }),\n  mapElement: React.createElement(\"div\", {\n    style: {\n      height: \"100%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 126\n  },\n  __self: this\n}));","map":{"version":3,"sources":["C:/Users/Khouloud/Desktop/4TWIN2019/4TwinSem2/pi_Project/MERN_Stack_PI/src/views/driver/Maps.js"],"names":["React","withGoogleMap","withScriptjs","GoogleMap","Polyline","Marker","Map","Component","state","progress","path","lat","lng","velocity","initialDate","Date","getDistance","differentInTime","componentDidMount","interval","window","setInterval","moveObject","componentWillUnmount","clearInterval","distance","filter","coordinates","nextLine","find","setState","lastLine","length","lastLineLatLng","google","maps","LatLng","nextLineLatLng","totalDistance","percentage","position","geometry","spherical","interpolate","concat","componentWillMount","map","i","array","lat1","lng1","latLong1","lat2","lng2","latLong2","computeDistanceBetween","console","log","render","strokeColor","MapComponent","height","width"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { withGoogleMap, withScriptjs, GoogleMap, Polyline, Marker } from 'react-google-maps'\r\n\r\nclass Map extends React.Component {\r\n    state = {\r\n        progress: [],\r\n    }\r\n\r\n    path = [\r\n        {\r\n            lat: -33.847927,\r\n            lng: 150.6517938\r\n        },\r\n        {\r\n            lat: -37.9722342,\r\n            lng: 144.7729561\r\n        },\r\n        {\r\n            lat: -31.9546904,\r\n            lng: 115.8350292\r\n        }\r\n    ]\r\n\r\n    velocity = 5\r\n    initialDate = new Date()\r\n\r\n    getDistance = () => {\r\n        // seconds between when the component loaded and now\r\n        const differentInTime = (new Date() - this.initialDate) / 1000 // pass to seconds\r\n        return differentInTime * this.velocity // d = v*t -- thanks Newton!\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.interval = window.setInterval(this.moveObject, 1000)\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n        window.clearInterval(this.interval)\r\n    }\r\n\r\n    moveObject = () => {\r\n        const distance = this.getDistance()\r\n        if (! distance) {\r\n            return\r\n        }\r\n\r\n        let progress = this.path.filter(coordinates => coordinates.distance < distance)\r\n\r\n        const nextLine = this.path.find(coordinates => coordinates.distance > distance)\r\n        if (! nextLine) {\r\n            this.setState({ progress })\r\n            return // it's the end!\r\n        }\r\n        const lastLine = progress[progress.length - 1]\r\n\r\n        const lastLineLatLng = new window.google.maps.LatLng(\r\n            lastLine.lat,\r\n            lastLine.lng\r\n        )\r\n\r\n        const nextLineLatLng = new window.google.maps.LatLng(\r\n            nextLine.lat,\r\n            nextLine.lng\r\n        )\r\n\r\n        // distance of this line\r\n        const totalDistance = nextLine.distance - lastLine.distance\r\n        const percentage = (distance - lastLine.distance) / totalDistance\r\n\r\n        const position = window.google.maps.geometry.spherical.interpolate(\r\n            lastLineLatLng,\r\n            nextLineLatLng,\r\n            percentage\r\n        )\r\n\r\n        progress = progress.concat(position)\r\n        this.setState({ progress })\r\n    }\r\n\r\n    componentWillMount = () => {\r\n        this.path = this.path.map((coordinates, i, array) => {\r\n            if (i === 0) {\r\n                return { ...coordinates, distance: 0 } // it begins here!\r\n            }\r\n            const { lat: lat1, lng: lng1 } = coordinates\r\n            const latLong1 = new window.google.maps.LatLng(lat1, lng1)\r\n\r\n            const { lat: lat2, lng: lng2 } = array[0]\r\n            const latLong2 = new window.google.maps.LatLng(lat2, lng2)\r\n\r\n            // in meters:\r\n            const distance = window.google.maps.geometry.spherical.computeDistanceBetween(\r\n                latLong1,\r\n                latLong2\r\n            )\r\n\r\n            return { ...coordinates, distance }\r\n        })\r\n\r\n        console.log(this.path)\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <GoogleMap\r\n                defaultZoom={16}\r\n                defaultCenter={ {\r\n                    lat: -33.847927,\r\n                    lng: 150.6517938\r\n                }}\r\n            >\r\n                { this.state.progress && (\r\n                    <>\r\n                        <Polyline path={this.state.progress} options={{ strokeColor: \"#FF0000 \"}} />\r\n                        <Marker position={this.state.progress[this.state.progress.length - 1]} />\r\n                    </>\r\n                )}\r\n            </GoogleMap>\r\n        )\r\n    }\r\n}\r\n\r\nconst MapComponent = withScriptjs(withGoogleMap(Map))\r\n\r\nexport default () => (\r\n    <MapComponent\r\n        googleMapURL=\"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\"\r\n        loadingElement={<div style={{ height: `100%` }} />}\r\n        containerElement={<div style={{ height: `650px`, width: '100%' }} />}\r\n        mapElement={<div style={{ height: `100%` }} />}\r\n    />\r\n)\r\n"]},"metadata":{},"sourceType":"module"}