{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\khouloud\\\\Documents\\\\PI\\\\MERN_Stack_PI\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\khouloud\\\\Documents\\\\PI\\\\MERN_Stack_PI\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst operation_retrier_1 = require(\"operation-retrier\");\n\nconst logger_1 = require(\"./logger\");\n\nconst connector_1 = require(\"./connector\");\n\nexports.Connector = connector_1.Connector;\nlet retrierConfig = {\n  min: 2000,\n  max: 120000,\n  randomness: 0.2\n};\n/**\n * Manages the registrations on ERS service.\n * Deduplicates registrations and manages them automatically\n */\n\nclass RegistrarConnector extends connector_1.Connector {\n  /**\n   * Creates new instance of the ERS registrar\n   *\n   * @param Object configuration\n   * @param string notificationId\n   * @param string channelType\n   * @param Array messageTypes\n   */\n  constructor(channelType, context, transport, config) {\n    super(config);\n    this.channelType = channelType;\n    this.context = context;\n    this.transport = transport;\n  }\n\n  updateRegistration(registration, reasons) {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (!reasons.has('notificationId')) {\n              _context.next = 3;\n              break;\n            }\n\n            _context.next = 3;\n            return _this.removeRegistration();\n\n          case 3:\n            if (!(!registration.notificationId || !registration.notificationId.length)) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", registration);\n\n          case 5:\n            _context.next = 7;\n            return _this.register(registration);\n\n          case 7:\n            return _context.abrupt(\"return\", registration);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  removeRegistration() {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var url, headers;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (_this2.registrationId) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 2:\n            url = \"\".concat(_this2.config.registrarUrl, \"/\").concat(_this2.registrationId, \"?productId=\").concat(_this2.context.productId);\n            headers = {\n              'Content-Type': 'application/json',\n              'X-Twilio-Token': _this2.config.token\n            };\n            _context2.prev = 4;\n            logger_1.log.trace('Removing registration for ', _this2.channelType);\n            _context2.next = 8;\n            return new operation_retrier_1.Retrier(Object.assign(retrierConfig, {\n              maxAttemptsCount: 3\n            })).run(() => _this2.transport.delete(url, headers));\n\n          case 8:\n            logger_1.log.debug('Registration removed for', _this2.channelType);\n            _context2.next = 15;\n            break;\n\n          case 11:\n            _context2.prev = 11;\n            _context2.t0 = _context2[\"catch\"](4);\n            logger_1.log.error('Failed to remove of registration ', _this2.channelType, _context2.t0);\n            throw _context2.t0;\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[4, 11]]);\n    }))();\n  }\n\n  register(registration) {\n    var _this3 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var registrarRequest, url, headers, response;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            logger_1.log.trace('Registering', _this3.channelType, registration);\n            registrarRequest = {\n              endpoint_platform: _this3.context.platform,\n              channel_type: _this3.channelType,\n              version: _this3.context.protocolVersion.toString(),\n              message_types: Array.from(registration.messageTypes),\n              data: {\n                registration_id: registration.notificationId\n              },\n              ttl: 'PT24H'\n            };\n            url = \"\".concat(_this3.config.registrarUrl, \"?productId=\").concat(_this3.context.productId);\n            headers = {\n              'Content-Type': 'application/json',\n              'X-Twilio-Token': registration.token\n            };\n            logger_1.log.trace('Creating registration for channel ', _this3.channelType);\n            _context3.prev = 5;\n            _context3.next = 8;\n            return new operation_retrier_1.Retrier(retrierConfig).run(() => _this3.transport.post(url, headers, registrarRequest));\n\n          case 8:\n            response = _context3.sent;\n            _this3.registrationId = response.body.id;\n            logger_1.log.debug('Registration created: ', response);\n            _context3.next = 17;\n            break;\n\n          case 13:\n            _context3.prev = 13;\n            _context3.t0 = _context3[\"catch\"](5);\n            logger_1.log.error('Registration failed: ', _context3.t0);\n            throw _context3.t0;\n\n          case 17:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3, null, [[5, 13]]);\n    }))();\n  }\n\n}\n\nexports.RegistrarConnector = RegistrarConnector;","map":{"version":3,"sources":["C:/Users/khouloud/Documents/PI/MERN_Stack_PI/node_modules/twilio-notifications/lib/registrar.connector.js"],"names":["Object","defineProperty","exports","value","operation_retrier_1","require","logger_1","connector_1","Connector","retrierConfig","min","max","randomness","RegistrarConnector","constructor","channelType","context","transport","config","updateRegistration","registration","reasons","has","removeRegistration","notificationId","length","register","registrationId","url","registrarUrl","productId","headers","token","log","trace","Retrier","assign","maxAttemptsCount","run","delete","debug","error","registrarRequest","endpoint_platform","platform","channel_type","version","protocolVersion","toString","message_types","Array","from","messageTypes","data","registration_id","ttl","post","response","body","id"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst operation_retrier_1 = require(\"operation-retrier\");\nconst logger_1 = require(\"./logger\");\nconst connector_1 = require(\"./connector\");\nexports.Connector = connector_1.Connector;\nlet retrierConfig = {\n    min: 2000,\n    max: 120000,\n    randomness: 0.2\n};\n/**\n * Manages the registrations on ERS service.\n * Deduplicates registrations and manages them automatically\n */\nclass RegistrarConnector extends connector_1.Connector {\n    /**\n     * Creates new instance of the ERS registrar\n     *\n     * @param Object configuration\n     * @param string notificationId\n     * @param string channelType\n     * @param Array messageTypes\n     */\n    constructor(channelType, context, transport, config) {\n        super(config);\n        this.channelType = channelType;\n        this.context = context;\n        this.transport = transport;\n    }\n    async updateRegistration(registration, reasons) {\n        if (reasons.has('notificationId')) {\n            await this.removeRegistration();\n        }\n        if (!registration.notificationId || !registration.notificationId.length) {\n            return registration;\n        }\n        await this.register(registration);\n        return registration;\n    }\n    async removeRegistration() {\n        if (!this.registrationId) {\n            return;\n        }\n        const url = `${this.config.registrarUrl}/${this.registrationId}?productId=${this.context.productId}`;\n        const headers = {\n            'Content-Type': 'application/json',\n            'X-Twilio-Token': this.config.token\n        };\n        try {\n            logger_1.log.trace('Removing registration for ', this.channelType);\n            await new operation_retrier_1.Retrier(Object.assign(retrierConfig, { maxAttemptsCount: 3 }))\n                .run(() => this.transport.delete(url, headers));\n            logger_1.log.debug('Registration removed for', this.channelType);\n        }\n        catch (err) {\n            logger_1.log.error('Failed to remove of registration ', this.channelType, err);\n            throw err;\n        }\n    }\n    async register(registration) {\n        logger_1.log.trace('Registering', this.channelType, registration);\n        let registrarRequest = {\n            endpoint_platform: this.context.platform,\n            channel_type: this.channelType,\n            version: this.context.protocolVersion.toString(),\n            message_types: Array.from(registration.messageTypes),\n            data: {\n                registration_id: registration.notificationId\n            },\n            ttl: 'PT24H'\n        };\n        const url = `${this.config.registrarUrl}?productId=${this.context.productId}`;\n        const headers = {\n            'Content-Type': 'application/json',\n            'X-Twilio-Token': registration.token\n        };\n        logger_1.log.trace('Creating registration for channel ', this.channelType);\n        try {\n            let response = await new operation_retrier_1.Retrier(retrierConfig)\n                .run(() => this.transport.post(url, headers, registrarRequest));\n            this.registrationId = response.body.id;\n            logger_1.log.debug('Registration created: ', response);\n        }\n        catch (err) {\n            logger_1.log.error('Registration failed: ', err);\n            throw err;\n        }\n    }\n}\nexports.RegistrarConnector = RegistrarConnector;\n"]},"metadata":{},"sourceType":"script"}