{"ast":null,"code":"import { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nexport default class EventSubscriber extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    this.subscribeEvents = room => {\n      const _this$props = this.props,\n            events = _this$props.events,\n            onUpdate = _this$props.onUpdate;\n      events.forEach(event => room.addListener(event, onUpdate));\n    };\n\n    this.unsubscribeEvents = room => {\n      const _this$props2 = this.props,\n            events = _this$props2.events,\n            onUpdate = _this$props2.onUpdate;\n      events.forEach(event => room.removeListener(event, onUpdate));\n    };\n  }\n\n  componentDidMount() {\n    const eventEmitterObject = this.props.eventEmitterObject;\n\n    if (eventEmitterObject) {\n      this.subscribeEvents(eventEmitterObject);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const eventEmitterObject = this.props.eventEmitterObject;\n\n    if (prevProps.eventEmitterObject === eventEmitterObject) {\n      return;\n    }\n\n    if (eventEmitterObject) {\n      this.subscribeEvents(eventEmitterObject);\n    } else {\n      this.unsubscribeEvents(prevProps.eventEmitterObject);\n    }\n  }\n\n  componentWillUnmount() {\n    const eventEmitterObject = this.props.eventEmitterObject;\n\n    if (eventEmitterObject) {\n      this.unsubscribeEvents(eventEmitterObject);\n    }\n  }\n\n  render() {\n    return this.props.children;\n  }\n\n}\nEventSubscriber.propTypes = {\n  events: PropTypes.arrayOf(PropTypes.string).isRequired,\n  eventEmitterObject: PropTypes.shape({}),\n  onUpdate: PropTypes.func.isRequired,\n  children: PropTypes.node.isRequired\n};\nEventSubscriber.defaultProps = {\n  eventEmitterObject: null\n};","map":{"version":3,"sources":["C:/Users/khouloud/Documents/PI/MERN_Stack_PI/src/components/EventSubscriber/EventSubscriber.js"],"names":["PureComponent","PropTypes","EventSubscriber","subscribeEvents","room","props","events","onUpdate","forEach","event","addListener","unsubscribeEvents","removeListener","componentDidMount","eventEmitterObject","componentDidUpdate","prevProps","componentWillUnmount","render","children","propTypes","arrayOf","string","isRequired","shape","func","node","defaultProps"],"mappings":"AAAA,SAASA,aAAT,QAA8B,OAA9B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,eAAe,MAAMC,eAAN,SAA8BF,aAA9B,CAA4C;AAAA;AAAA;;AAAA,SA0CzDG,eA1CyD,GA0CvCC,IAAI,IAAI;AAAA,0BACK,KAAKC,KADV;AAAA,YAChBC,MADgB,eAChBA,MADgB;AAAA,YACRC,QADQ,eACRA,QADQ;AAGxBD,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIL,IAAI,CAACM,WAAL,CAAiBD,KAAjB,EAAwBF,QAAxB,CAAxB;AACD,KA9CwD;;AAAA,SAgDzDI,iBAhDyD,GAgDrCP,IAAI,IAAI;AAAA,2BACG,KAAKC,KADR;AAAA,YAClBC,MADkB,gBAClBA,MADkB;AAAA,YACVC,QADU,gBACVA,QADU;AAG1BD,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIL,IAAI,CAACQ,cAAL,CAAoBH,KAApB,EAA2BF,QAA3B,CAAxB;AACD,KApDwD;AAAA;;AAYzDM,EAAAA,iBAAiB,GAAG;AAAA,UACVC,kBADU,GACa,KAAKT,KADlB,CACVS,kBADU;;AAGlB,QAAIA,kBAAJ,EAAwB;AACtB,WAAKX,eAAL,CAAqBW,kBAArB;AACD;AACF;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAAA,UACpBF,kBADoB,GACG,KAAKT,KADR,CACpBS,kBADoB;;AAG5B,QAAIE,SAAS,CAACF,kBAAV,KAAiCA,kBAArC,EAAyD;AACvD;AACD;;AAED,QAAIA,kBAAJ,EAAwB;AACtB,WAAKX,eAAL,CAAqBW,kBAArB;AACD,KAFD,MAEO;AACL,WAAKH,iBAAL,CAAuBK,SAAS,CAACF,kBAAjC;AACD;AACF;;AAEDG,EAAAA,oBAAoB,GAAG;AAAA,UACbH,kBADa,GACU,KAAKT,KADf,CACbS,kBADa;;AAGrB,QAAIA,kBAAJ,EAAwB;AACtB,WAAKH,iBAAL,CAAuBG,kBAAvB;AACD;AACF;;AAcDI,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKb,KAAL,CAAWc,QAAlB;AACD;;AAxDwD;AAAtCjB,e,CACZkB,S,GAAY;AACjBd,EAAAA,MAAM,EAAEL,SAAS,CAACoB,OAAV,CAAkBpB,SAAS,CAACqB,MAA5B,EAAoCC,UAD3B;AAEjBT,EAAAA,kBAAkB,EAAEb,SAAS,CAACuB,KAAV,CAAgB,EAAhB,CAFH;AAGjBjB,EAAAA,QAAQ,EAAEN,SAAS,CAACwB,IAAV,CAAeF,UAHR;AAIjBJ,EAAAA,QAAQ,EAAElB,SAAS,CAACyB,IAAV,CAAeH;AAJR,C;AADArB,e,CAQZyB,Y,GAAe;AACpBb,EAAAA,kBAAkB,EAAE;AADA,C","sourcesContent":["import { PureComponent } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class EventSubscriber extends PureComponent {\r\n  static propTypes = {\r\n    events: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    eventEmitterObject: PropTypes.shape({}),\r\n    onUpdate: PropTypes.func.isRequired,\r\n    children: PropTypes.node.isRequired\r\n  };\r\n\r\n  static defaultProps = {\r\n    eventEmitterObject: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { eventEmitterObject } = this.props;\r\n\r\n    if (eventEmitterObject) {\r\n      this.subscribeEvents(eventEmitterObject);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { eventEmitterObject } = this.props;\r\n\r\n    if (prevProps.eventEmitterObject === eventEmitterObject) {\r\n      return;\r\n    }\r\n\r\n    if (eventEmitterObject) {\r\n      this.subscribeEvents(eventEmitterObject);\r\n    } else {\r\n      this.unsubscribeEvents(prevProps.eventEmitterObject);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { eventEmitterObject } = this.props;\r\n\r\n    if (eventEmitterObject) {\r\n      this.unsubscribeEvents(eventEmitterObject);\r\n    }\r\n  }\r\n\r\n  subscribeEvents = room => {\r\n    const { events, onUpdate } = this.props;\r\n\r\n    events.forEach(event => room.addListener(event, onUpdate));\r\n  };\r\n\r\n  unsubscribeEvents = room => {\r\n    const { events, onUpdate } = this.props;\r\n\r\n    events.forEach(event => room.removeListener(event, onUpdate));\r\n  };\r\n\r\n  render() {\r\n    return this.props.children;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}