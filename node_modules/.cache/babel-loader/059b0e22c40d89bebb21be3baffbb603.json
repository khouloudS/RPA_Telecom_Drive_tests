{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\khouloud\\\\Documents\\\\PI\\\\MERN_Stack_PI\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\khouloud\\\\Documents\\\\PI\\\\MERN_Stack_PI\\\\src\\\\views\\\\driver\\\\Maps.js\";\nimport React from 'react';\nimport { withGoogleMap, withScriptjs, GoogleMap, Polyline, Marker } from 'react-google-maps';\nimport axios from \"axios\";\n\nclass Map extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      progress: []\n    };\n    this.path = [{\n      \"lat\": \"36.776209298858504\",\n      \"lng\": \"10.198707934404316\"\n    }, {\n      \"lat\": \"36.777431491380185\",\n      \"lng\": \"10.200233776057663\"\n    }, {\n      \"lat\": \"36.777431491380185\",\n      \"lng\": \"10.20175961771101\"\n    }, {\n      \"lat\": \"36.776209298858504\",\n      \"lng\": \"10.20328554318339\"\n    }, {\n      \"lat\": \"36.776209298858504\",\n      \"lng\": \"10.206337310309115\"\n    }, {\n      \"lat\": \"36.776209298858504\",\n      \"lng\": \"10.20786315196246\"\n    }, {\n      \"lat\": \"36.776209298858504\",\n      \"lng\": \"10.20938907743484\"\n    }, {\n      \"lat\": \"36.77498708684983\",\n      \"lng\": \"10.212440844560566\"\n    }, {\n      \"lat\": \"36.77498708684983\",\n      \"lng\": \"10.213966686213913\"\n    }, {\n      \"lat\": \"36.77498708684983\",\n      \"lng\": \"10.21549252786726\"\n    }, {\n      \"lat\": \"36.77498708684983\",\n      \"lng\": \"10.217018453339639\"\n    }, {\n      \"lat\": \"36.77498708684983\",\n      \"lng\": \"10.218544294992986\"\n    }, {\n      \"lat\": \"36.77376485535446\",\n      \"lng\": \"10.220070220465365\"\n    }, {\n      \"lat\": \"36.77376485535446\",\n      \"lng\": \"10.22159606211871\"\n    }, {\n      \"lat\": \"36.77376485535446\",\n      \"lng\": \"10.22312198759109\"\n    }, {\n      \"lat\": \"36.772542604372575\",\n      \"lng\": \"10.226173754716816\"\n    }, {\n      \"lat\": \"36.77132033390444\",\n      \"lng\": \"10.227699596370163\"\n    }, {\n      \"lat\": \"36.77132033390444\",\n      \"lng\": \"10.22922543802351\"\n    }, {\n      \"lat\": \"36.77009804395031\",\n      \"lng\": \"10.230751363495889\"\n    }, {\n      \"lat\": \"36.77009804395031\",\n      \"lng\": \"10.232277205149236\"\n    }, {\n      \"lat\": \"36.768875734510445\",\n      \"lng\": \"10.233803130621613\"\n    }, {\n      \"lat\": \"36.768875734510445\",\n      \"lng\": \"10.236854897747339\"\n    }, {\n      \"lat\": \"36.768875734510445\",\n      \"lng\": \"10.23838073940069\"\n    }, {\n      \"lat\": \"36.76765343915747\",\n      \"lng\": \"10.239906664873066\"\n    }, {\n      \"lat\": \"36.76765343915747\",\n      \"lng\": \"10.241432506526413\"\n    }, {\n      \"lat\": \"36.76765343915747\",\n      \"lng\": \"10.244484273652139\"\n    }, {\n      \"lat\": \"36.76520872285218\",\n      \"lng\": \"10.247536040777863\"\n    }, {\n      \"lat\": \"36.76520872285218\",\n      \"lng\": \"10.249061882431212\"\n    }, {\n      \"lat\": \"36.76520872285218\",\n      \"lng\": \"10.252113649556938\"\n    }, {\n      \"lat\": \"36.76643109074732\",\n      \"lng\": \"10.253639575029316\"\n    }, {\n      \"lat\": \"36.76643109074732\",\n      \"lng\": \"10.255165416682663\"\n    }, {\n      \"lat\": \"36.76643109074732\",\n      \"lng\": \"10.259743025461736\"\n    }, {\n      \"lat\": \"36.76643109074732\",\n      \"lng\": \"10.261268950934117\"\n    }, {\n      \"lat\": \"36.76643109074732\",\n      \"lng\": \"10.262794792587462\"\n    }, {\n      \"lat\": \"36.76765343915747\",\n      \"lng\": \"10.264320718059842\"\n    }];\n    this.velocity = 5;\n    this.initialDate = new Date();\n    this.color = \"\";\n    this.arr = [];\n    this.markerRed = [];\n    this.imageFlag = 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png';\n    this.image = 'https://img.icons8.com/flat_round/20/000000/error--v1.png';\n    this.imageCar = 'https://img.icons8.com/offices/30/000000/rv-campground.png';\n    this.get_address_lat_lng_start = [];\n    this.get_address_lat_lng_end = [];\n\n    this.getDistance = () => {\n      // seconds between when the component loaded and now\n      const differentInTime = (new Date() - this.initialDate) / 1000; // pass to seconds\n\n      return differentInTime * this.velocity; // d = v*t -- thanks Newton!\n    };\n\n    this.componentDidMount = () => {\n      this.interval = window.setInterval(this.moveObject, 1000);\n      axios.get('http://localhost:4000/api/planning/get_address').then(response => {\n        this.setState({\n          get_address: response.data\n        });\n        console.log(response.data);\n        this.get_address_lat_lng_start.push({\n          lat: response.data[0][1],\n          lng: response.data[0][0]\n        });\n        this.get_address_lat_lng_end.push({\n          lat: response.data[response.data.length - 1][1],\n          lng: response.data[response.data.length - 1][0]\n        });\n        console.log(this.get_address_lat_lng_end);\n        console.log(this.get_address_lat_lng_start);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    this.componentWillUnmount = () => {\n      window.clearInterval(this.interval);\n    };\n\n    this.moveObject = () => {\n      const distance = this.getDistance();\n\n      if (!distance) {\n        return;\n      }\n      /*function sleep(milliseconds) {\r\n          const date = Date.now();\r\n          let currentDate = null;\r\n          do {\r\n              currentDate = Date.now();\r\n          } while (currentDate - date < milliseconds);\r\n      }*/\n\n\n      let progress = this.path.filter(coordinates => coordinates.distance < distance);\n      const nextLine = this.path.find(coordinates => coordinates.distance > distance);\n      var random = 0;\n      var count = 0; //var markerGreen;\n\n      if (!nextLine) {\n        this.setState({\n          progress\n        });\n        return; // it's the end!\n      }\n\n      const lastLine = progress[progress.length - 1];\n      const lastLineLatLng = new window.google.maps.LatLng(lastLine.lat, lastLine.lng);\n      const nextLineLatLng = new window.google.maps.LatLng(nextLine.lat, nextLine.lng); // distance of this line\n\n      const totalDistance = nextLine.distance - lastLine.distance;\n      const percentage = (distance - lastLine.distance) / totalDistance;\n      const position = window.google.maps.geometry.spherical.interpolate(lastLineLatLng, nextLineLatLng, percentage);\n\n      if (count % 5 === 0) {\n        random = Math.random();\n\n        if (random < 0.5) {\n          random = Math.floor(random);\n        } else {\n          random = Math.ceil(random);\n        }\n\n        if (random === 0) {\n          console.log(\"red\"); // this.polylineDrawRed =   <Polyline path={this.state.progress} options={{ strokeColor: \"#FF0000\"}} />\n          //console.log(position.lat()+\" , \"+ position.lng())\n\n          this.arr.push({\n            lat: position.lat(),\n            lng: position.lng()\n          });\n          this.markerRed.push(React.createElement(Marker, {\n            position: this.arr[1],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 302\n            },\n            __self: this\n          }));\n          progress = progress.concat(position);\n          this.setState({\n            progress\n          });\n        } else {\n          console.log(\"green\");\n          this.polylineDrawGreen = React.createElement(Polyline, {\n            path: this.state.progress,\n            options: {\n              strokeColor: \"#9efd38 \"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 308\n            },\n            __self: this\n          });\n          progress = progress.concat(position); //  this.setState({progress});\n\n          console.log(!nextLine);\n        }\n\n        this.setState({\n          progress\n        });\n        console.log(random); //sleep(1000)\n        // console.log(this.state.progress)\n      } //this.setState({ progress });\n\n    };\n\n    this.componentWillMount = () => {\n      this.path = this.path.map((coordinates, i, array) => {\n        if (i === 0) {\n          return _objectSpread({}, coordinates, {\n            distance: 0\n          }); // it begins here!\n        }\n\n        const lat1 = coordinates.lat,\n              lng1 = coordinates.lng;\n        const latLong1 = new window.google.maps.LatLng(lat1, lng1);\n        const _array$ = array[0],\n              lat2 = _array$.lat,\n              lng2 = _array$.lng;\n        const latLong2 = new window.google.maps.LatLng(lat2, lng2); // in meters:\n\n        const distance = window.google.maps.geometry.spherical.computeDistanceBetween(latLong1, latLong2);\n        return _objectSpread({}, coordinates, {\n          distance\n        });\n      });\n    };\n\n    this.render = () => {\n      return React.createElement(GoogleMap, {\n        defaultZoom: 16,\n        defaultCenter: {\n          lat: 36.822941269910814,\n          lng: 10.198781761953349\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353\n        },\n        __self: this\n      }, this.state.progress && React.createElement(React.Fragment, null, React.createElement(Marker, {\n        position: this.get_address_lat_lng_start[0],\n        icon: this.imageFlag,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363\n        },\n        __self: this\n      }), React.createElement(Marker, {\n        position: this.get_address_lat_lng_end[0],\n        icon: this.imageFlag,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364\n        },\n        __self: this\n      }), this.polylineDrawGreen, React.createElement(Marker, {\n        position: this.state.progress[this.state.progress.length - 1],\n        icon: this.imageCar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        },\n        __self: this\n      }), this.arr.map((value, index) => {\n        return React.createElement(Marker, {\n          position: this.arr[index],\n          icon: this.image,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 371\n          },\n          __self: this\n        });\n      })));\n    };\n  }\n\n}\n\nconst MapComponent = withScriptjs(withGoogleMap(Map));\nexport default (() => React.createElement(MapComponent, {\n  googleMapURL: \"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\",\n  loadingElement: React.createElement(\"div\", {\n    style: {\n      height: \"100%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390\n    },\n    __self: this\n  }),\n  containerElement: React.createElement(\"div\", {\n    style: {\n      height: \"650px\",\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391\n    },\n    __self: this\n  }),\n  mapElement: React.createElement(\"div\", {\n    style: {\n      height: \"100%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392\n    },\n    __self: this\n  }),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 388\n  },\n  __self: this\n}));","map":{"version":3,"sources":["C:/Users/khouloud/Documents/PI/MERN_Stack_PI/src/views/driver/Maps.js"],"names":["React","withGoogleMap","withScriptjs","GoogleMap","Polyline","Marker","axios","Map","Component","state","progress","path","velocity","initialDate","Date","color","arr","markerRed","imageFlag","image","imageCar","get_address_lat_lng_start","get_address_lat_lng_end","getDistance","differentInTime","componentDidMount","interval","window","setInterval","moveObject","get","then","response","setState","get_address","data","console","log","push","lat","lng","length","catch","error","componentWillUnmount","clearInterval","distance","filter","coordinates","nextLine","find","random","count","lastLine","lastLineLatLng","google","maps","LatLng","nextLineLatLng","totalDistance","percentage","position","geometry","spherical","interpolate","Math","floor","ceil","concat","polylineDrawGreen","strokeColor","componentWillMount","map","i","array","lat1","lng1","latLong1","lat2","lng2","latLong2","computeDistanceBetween","render","value","index","MapComponent","height","width"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {withGoogleMap, withScriptjs, GoogleMap, Polyline, Marker} from 'react-google-maps'\r\nimport axios from \"axios\";\r\n\r\nclass Map extends React.Component {\r\n    state = {\r\n        progress: [],\r\n    }\r\n\r\n   /* path = [\r\n        { lat: 18.566516, lng: -68.435996 },\r\n        { lat: 18.5644, lng: -68.423036 },\r\n        { lat: 18.563586, lng: -68.418744 },\r\n        { lat: 18.562339, lng: -68.410725 },\r\n        { lat: 18.560927, lng: -68.402459 },\r\n        { lat: 18.559605, lng: -68.394354 },\r\n        { lat: 18.559028, lng: -68.391003 },\r\n        { lat: 18.558841, lng: -68.390594 },\r\n        { lat: 18.558795, lng: -68.390387 },\r\n        { lat: 18.558767, lng: -68.390312 },\r\n        { lat: 18.558744, lng: -68.390256 },\r\n        { lat: 18.558726, lng: -68.390202 },\r\n        { lat: 18.55867, lng: -68.390124 },\r\n        { lat: 18.558663, lng: -68.390111 },\r\n        { lat: 18.558602, lng: -68.389995 },\r\n        { lat: 18.5585, lng: -68.389867 },\r\n        { lat: 18.558462, lng: -68.389837 },\r\n        { lat: 18.558396, lng: -68.389781 },\r\n        { lat: 18.55828, lng: -68.389641 },\r\n        { lat: 18.558234, lng: -68.389557 },\r\n        { lat: 18.558143, lng: -68.389469 },\r\n        { lat: 18.558089, lng: -68.389362 },\r\n        { lat: 18.558062, lng: -68.389265 },\r\n        { lat: 18.558011, lng: -68.389069 },\r\n        { lat: 18.557985, lng: -68.388965 },\r\n        { lat: 18.557988, lng: -68.38879 },\r\n        { lat: 18.558032, lng: -68.388603 },\r\n        { lat: 18.55806, lng: -68.388525 },\r\n        { lat: 18.558113, lng: -68.388425 },\r\n        { lat: 18.558192, lng: -68.388297 },\r\n        { lat: 18.558301, lng: -68.388181 },\r\n        { lat: 18.558497, lng: -68.388045 },\r\n        { lat: 18.558571, lng: -68.388002 },\r\n        { lat: 18.558701, lng: -68.387927 },\r\n        { lat: 18.558863, lng: -68.387895 },\r\n        { lat: 18.559046, lng: -68.387887 },\r\n        { lat: 18.559308, lng: -68.387922 },\r\n        { lat: 18.559677, lng: -68.388185 },\r\n        { lat: 18.559824, lng: -68.388314 },\r\n        { lat: 18.559929, lng: -68.388397 },\r\n        { lat: 18.560018, lng: -68.388512 },\r\n        { lat: 18.560203, lng: -68.388607 },\r\n        { lat: 18.560472, lng: -68.388615 },\r\n        { lat: 18.560655, lng: -68.388613 },\r\n        { lat: 18.560957, lng: -68.388572 },\r\n        { lat: 18.561206, lng: -68.388521 }\r\n    ]*/\r\n\r\n    path = [\r\n        {\r\n            \"lat\": \"36.776209298858504\",\r\n            \"lng\": \"10.198707934404316\"\r\n        },\r\n        {\r\n            \"lat\": \"36.777431491380185\",\r\n            \"lng\": \"10.200233776057663\"\r\n        },\r\n        {\r\n            \"lat\": \"36.777431491380185\",\r\n            \"lng\": \"10.20175961771101\"\r\n        },\r\n        {\r\n            \"lat\": \"36.776209298858504\",\r\n            \"lng\": \"10.20328554318339\"\r\n        },\r\n        {\r\n            \"lat\": \"36.776209298858504\",\r\n            \"lng\": \"10.206337310309115\"\r\n        },\r\n        {\r\n            \"lat\": \"36.776209298858504\",\r\n            \"lng\": \"10.20786315196246\"\r\n        },\r\n        {\r\n            \"lat\": \"36.776209298858504\",\r\n            \"lng\": \"10.20938907743484\"\r\n        },\r\n        {\r\n            \"lat\": \"36.77498708684983\",\r\n            \"lng\": \"10.212440844560566\"\r\n        },\r\n        {\r\n            \"lat\": \"36.77498708684983\",\r\n            \"lng\": \"10.213966686213913\"\r\n        },\r\n        {\r\n            \"lat\": \"36.77498708684983\",\r\n            \"lng\": \"10.21549252786726\"\r\n        },\r\n        {\r\n            \"lat\": \"36.77498708684983\",\r\n            \"lng\": \"10.217018453339639\"\r\n        },\r\n        {\r\n            \"lat\": \"36.77498708684983\",\r\n            \"lng\": \"10.218544294992986\"\r\n        },\r\n        {\r\n            \"lat\": \"36.77376485535446\",\r\n            \"lng\": \"10.220070220465365\"\r\n        },\r\n        {\r\n            \"lat\": \"36.77376485535446\",\r\n            \"lng\": \"10.22159606211871\"\r\n        },\r\n        {\r\n            \"lat\": \"36.77376485535446\",\r\n            \"lng\": \"10.22312198759109\"\r\n        },\r\n        {\r\n            \"lat\": \"36.772542604372575\",\r\n            \"lng\": \"10.226173754716816\"\r\n        },\r\n        {\r\n            \"lat\": \"36.77132033390444\",\r\n            \"lng\": \"10.227699596370163\"\r\n        },\r\n        {\r\n            \"lat\": \"36.77132033390444\",\r\n            \"lng\": \"10.22922543802351\"\r\n        },\r\n        {\r\n            \"lat\": \"36.77009804395031\",\r\n            \"lng\": \"10.230751363495889\"\r\n        },\r\n        {\r\n            \"lat\": \"36.77009804395031\",\r\n            \"lng\": \"10.232277205149236\"\r\n        },\r\n        {\r\n            \"lat\": \"36.768875734510445\",\r\n            \"lng\": \"10.233803130621613\"\r\n        },\r\n        {\r\n            \"lat\": \"36.768875734510445\",\r\n            \"lng\": \"10.236854897747339\"\r\n        },\r\n        {\r\n            \"lat\": \"36.768875734510445\",\r\n            \"lng\": \"10.23838073940069\"\r\n        },\r\n        {\r\n            \"lat\": \"36.76765343915747\",\r\n            \"lng\": \"10.239906664873066\"\r\n        },\r\n        {\r\n            \"lat\": \"36.76765343915747\",\r\n            \"lng\": \"10.241432506526413\"\r\n        },\r\n        {\r\n            \"lat\": \"36.76765343915747\",\r\n            \"lng\": \"10.244484273652139\"\r\n        },\r\n        {\r\n            \"lat\": \"36.76520872285218\",\r\n            \"lng\": \"10.247536040777863\"\r\n        },\r\n        {\r\n            \"lat\": \"36.76520872285218\",\r\n            \"lng\": \"10.249061882431212\"\r\n        },\r\n        {\r\n            \"lat\": \"36.76520872285218\",\r\n            \"lng\": \"10.252113649556938\"\r\n        },\r\n        {\r\n            \"lat\": \"36.76643109074732\",\r\n            \"lng\": \"10.253639575029316\"\r\n        },\r\n        {\r\n            \"lat\": \"36.76643109074732\",\r\n            \"lng\": \"10.255165416682663\"\r\n        },\r\n        {\r\n            \"lat\": \"36.76643109074732\",\r\n            \"lng\": \"10.259743025461736\"\r\n        },\r\n        {\r\n            \"lat\": \"36.76643109074732\",\r\n            \"lng\": \"10.261268950934117\"\r\n        },\r\n        {\r\n            \"lat\": \"36.76643109074732\",\r\n            \"lng\": \"10.262794792587462\"\r\n        },\r\n        {\r\n            \"lat\": \"36.76765343915747\",\r\n            \"lng\": \"10.264320718059842\"\r\n        }\r\n    ]\r\n\r\n    velocity = 5\r\n    initialDate = new Date()\r\n    color = \"\";\r\n    polylineDrawGreen;\r\n    polylineDrawRed;\r\n    arr = [];\r\n    markerRed = [];\r\n    imageFlag = 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png';\r\n    image = 'https://img.icons8.com/flat_round/20/000000/error--v1.png';\r\n    imageCar = 'https://img.icons8.com/offices/30/000000/rv-campground.png';\r\n    get_address_lat_lng_start = [];\r\n    get_address_lat_lng_end = [];\r\n    getDistance = () => {\r\n        // seconds between when the component loaded and now\r\n        const differentInTime = (new Date() - this.initialDate) / 1000 // pass to seconds\r\n        return differentInTime * this.velocity // d = v*t -- thanks Newton!\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.interval = window.setInterval(this.moveObject, 1000)\r\n        axios.get('http://localhost:4000/api/planning/get_address')\r\n            .then(response => {\r\n                this.setState({ get_address: response.data });\r\n                console.log(response.data);\r\n                    this.get_address_lat_lng_start.push({lat: response.data[0][1],lng: response.data[0][0]})\r\n                    this.get_address_lat_lng_end.push({lat: response.data[response.data.length-1][1],lng: response.data[response.data.length-1][0]})\r\n                console.log(this.get_address_lat_lng_end );\r\n                console.log(this.get_address_lat_lng_start)\r\n\r\n            })\r\n            .catch(function (error){\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n        window.clearInterval(this.interval)\r\n    }\r\n\r\n    moveObject = () => {\r\n        const distance = this.getDistance()\r\n        if (!distance) {\r\n            return\r\n        }\r\n        /*function sleep(milliseconds) {\r\n            const date = Date.now();\r\n            let currentDate = null;\r\n            do {\r\n                currentDate = Date.now();\r\n            } while (currentDate - date < milliseconds);\r\n        }*/\r\n        let progress = this.path.filter(coordinates => coordinates.distance < distance)\r\n\r\n        const nextLine = this.path.find(coordinates => coordinates.distance > distance)\r\n\r\n\r\n        var random = 0;\r\n\r\n        var count = 0;\r\n        //var markerGreen;\r\n\r\n\r\n        if (!nextLine) {\r\n            this.setState({progress});\r\n            return // it's the end!\r\n        }\r\n        const lastLine = progress[progress.length - 1];\r\n\r\n        const lastLineLatLng = new window.google.maps.LatLng(\r\n            lastLine.lat,\r\n            lastLine.lng\r\n        );\r\n\r\n        const nextLineLatLng = new window.google.maps.LatLng(\r\n            nextLine.lat,\r\n            nextLine.lng\r\n        );\r\n\r\n        // distance of this line\r\n        const totalDistance = nextLine.distance - lastLine.distance\r\n        const percentage = (distance - lastLine.distance) / totalDistance\r\n\r\n        const position = window.google.maps.geometry.spherical.interpolate(\r\n            lastLineLatLng,\r\n            nextLineLatLng,\r\n            percentage\r\n        );\r\n\r\n        if (count % 5 === 0) {\r\n            random = Math.random();\r\n            if (random < 0.5) {\r\n                random = Math.floor(random)\r\n            } else {\r\n                random = Math.ceil(random)\r\n            }\r\n            if (random === 0) {\r\n                console.log(\"red\");\r\n                // this.polylineDrawRed =   <Polyline path={this.state.progress} options={{ strokeColor: \"#FF0000\"}} />\r\n                //console.log(position.lat()+\" , \"+ position.lng())\r\n                this.arr.push({lat: position.lat(), lng: position.lng()});\r\n                this.markerRed.push(<Marker position={this.arr[1]}/>);\r\n                progress = progress.concat(position);\r\n                this.setState({progress});\r\n\r\n            } else {\r\n                console.log(\"green\")\r\n                this.polylineDrawGreen = <Polyline path={this.state.progress} options={{strokeColor: \"#9efd38 \"}}/>\r\n                progress = progress.concat(position);\r\n                //  this.setState({progress});\r\n                console.log(!nextLine);\r\n\r\n            }\r\n            this.setState({progress});\r\n\r\n            console.log(random);\r\n            //sleep(1000)\r\n            // console.log(this.state.progress)\r\n        }\r\n\r\n\r\n        //this.setState({ progress });\r\n    }\r\n\r\n    componentWillMount = () => {\r\n        this.path = this.path.map((coordinates, i, array) => {\r\n                if (i === 0) {\r\n                    return {...coordinates, distance: 0} // it begins here!\r\n                }\r\n\r\n                const {lat: lat1, lng: lng1} = coordinates\r\n                const latLong1 = new window.google.maps.LatLng(lat1, lng1)\r\n\r\n                const {lat: lat2, lng: lng2} = array[0]\r\n                const latLong2 = new window.google.maps.LatLng(lat2, lng2)\r\n\r\n                // in meters:\r\n                const distance = window.google.maps.geometry.spherical.computeDistanceBetween(\r\n                    latLong1,\r\n                    latLong2\r\n                );\r\n\r\n\r\n                return {...coordinates, distance}\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <GoogleMap\r\n                defaultZoom={16}\r\n                defaultCenter={{\r\n                lat: 36.822941269910814, lng: 10.198781761953349\r\n                }}\r\n            >\r\n                {\r\n\r\n                    this.state.progress && (\r\n                        <>\r\n                            <Marker position={this.get_address_lat_lng_start[0]} icon={this.imageFlag}/>\r\n                            <Marker position={this.get_address_lat_lng_end[0]} icon={this.imageFlag}/>\r\n\r\n                            {this.polylineDrawGreen}\r\n                            <Marker position={this.state.progress[this.state.progress.length - 1]}\r\n                                    icon={this.imageCar}/>\r\n\r\n                            {this.arr.map((value, index) => {\r\n                                return <Marker position={this.arr[index]}\r\n                                               icon={this.image}\r\n                                />\r\n                            })}\r\n\r\n                        </>\r\n\r\n                    )\r\n                }\r\n            </GoogleMap>\r\n        )\r\n    }\r\n}\r\n\r\nconst MapComponent = withScriptjs(withGoogleMap(Map))\r\n\r\nexport default () => (\r\n    <MapComponent\r\n        googleMapURL=\"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\"\r\n        loadingElement={<div style={{height: `100%`}}/>}\r\n        containerElement={<div style={{height: `650px`, width: '100%'}}/>}\r\n        mapElement={<div style={{height: `100%`}}/>}\r\n    />\r\n)\r\n"]},"metadata":{},"sourceType":"module"}