{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\khouloud\\\\Documents\\\\PI\\\\MERN_Stack_PI\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\khouloud\\\\Documents\\\\PI\\\\MERN_Stack_PI\\\\src\\\\views\\\\driver\\\\Maps.js\";\nimport React from 'react';\nimport { withGoogleMap, withScriptjs, GoogleMap, Polyline, Marker } from 'react-google-maps';\nimport axios from \"axios\";\n\nclass Map extends React.Component {\n  /* pathData = [\r\n       { lat: 36.73085422985146, lng: 10.233588491073034 },\r\n       { lat: 36.73085422985146, lng: 10.233540808521369 },\r\n       { lat: 36.73085422985146, lng: 10.233493125969702 },\r\n       { lat: 36.73085422985146, lng: 10.23339775562768 },\r\n       { lat: 36.73085422985146, lng: 10.23335007307601 },\r\n       { lat: 36.73089244624914, lng: 10.233302390524344 },\r\n       { lat: 36.73089244624914, lng: 10.233254707972677 },\r\n       { lat: 36.73093066262783, lng: 10.233159337630651 },\r\n       { lat: 36.73093066262783, lng: 10.233111655078986 },\r\n       { lat: 36.73093066262783, lng: 10.233063972527319 },\r\n       { lat: 36.73093066262783, lng: 10.233016284736962 },\r\n       { lat: 36.73093066262783, lng: 10.232920919633628 },\r\n       { lat: 36.73093066262783, lng: 10.23287323708196 },\r\n       { lat: 36.73093066262783, lng: 10.232825554530296 },\r\n       { lat: 36.73093066262783, lng: 10.232777866739937 },\r\n       { lat: 36.73096887793784, lng: 10.23273018418827 },\r\n       { lat: 36.73100709427845, lng: 10.232682501636603 },\r\n       { lat: 36.73100709427845, lng: 10.232634819084936 },\r\n       { lat: 36.73100709427845, lng: 10.23258713129458 },\r\n       { lat: 36.73104531060007, lng: 10.23253944874291 },\r\n       { lat: 36.73108352690265, lng: 10.232444083639578 },\r\n       { lat: 36.73108352690265, lng: 10.232396401087911 },\r\n       { lat: 36.73112174318622, lng: 10.232301030745887 },\r\n       { lat: 36.73112174318622, lng: 10.232205665642553 },\r\n       { lat: 36.73119817569629, lng: 10.232110295300528 },\r\n       { lat: 36.73119817569629, lng: 10.232062612748862 },\r\n       { lat: 36.73123639192279, lng: 10.232014930197195 },\r\n       { lat: 36.73123639192279, lng: 10.231967247645528 },\r\n       { lat: 36.73127460813028, lng: 10.231871877303506 },\r\n       { lat: 36.731312823269064, lng: 10.231681141858145 },\r\n       { lat: 36.73138925558894, lng: 10.231538094203145 },\r\n       { lat: 36.73142747172032, lng: 10.231442723861123 },\r\n       { lat: 36.73146568783271, lng: 10.231395041309455 },\r\n       { lat: 36.73146568783271, lng: 10.231347358757787 },\r\n       { lat: 36.731503903926054, lng: 10.231204305864097 },\r\n       { lat: 36.731503903926054, lng: 10.23115662331243 },\r\n       { lat: 36.731503903926054, lng: 10.231108940760762 },\r\n       { lat: 36.73161855209196, lng: 10.230918205315405 },\r\n       { lat: 36.731656767059604, lng: 10.230822834973383 },\r\n       { lat: 36.731656767059604, lng: 10.230727469870047 },\r\n       { lat: 36.73169498305785, lng: 10.230632099528023 },\r\n       { lat: 36.73173319903708, lng: 10.230584416976354 },\r\n       { lat: 36.73184784686063, lng: 10.230489051873022 },\r\n       { lat: 36.73188606276375, lng: 10.230441364082665 },\r\n       { lat: 36.73188606276375, lng: 10.230393681531 },\r\n       { lat: 36.73188606276375, lng: 10.230298316427664 },\r\n       { lat: 36.73192427864787, lng: 10.23020294608564 },\r\n       { lat: 36.731962494512985, lng: 10.230059898430639 },\r\n       { lat: 36.73200071035906, lng: 10.229916845536946 },\r\n       { lat: 36.73200071035906, lng: 10.229821480433614 },\r\n       { lat: 36.732038925136465, lng: 10.22972611009159 },\r\n       { lat: 36.732038925136465, lng: 10.229678427539923 },\r\n       { lat: 36.732038925136465, lng: 10.2295830571979 },\r\n       { lat: 36.73207714094451, lng: 10.22953537464623 },\r\n       { lat: 36.73207714094451, lng: 10.229487692094564 },\r\n       { lat: 36.7321153567335, lng: 10.229392326991231 },\r\n       { lat: 36.73215357250348, lng: 10.229344639200875 },\r\n       { lat: 36.73219178825444, lng: 10.22929695664921 },\r\n       { lat: 36.7322300039864, lng: 10.22924927409754 },\r\n       { lat: 36.73226821969931, lng: 10.229153903755517 },\r\n       { lat: 36.73226821969931, lng: 10.229106221203848 },\r\n       { lat: 36.73230643539321, lng: 10.229010856100516 },\r\n       { lat: 36.732344651068075, lng: 10.228963173548848 },\r\n       { lat: 36.732382865674325, lng: 10.22877243810349 },\r\n       { lat: 36.73242108131117, lng: 10.228581702658133 },\r\n       { lat: 36.732459296928994, lng: 10.228486332316109 },\r\n       { lat: 36.732459296928994, lng: 10.228390967212775 },\r\n       { lat: 36.732459296928994, lng: 10.228343284661108 },\r\n       { lat: 36.732535728107536, lng: 10.228247914319086 },\r\n       { lat: 36.73257394366827, lng: 10.22815254921575 },\r\n       { lat: 36.73257394366827, lng: 10.228057178873726 },\r\n       { lat: 36.73261215921002, lng: 10.227914131218725 },\r\n       { lat: 36.73265037473273, lng: 10.227818760876703 },\r\n       { lat: 36.73268859023639, lng: 10.227723395773367 },\r\n       { lat: 36.732726804671444, lng: 10.227675713221702 },\r\n       { lat: 36.73276502013708, lng: 10.227628025431343 },\r\n       { lat: 36.7328032355837, lng: 10.227580342879676 },\r\n       { lat: 36.732841451011296, lng: 10.22753266032801 },\r\n       { lat: 36.732841451011296, lng: 10.22743729260533 },\r\n       { lat: 36.732879666419876, lng: 10.227389607434317 },\r\n       { lat: 36.73291788180943, lng: 10.22734192488265 },\r\n       { lat: 36.73295609717995, lng: 10.22729423971164 },\r\n       { lat: 36.732994312531474, lng: 10.227246557159972 },\r\n       { lat: 36.732994312531474, lng: 10.227198874608304 },\r\n       { lat: 36.732994312531474, lng: 10.227151189437294 },\r\n       { lat: 36.732994312531474, lng: 10.227103506885626 },\r\n       { lat: 36.73303252786394, lng: 10.22700813916295 },\r\n       { lat: 36.73303252786394, lng: 10.226960453991934 },\r\n       { lat: 36.73310895742226, lng: 10.22681740371759 },\r\n       { lat: 36.7331471726977, lng: 10.22676972116592 },\r\n       { lat: 36.7331471726977, lng: 10.22672203599491 },\r\n       { lat: 36.733185387954094, lng: 10.226626668272232 },\r\n       { lat: 36.733185387954094, lng: 10.226578985720563 },\r\n       { lat: 36.733223603191476, lng: 10.226531300549551 },\r\n       { lat: 36.733223603191476, lng: 10.226483617997886 },\r\n       { lat: 36.733223603191476, lng: 10.226435932826874 },\r\n       { lat: 36.73330003360914, lng: 10.22634056772354 },\r\n       { lat: 36.73330003360914, lng: 10.22624520000086 },\r\n       { lat: 36.73333824878948, lng: 10.226197514829849 },\r\n       { lat: 36.73337646395079, lng: 10.226149832278182 }\r\n   ]*/\n  constructor(props) {\n    super(props);\n    this.state = {\n      progress: [],\n      pathFromDatabase: []\n    };\n    this.path = [{\n      lat: 36.81477236601238,\n      lng: 10.189578804217952\n    }, {\n      lat: 36.81477236601238,\n      lng: 10.189650329355125\n    }, {\n      lat: 36.81477236601238,\n      lng: 10.189674171940629\n    }, {\n      lat: 36.81477236601238,\n      lng: 10.189698013216464\n    }, {\n      lat: 36.814810540600746,\n      lng: 10.189817222214975\n    }, {\n      lat: 36.81482962841204,\n      lng: 10.189841064800483\n    }, {\n      lat: 36.814848715170086,\n      lng: 10.18988874866182\n    }, {\n      lat: 36.8148868897204,\n      lng: 10.189960273798995\n    }, {\n      lat: 36.81490597751265,\n      lng: 10.189984115074827\n    }, {\n      lat: 36.81492506425167,\n      lng: 10.190007957660335\n    }, {\n      lat: 36.81494415098594,\n      lng: 10.190031798936168\n    }, {\n      lat: 36.814963238763895,\n      lng: 10.190055641521674\n    }, {\n      lat: 36.81498232548864,\n      lng: 10.190079482797508\n    }, {\n      lat: 36.81500141325708,\n      lng: 10.190103325383012\n    }, {\n      lat: 36.81502049997232,\n      lng: 10.190103325383012\n    }, {\n      lat: 36.81507776218638,\n      lng: 10.19015100793468\n    }, {\n      lat: 36.81511593557394,\n      lng: 10.190174850520187\n    }, {\n      lat: 36.81513502330911,\n      lng: 10.190174850520187\n    }, {\n      lat: 36.81515410999101,\n      lng: 10.190198691796018\n    }, {\n      lat: 36.81523045876796,\n      lng: 10.19024637565736\n    }, {\n      lat: 36.81524954647455,\n      lng: 10.190270218242865\n    }, {\n      lat: 36.8152686331279,\n      lng: 10.190294059518699\n    }, {\n      lat: 36.8153068074688,\n      lng: 10.190317902104203\n    }, {\n      lat: 36.815344981790645,\n      lng: 10.190389427241378\n    }, {\n      lat: 36.815383156093446,\n      lng: 10.190437111102717\n    }, {\n      lat: 36.815421329852995,\n      lng: 10.190460952378551\n    }, {\n      lat: 36.81545950411771,\n      lng: 10.19050863623989\n    }, {\n      lat: 36.81547859124295,\n      lng: 10.190532478825395\n    }, {\n      lat: 36.81549767836343,\n      lng: 10.19055632010123\n    }, {\n      lat: 36.81549767836343,\n      lng: 10.190604003962568\n    }, {\n      lat: 36.815516765479146,\n      lng: 10.190627845238405\n    }, {\n      lat: 36.8155358525901,\n      lng: 10.190651687823909\n    }, {\n      lat: 36.81557402627347,\n      lng: 10.190699371685248\n    }, {\n      lat: 36.815593113370156,\n      lng: 10.190723212961082\n    }, {\n      lat: 36.81561220046207,\n      lng: 10.19074705554659\n    }, {\n      lat: 36.81563128754922,\n      lng: 10.190770896822421\n    }, {\n      lat: 36.81563128754922,\n      lng: 10.190794738098255\n    }, {\n      lat: 36.81566946170928,\n      lng: 10.190890105820934\n    }, {\n      lat: 36.815707635850245,\n      lng: 10.19091394840644\n    }, {\n      lat: 36.81572672238936,\n      lng: 10.190937789682273\n    }, {\n      lat: 36.81578398355089,\n      lng: 10.191009314819446\n    }, {\n      lat: 36.81580307059521,\n      lng: 10.19103315740495\n    }, {\n      lat: 36.81582215763477,\n      lng: 10.19103315740495\n    }, {\n      lat: 36.815841244669585,\n      lng: 10.191056998680786\n    }, {\n      lat: 36.81586033169961,\n      lng: 10.191056998680786\n    }, {\n      lat: 36.815898505221185,\n      lng: 10.191104682542125\n    }, {\n      lat: 36.81591759223693,\n      lng: 10.191128525127631\n    }, {\n      lat: 36.81597485325567,\n      lng: 10.191152366403465\n    }, {\n      lat: 36.8159939402524,\n      lng: 10.191152366403465\n    }, {\n      lat: 36.81607028766746,\n      lng: 10.191176208988972\n    }, {\n      lat: 36.8161466355306,\n      lng: 10.191176208988972\n    }, {\n      lat: 36.816203896378,\n      lng: 10.191223891540638\n    }, {\n      lat: 36.816261156658314,\n      lng: 10.191271575401977\n    }, {\n      lat: 36.81631841742005,\n      lng: 10.191295417987483\n    }, {\n      lat: 36.816375678138925,\n      lng: 10.191343101848823\n    }, {\n      lat: 36.81639476503571,\n      lng: 10.191366943124656\n    }, {\n      lat: 36.81639476503571,\n      lng: 10.191390785710162\n    }, {\n      lat: 36.81639476503571,\n      lng: 10.191438469571501\n    }, {\n      lat: 36.81639476503571,\n      lng: 10.191462310847333\n    }, {\n      lat: 36.81639476503571,\n      lng: 10.191509994708674\n    }, {\n      lat: 36.816432938290745,\n      lng: 10.191629203707185\n    }, {\n      lat: 36.81647111205095,\n      lng: 10.191700728844358\n    }, {\n      lat: 36.816509285792165,\n      lng: 10.191843780428377\n    }, {\n      lat: 36.8165283726556,\n      lng: 10.191962989426889\n    }, {\n      lat: 36.81658563321743,\n      lng: 10.192034515873734\n    }, {\n      lat: 36.816642893212176,\n      lng: 10.192153724872249\n    }, {\n      lat: 36.816681066867716,\n      lng: 10.192249092594926\n    }, {\n      lat: 36.816700153688316,\n      lng: 10.1923206177321\n    }, {\n      lat: 36.816757414121625,\n      lng: 10.19236830159344\n    }, {\n      lat: 36.81679558719581,\n      lng: 10.19241598545478\n    }, {\n      lat: 36.816852847557755,\n      lng: 10.192439826730613\n    }, {\n      lat: 36.816891021108546,\n      lng: 10.192487510591953\n    }, {\n      lat: 36.81692919464032,\n      lng: 10.192511353177457\n    }, {\n      lat: 36.816948280874826,\n      lng: 10.192559035729124\n    }, {\n      lat: 36.81700554112254,\n      lng: 10.192582878314632\n    }, {\n      lat: 36.81704371459719,\n      lng: 10.192606719590465\n    }, {\n      lat: 36.81706280132738,\n      lng: 10.192606719590465\n    }, {\n      lat: 36.817120060965195,\n      lng: 10.192630562175971\n    }, {\n      lat: 36.817139147676315,\n      lng: 10.192654403451805\n    }, {\n      lat: 36.81719640778121,\n      lng: 10.192654403451805\n    }, {\n      lat: 36.81721549447333,\n      lng: 10.192654403451805\n    }, {\n      lat: 36.81725366784332,\n      lng: 10.192678246037309\n    }, {\n      lat: 36.81729184066997,\n      lng: 10.192678246037309\n    }, {\n      lat: 36.81731092733828,\n      lng: 10.192678246037309\n    }, {\n      lat: 36.817330014001854,\n      lng: 10.192678246037309\n    }, {\n      lat: 36.817349100660635,\n      lng: 10.192702087313144\n    }, {\n      lat: 36.817368187314685,\n      lng: 10.192725929898648\n    }, {\n      lat: 36.8174063606085,\n      lng: 10.192773612450315\n    }, {\n      lat: 36.81742544724824,\n      lng: 10.192797455035823\n    }, {\n      lat: 36.81742544724824,\n      lng: 10.192821296311656\n    }, {\n      lat: 36.81742544724824,\n      lng: 10.192868980172996\n    }, {\n      lat: 36.81744453388325,\n      lng: 10.192916664034335\n    }, {\n      lat: 36.81746361998927,\n      lng: 10.192940506619841\n    }, {\n      lat: 36.817482706614754,\n      lng: 10.193012031757014\n    }, {\n      lat: 36.817501793235465,\n      lng: 10.193035873032848\n    }, {\n      lat: 36.81753996646263,\n      lng: 10.193059715618354\n    }, {\n      lat: 36.81755905306906,\n      lng: 10.193083556894187\n    }, {\n      lat: 36.81759722626768,\n      lng: 10.193107399479691\n    }, {\n      lat: 36.817616312859826,\n      lng: 10.193131240755527\n    }, {\n      lat: 36.817654485505656,\n      lng: 10.193155083341033\n    }, {\n      lat: 36.822941269910814,\n      lng: 10.198781761953349\n    }];\n    this.velocity = 5;\n    this.initialDate = new Date();\n    this.color = \"\";\n    this.polylineDrawRed = [];\n    this.arr = [];\n    this.markerRed = [];\n    this.imageFlag = 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png';\n    this.image = 'https://img.icons8.com/flat_round/20/000000/error--v1.png';\n    this.imageCar = 'https://img.icons8.com/offices/30/000000/rv-campground.png';\n    this.imagex = 'https://img.icons8.com/doodle/16/000000/delete-sign.png';\n    this.get_address_lat_lng_start = [];\n    this.get_address_lat_lng_end = [];\n\n    this.getDistance = () => {\n      // seconds between when the component loaded and now\n      const differentInTime = (new Date() - this.initialDate) / 1000; // pass to seconds\n\n      return differentInTime * this.velocity; // d = v*t -- thanks Newton!\n    };\n\n    this.componentDidMount = () => {\n      this.interval = window.setInterval(this.moveObject, 1000);\n      axios.get('http://localhost:4000/api/planning/get_address/5e8cff8de5733279b247be33').then(response => {\n        this.setState({\n          get_address: response.data\n        });\n        console.log(response.data);\n        this.get_address_lat_lng_start.push({\n          lat: response.data[0][0],\n          lng: response.data[0][1]\n        });\n        this.get_address_lat_lng_end.push({\n          lat: response.data[response.data.length - 1][0],\n          lng: response.data[response.data.length - 1][1]\n        });\n\n        for (var i = 0; i < response.data.length; i++) {\n          this.state.pathFromDatabase.push({\n            lat: response.data[i][0],\n            lng: response.data[i][1]\n          });\n        }\n\n        console.log(this.props.match.params.id);\n        this.polynedatabase = React.createElement(Polyline, {\n          path: this.state.pathFromDatabase,\n          options: {\n            strokeColor: \"#FF0000\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 260\n          },\n          __self: this\n        }); //console.log(response.data[0])\n\n        console.log(this.get_address_lat_lng_end);\n        console.log(this.get_address_lat_lng_start);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    this.componentWillUnmount = () => {\n      window.clearInterval(this.interval);\n    };\n\n    this.moveObject = () => {\n      const distance = this.getDistance();\n\n      if (!distance) {\n        return;\n      }\n      /*function sleep(milliseconds) {\r\n          const date = Date.now();\r\n          let currentDate = null;\r\n          do {\r\n              currentDate = Date.now();\r\n          } while (currentDate - date < milliseconds);\r\n      }*/\n\n\n      let progress = this.path.filter(coordinates => coordinates.distance < distance);\n      const nextLine = this.path.find(coordinates => coordinates.distance > distance);\n      var random = 0;\n      var count = 0; //var markerGreen;\n\n      if (!nextLine) {\n        this.setState({\n          progress\n        });\n        return; // it's the end!\n      }\n\n      const lastLine = progress[progress.length - 1];\n      const lastLineLatLng = new window.google.maps.LatLng(lastLine.lat, lastLine.lng);\n      const nextLineLatLng = new window.google.maps.LatLng(nextLine.lat, nextLine.lng); // distance of this line\n\n      const totalDistance = nextLine.distance - lastLine.distance;\n      const percentage = (distance - lastLine.distance) / totalDistance;\n      const position = window.google.maps.geometry.spherical.interpolate(lastLineLatLng, nextLineLatLng, percentage);\n\n      if (count % 5 === 0) {\n        random = Math.random();\n\n        if (random < 0.5) {\n          random = Math.floor(random);\n        } else {\n          random = Math.ceil(random);\n        }\n\n        if (random === 0) {\n          console.log(\"red\"); // this.polylineDrawRed =   <Polyline path={this.state.progress} options={{ strokeColor: \"#FF0000\"}} />\n          //console.log(position.lat()+\" , \"+ position.lng())\n\n          this.arr.push({\n            lat: position.lat(),\n            lng: position.lng()\n          });\n          this.markerRed.push(React.createElement(Marker, {\n            position: this.arr[1],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 335\n            },\n            __self: this\n          }));\n          progress = progress.concat(position);\n          this.setState({\n            progress\n          });\n        } else {\n          console.log(\"green\");\n          this.polylineDrawGreen = React.createElement(Polyline, {\n            path: this.state.progress,\n            options: {\n              strokeColor: \"#9efd38 \"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 341\n            },\n            __self: this\n          });\n          var prg = [];\n          var start = this.state.progress[0];\n          var end = this.state.progress[this.state.progress.length - 2];\n          prg.push(start);\n          prg.push(end);\n          console.log(this.state.progress[0]);\n          console.log(this.state.progress[this.state.progress.length - 2]);\n          console.log(prg);\n          this.polylineDrawRed.push({\n            lat: position.lat(),\n            lng: position.lng()\n          }); // this.polylineDrawRed.push(prg)\n          // console.log(this.polylineDrawRed)\n\n          progress = progress.concat(position); //  this.setState({progress});\n\n          console.log(!nextLine);\n        }\n\n        this.setState({\n          progress\n        });\n        console.log(random); //sleep(1000)\n        // console.log(this.state.progress)\n      } //this.setState({ progress });\n\n    };\n\n    this.componentWillMount = () => {\n      this.path = this.path.map((coordinates, i, array) => {\n        if (i === 0) {\n          return _objectSpread({}, coordinates, {\n            distance: 0\n          }); // it begins here!\n        }\n\n        const lat1 = coordinates.lat,\n              lng1 = coordinates.lng;\n        const latLong1 = new window.google.maps.LatLng(lat1, lng1);\n        const _array$ = array[0],\n              lat2 = _array$.lat,\n              lng2 = _array$.lng;\n        const latLong2 = new window.google.maps.LatLng(lat2, lng2); // in meters:\n\n        const distance = window.google.maps.geometry.spherical.computeDistanceBetween(latLong1, latLong2);\n        return _objectSpread({}, coordinates, {\n          distance\n        });\n      });\n    };\n\n    this.render = () => {\n      console.log(this.state.pathFromDatabase);\n      return React.createElement(GoogleMap, {\n        defaultZoom: 8,\n        defaultCenter: {\n          lat: 36.822941269910814,\n          lng: 10.198781761953349\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400\n        },\n        __self: this\n      }, this.state.progress && React.createElement(React.Fragment, null, React.createElement(Marker, {\n        position: this.get_address_lat_lng_start[0],\n        icon: this.imageFlag,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410\n        },\n        __self: this\n      }), React.createElement(Marker, {\n        position: this.get_address_lat_lng_end[0],\n        icon: this.imageFlag,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411\n        },\n        __self: this\n      }), this.polylineDrawGreen, this.polylineDrawRed, this.polynedatabase, React.createElement(Polyline, {\n        path: this.path,\n        options: {\n          strokeColor: \"#fefaff\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417\n        },\n        __self: this\n      }), React.createElement(Marker, {\n        position: this.state.progress[this.state.progress.length - 1],\n        icon: this.imageCar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418\n        },\n        __self: this\n      }), this.arr.map((value, index) => {\n        return React.createElement(Marker, {\n          position: this.arr[index],\n          icon: this.image,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 422\n          },\n          __self: this\n        });\n      }), \",\", this.arr.map((valuePin, indexPin) => {\n        return React.createElement(Marker, {\n          position: this.polylineDrawRed[indexPin],\n          icon: this.imagex,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 427\n          },\n          __self: this\n        });\n      })));\n    };\n\n    let productId = this.props.match.params._id; //this.props.actions.getProduct(productId);\n  }\n\n}\n\nconst MapComponent = withScriptjs(withGoogleMap(Map));\nexport default (() => React.createElement(MapComponent, {\n  googleMapURL: \"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\",\n  loadingElement: React.createElement(\"div\", {\n    style: {\n      height: \"100%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445\n    },\n    __self: this\n  }),\n  containerElement: React.createElement(\"div\", {\n    style: {\n      height: \"650px\",\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446\n    },\n    __self: this\n  }),\n  mapElement: React.createElement(\"div\", {\n    style: {\n      height: \"120%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 447\n    },\n    __self: this\n  }),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 443\n  },\n  __self: this\n}));","map":{"version":3,"sources":["C:/Users/khouloud/Documents/PI/MERN_Stack_PI/src/views/driver/Maps.js"],"names":["React","withGoogleMap","withScriptjs","GoogleMap","Polyline","Marker","axios","Map","Component","constructor","props","state","progress","pathFromDatabase","path","lat","lng","velocity","initialDate","Date","color","polylineDrawRed","arr","markerRed","imageFlag","image","imageCar","imagex","get_address_lat_lng_start","get_address_lat_lng_end","getDistance","differentInTime","componentDidMount","interval","window","setInterval","moveObject","get","then","response","setState","get_address","data","console","log","push","length","i","match","params","id","polynedatabase","strokeColor","catch","error","componentWillUnmount","clearInterval","distance","filter","coordinates","nextLine","find","random","count","lastLine","lastLineLatLng","google","maps","LatLng","nextLineLatLng","totalDistance","percentage","position","geometry","spherical","interpolate","Math","floor","ceil","concat","polylineDrawGreen","prg","start","end","componentWillMount","map","array","lat1","lng1","latLong1","lat2","lng2","latLong2","computeDistanceBetween","render","value","index","valuePin","indexPin","productId","_id","MapComponent","height","width"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {withGoogleMap, withScriptjs, GoogleMap, Polyline, Marker} from 'react-google-maps'\r\nimport axios from \"axios\";\r\n\r\nclass Map extends React.Component {\r\n    state = {\r\n        progress: [],\r\n        pathFromDatabase : [],\r\n    }\r\n\r\n   /* pathData = [\r\n        { lat: 36.73085422985146, lng: 10.233588491073034 },\r\n        { lat: 36.73085422985146, lng: 10.233540808521369 },\r\n        { lat: 36.73085422985146, lng: 10.233493125969702 },\r\n        { lat: 36.73085422985146, lng: 10.23339775562768 },\r\n        { lat: 36.73085422985146, lng: 10.23335007307601 },\r\n        { lat: 36.73089244624914, lng: 10.233302390524344 },\r\n        { lat: 36.73089244624914, lng: 10.233254707972677 },\r\n        { lat: 36.73093066262783, lng: 10.233159337630651 },\r\n        { lat: 36.73093066262783, lng: 10.233111655078986 },\r\n        { lat: 36.73093066262783, lng: 10.233063972527319 },\r\n        { lat: 36.73093066262783, lng: 10.233016284736962 },\r\n        { lat: 36.73093066262783, lng: 10.232920919633628 },\r\n        { lat: 36.73093066262783, lng: 10.23287323708196 },\r\n        { lat: 36.73093066262783, lng: 10.232825554530296 },\r\n        { lat: 36.73093066262783, lng: 10.232777866739937 },\r\n        { lat: 36.73096887793784, lng: 10.23273018418827 },\r\n        { lat: 36.73100709427845, lng: 10.232682501636603 },\r\n        { lat: 36.73100709427845, lng: 10.232634819084936 },\r\n        { lat: 36.73100709427845, lng: 10.23258713129458 },\r\n        { lat: 36.73104531060007, lng: 10.23253944874291 },\r\n        { lat: 36.73108352690265, lng: 10.232444083639578 },\r\n        { lat: 36.73108352690265, lng: 10.232396401087911 },\r\n        { lat: 36.73112174318622, lng: 10.232301030745887 },\r\n        { lat: 36.73112174318622, lng: 10.232205665642553 },\r\n        { lat: 36.73119817569629, lng: 10.232110295300528 },\r\n        { lat: 36.73119817569629, lng: 10.232062612748862 },\r\n        { lat: 36.73123639192279, lng: 10.232014930197195 },\r\n        { lat: 36.73123639192279, lng: 10.231967247645528 },\r\n        { lat: 36.73127460813028, lng: 10.231871877303506 },\r\n        { lat: 36.731312823269064, lng: 10.231681141858145 },\r\n        { lat: 36.73138925558894, lng: 10.231538094203145 },\r\n        { lat: 36.73142747172032, lng: 10.231442723861123 },\r\n        { lat: 36.73146568783271, lng: 10.231395041309455 },\r\n        { lat: 36.73146568783271, lng: 10.231347358757787 },\r\n        { lat: 36.731503903926054, lng: 10.231204305864097 },\r\n        { lat: 36.731503903926054, lng: 10.23115662331243 },\r\n        { lat: 36.731503903926054, lng: 10.231108940760762 },\r\n        { lat: 36.73161855209196, lng: 10.230918205315405 },\r\n        { lat: 36.731656767059604, lng: 10.230822834973383 },\r\n        { lat: 36.731656767059604, lng: 10.230727469870047 },\r\n        { lat: 36.73169498305785, lng: 10.230632099528023 },\r\n        { lat: 36.73173319903708, lng: 10.230584416976354 },\r\n        { lat: 36.73184784686063, lng: 10.230489051873022 },\r\n        { lat: 36.73188606276375, lng: 10.230441364082665 },\r\n        { lat: 36.73188606276375, lng: 10.230393681531 },\r\n        { lat: 36.73188606276375, lng: 10.230298316427664 },\r\n        { lat: 36.73192427864787, lng: 10.23020294608564 },\r\n        { lat: 36.731962494512985, lng: 10.230059898430639 },\r\n        { lat: 36.73200071035906, lng: 10.229916845536946 },\r\n        { lat: 36.73200071035906, lng: 10.229821480433614 },\r\n        { lat: 36.732038925136465, lng: 10.22972611009159 },\r\n        { lat: 36.732038925136465, lng: 10.229678427539923 },\r\n        { lat: 36.732038925136465, lng: 10.2295830571979 },\r\n        { lat: 36.73207714094451, lng: 10.22953537464623 },\r\n        { lat: 36.73207714094451, lng: 10.229487692094564 },\r\n        { lat: 36.7321153567335, lng: 10.229392326991231 },\r\n        { lat: 36.73215357250348, lng: 10.229344639200875 },\r\n        { lat: 36.73219178825444, lng: 10.22929695664921 },\r\n        { lat: 36.7322300039864, lng: 10.22924927409754 },\r\n        { lat: 36.73226821969931, lng: 10.229153903755517 },\r\n        { lat: 36.73226821969931, lng: 10.229106221203848 },\r\n        { lat: 36.73230643539321, lng: 10.229010856100516 },\r\n        { lat: 36.732344651068075, lng: 10.228963173548848 },\r\n        { lat: 36.732382865674325, lng: 10.22877243810349 },\r\n        { lat: 36.73242108131117, lng: 10.228581702658133 },\r\n        { lat: 36.732459296928994, lng: 10.228486332316109 },\r\n        { lat: 36.732459296928994, lng: 10.228390967212775 },\r\n        { lat: 36.732459296928994, lng: 10.228343284661108 },\r\n        { lat: 36.732535728107536, lng: 10.228247914319086 },\r\n        { lat: 36.73257394366827, lng: 10.22815254921575 },\r\n        { lat: 36.73257394366827, lng: 10.228057178873726 },\r\n        { lat: 36.73261215921002, lng: 10.227914131218725 },\r\n        { lat: 36.73265037473273, lng: 10.227818760876703 },\r\n        { lat: 36.73268859023639, lng: 10.227723395773367 },\r\n        { lat: 36.732726804671444, lng: 10.227675713221702 },\r\n        { lat: 36.73276502013708, lng: 10.227628025431343 },\r\n        { lat: 36.7328032355837, lng: 10.227580342879676 },\r\n        { lat: 36.732841451011296, lng: 10.22753266032801 },\r\n        { lat: 36.732841451011296, lng: 10.22743729260533 },\r\n        { lat: 36.732879666419876, lng: 10.227389607434317 },\r\n        { lat: 36.73291788180943, lng: 10.22734192488265 },\r\n        { lat: 36.73295609717995, lng: 10.22729423971164 },\r\n        { lat: 36.732994312531474, lng: 10.227246557159972 },\r\n        { lat: 36.732994312531474, lng: 10.227198874608304 },\r\n        { lat: 36.732994312531474, lng: 10.227151189437294 },\r\n        { lat: 36.732994312531474, lng: 10.227103506885626 },\r\n        { lat: 36.73303252786394, lng: 10.22700813916295 },\r\n        { lat: 36.73303252786394, lng: 10.226960453991934 },\r\n        { lat: 36.73310895742226, lng: 10.22681740371759 },\r\n        { lat: 36.7331471726977, lng: 10.22676972116592 },\r\n        { lat: 36.7331471726977, lng: 10.22672203599491 },\r\n        { lat: 36.733185387954094, lng: 10.226626668272232 },\r\n        { lat: 36.733185387954094, lng: 10.226578985720563 },\r\n        { lat: 36.733223603191476, lng: 10.226531300549551 },\r\n        { lat: 36.733223603191476, lng: 10.226483617997886 },\r\n        { lat: 36.733223603191476, lng: 10.226435932826874 },\r\n        { lat: 36.73330003360914, lng: 10.22634056772354 },\r\n        { lat: 36.73330003360914, lng: 10.22624520000086 },\r\n        { lat: 36.73333824878948, lng: 10.226197514829849 },\r\n        { lat: 36.73337646395079, lng: 10.226149832278182 }\r\n    ]*/\r\n\r\n      path = [\r\n          { lat: 36.81477236601238, lng: 10.189578804217952 },\r\n          { lat: 36.81477236601238, lng: 10.189650329355125 },\r\n          { lat: 36.81477236601238, lng: 10.189674171940629 },\r\n          { lat: 36.81477236601238, lng: 10.189698013216464 },\r\n          { lat: 36.814810540600746, lng: 10.189817222214975 },\r\n          { lat: 36.81482962841204, lng: 10.189841064800483 },\r\n          { lat: 36.814848715170086, lng: 10.18988874866182 },\r\n          { lat: 36.8148868897204, lng: 10.189960273798995 },\r\n          { lat: 36.81490597751265, lng: 10.189984115074827 },\r\n          { lat: 36.81492506425167, lng: 10.190007957660335 },\r\n          { lat: 36.81494415098594, lng: 10.190031798936168 },\r\n          { lat: 36.814963238763895, lng: 10.190055641521674 },\r\n          { lat: 36.81498232548864, lng: 10.190079482797508 },\r\n          { lat: 36.81500141325708, lng: 10.190103325383012 },\r\n          { lat: 36.81502049997232, lng: 10.190103325383012 },\r\n          { lat: 36.81507776218638, lng: 10.19015100793468 },\r\n          { lat: 36.81511593557394, lng: 10.190174850520187 },\r\n          { lat: 36.81513502330911, lng: 10.190174850520187 },\r\n          { lat: 36.81515410999101, lng: 10.190198691796018 },\r\n          { lat: 36.81523045876796, lng: 10.19024637565736 },\r\n          { lat: 36.81524954647455, lng: 10.190270218242865 },\r\n          { lat: 36.8152686331279, lng: 10.190294059518699 },\r\n          { lat: 36.8153068074688, lng: 10.190317902104203 },\r\n          { lat: 36.815344981790645, lng: 10.190389427241378 },\r\n          { lat: 36.815383156093446, lng: 10.190437111102717 },\r\n          { lat: 36.815421329852995, lng: 10.190460952378551 },\r\n          { lat: 36.81545950411771, lng: 10.19050863623989 },\r\n          { lat: 36.81547859124295, lng: 10.190532478825395 },\r\n          { lat: 36.81549767836343, lng: 10.19055632010123 },\r\n          { lat: 36.81549767836343, lng: 10.190604003962568 },\r\n          { lat: 36.815516765479146, lng: 10.190627845238405 },\r\n          { lat: 36.8155358525901, lng: 10.190651687823909 },\r\n          { lat: 36.81557402627347, lng: 10.190699371685248 },\r\n          { lat: 36.815593113370156, lng: 10.190723212961082 },\r\n          { lat: 36.81561220046207, lng: 10.19074705554659 },\r\n          { lat: 36.81563128754922, lng: 10.190770896822421 },\r\n          { lat: 36.81563128754922, lng: 10.190794738098255 },\r\n          { lat: 36.81566946170928, lng: 10.190890105820934 },\r\n          { lat: 36.815707635850245, lng: 10.19091394840644 },\r\n          { lat: 36.81572672238936, lng: 10.190937789682273 },\r\n          { lat: 36.81578398355089, lng: 10.191009314819446 },\r\n          { lat: 36.81580307059521, lng: 10.19103315740495 },\r\n          { lat: 36.81582215763477, lng: 10.19103315740495 },\r\n          { lat: 36.815841244669585, lng: 10.191056998680786 },\r\n          { lat: 36.81586033169961, lng: 10.191056998680786 },\r\n          { lat: 36.815898505221185, lng: 10.191104682542125 },\r\n          { lat: 36.81591759223693, lng: 10.191128525127631 },\r\n          { lat: 36.81597485325567, lng: 10.191152366403465 },\r\n          { lat: 36.8159939402524, lng: 10.191152366403465 },\r\n          { lat: 36.81607028766746, lng: 10.191176208988972 },\r\n          { lat: 36.8161466355306, lng: 10.191176208988972 },\r\n          { lat: 36.816203896378, lng: 10.191223891540638 },\r\n          { lat: 36.816261156658314, lng: 10.191271575401977 },\r\n          { lat: 36.81631841742005, lng: 10.191295417987483 },\r\n          { lat: 36.816375678138925, lng: 10.191343101848823 },\r\n          { lat: 36.81639476503571, lng: 10.191366943124656 },\r\n          { lat: 36.81639476503571, lng: 10.191390785710162 },\r\n          { lat: 36.81639476503571, lng: 10.191438469571501 },\r\n          { lat: 36.81639476503571, lng: 10.191462310847333 },\r\n          { lat: 36.81639476503571, lng: 10.191509994708674 },\r\n          { lat: 36.816432938290745, lng: 10.191629203707185 },\r\n          { lat: 36.81647111205095, lng: 10.191700728844358 },\r\n          { lat: 36.816509285792165, lng: 10.191843780428377 },\r\n          { lat: 36.8165283726556, lng: 10.191962989426889 },\r\n          { lat: 36.81658563321743, lng: 10.192034515873734 },\r\n          { lat: 36.816642893212176, lng: 10.192153724872249 },\r\n          { lat: 36.816681066867716, lng: 10.192249092594926 },\r\n          { lat: 36.816700153688316, lng: 10.1923206177321 },\r\n          { lat: 36.816757414121625, lng: 10.19236830159344 },\r\n          { lat: 36.81679558719581, lng: 10.19241598545478 },\r\n          { lat: 36.816852847557755, lng: 10.192439826730613 },\r\n          { lat: 36.816891021108546, lng: 10.192487510591953 },\r\n          { lat: 36.81692919464032, lng: 10.192511353177457 },\r\n          { lat: 36.816948280874826, lng: 10.192559035729124 },\r\n          { lat: 36.81700554112254, lng: 10.192582878314632 },\r\n          { lat: 36.81704371459719, lng: 10.192606719590465 },\r\n          { lat: 36.81706280132738, lng: 10.192606719590465 },\r\n          { lat: 36.817120060965195, lng: 10.192630562175971 },\r\n          { lat: 36.817139147676315, lng: 10.192654403451805 },\r\n          { lat: 36.81719640778121, lng: 10.192654403451805 },\r\n          { lat: 36.81721549447333, lng: 10.192654403451805 },\r\n          { lat: 36.81725366784332, lng: 10.192678246037309 },\r\n          { lat: 36.81729184066997, lng: 10.192678246037309 },\r\n          { lat: 36.81731092733828, lng: 10.192678246037309 },\r\n          { lat: 36.817330014001854, lng: 10.192678246037309 },\r\n          { lat: 36.817349100660635, lng: 10.192702087313144 },\r\n          { lat: 36.817368187314685, lng: 10.192725929898648 },\r\n          { lat: 36.8174063606085, lng: 10.192773612450315 },\r\n          { lat: 36.81742544724824, lng: 10.192797455035823 },\r\n          { lat: 36.81742544724824, lng: 10.192821296311656 },\r\n          { lat: 36.81742544724824, lng: 10.192868980172996 },\r\n          { lat: 36.81744453388325, lng: 10.192916664034335 },\r\n          { lat: 36.81746361998927, lng: 10.192940506619841 },\r\n          { lat: 36.817482706614754, lng: 10.193012031757014 },\r\n          { lat: 36.817501793235465, lng: 10.193035873032848 },\r\n          { lat: 36.81753996646263, lng: 10.193059715618354 },\r\n          { lat: 36.81755905306906, lng: 10.193083556894187 },\r\n          { lat: 36.81759722626768, lng: 10.193107399479691 },\r\n          { lat: 36.817616312859826, lng: 10.193131240755527 },\r\n          { lat: 36.817654485505656, lng: 10.193155083341033 },\r\n          {lat: 36.822941269910814 , lng: 10.198781761953349}\r\n\r\n      ]\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        let productId = this.props.match.params._id;\r\n        //this.props.actions.getProduct(productId);\r\n    }\r\n\r\n    velocity = 5\r\n    initialDate = new Date()\r\n    color = \"\";\r\n    polylineDrawGreen;\r\n    polylineDrawRed = [];\r\n    arr = [];\r\n    markerRed = [];\r\n    imageFlag = 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png';\r\n    image = 'https://img.icons8.com/flat_round/20/000000/error--v1.png';\r\n    imageCar = 'https://img.icons8.com/offices/30/000000/rv-campground.png';\r\n    imagex = 'https://img.icons8.com/doodle/16/000000/delete-sign.png'\r\n    get_address_lat_lng_start = [];\r\n    get_address_lat_lng_end = [];\r\n    polynedatabase;\r\n    getDistance = () => {\r\n        // seconds between when the component loaded and now\r\n        const differentInTime = (new Date() - this.initialDate) / 1000 // pass to seconds\r\n        return differentInTime * this.velocity // d = v*t -- thanks Newton!\r\n    }\r\n//this.props.match.params.id\r\n    componentDidMount = () => {\r\n        this.interval = window.setInterval(this.moveObject, 1000)\r\n        axios.get('http://localhost:4000/api/planning/get_address/5e8cff8de5733279b247be33')\r\n            .then(response => {\r\n                this.setState({ get_address: response.data });\r\n                console.log(response.data);\r\n                    this.get_address_lat_lng_start.push({lat: response.data[0][0],lng: response.data[0][1]})\r\n                   this.get_address_lat_lng_end.push({lat: response.data[response.data.length-1][0],lng: response.data[response.data.length-1][1]})\r\n\r\n                    for (var i = 0 ; i < response.data.length; i++){\r\n                        this.state.pathFromDatabase.push({lat: response.data[i][0],lng: response.data[i][1]})\r\n\r\n                    }\r\nconsole.log(this.props.match.params.id)\r\n\r\n                this.polynedatabase =  <Polyline path={this.state.pathFromDatabase} options={{strokeColor: \"#FF0000\"}}/>\r\n                    //console.log(response.data[0])\r\n               console.log(this.get_address_lat_lng_end );\r\n               console.log(this.get_address_lat_lng_start)\r\n            })\r\n            .catch(function (error){\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n        window.clearInterval(this.interval)\r\n    }\r\n\r\n    moveObject = () => {\r\n        const distance = this.getDistance()\r\n        if (!distance) {\r\n            return\r\n        }\r\n        /*function sleep(milliseconds) {\r\n            const date = Date.now();\r\n            let currentDate = null;\r\n            do {\r\n                currentDate = Date.now();\r\n            } while (currentDate - date < milliseconds);\r\n        }*/\r\n        let progress = this.path.filter(coordinates => coordinates.distance < distance)\r\n\r\n        const nextLine = this.path.find(coordinates => coordinates.distance > distance)\r\n\r\n\r\n        var random = 0;\r\n\r\n        var count = 0;\r\n        //var markerGreen;\r\n\r\n\r\n        if (!nextLine) {\r\n            this.setState({progress});\r\n            return // it's the end!\r\n        }\r\n        const lastLine = progress[progress.length - 1];\r\n\r\n        const lastLineLatLng = new window.google.maps.LatLng(\r\n            lastLine.lat,\r\n            lastLine.lng\r\n        );\r\n\r\n        const nextLineLatLng = new window.google.maps.LatLng(\r\n            nextLine.lat,\r\n            nextLine.lng\r\n        );\r\n\r\n        // distance of this line\r\n        const totalDistance = nextLine.distance - lastLine.distance\r\n        const percentage = (distance - lastLine.distance) / totalDistance\r\n\r\n        const position = window.google.maps.geometry.spherical.interpolate(\r\n            lastLineLatLng,\r\n            nextLineLatLng,\r\n            percentage\r\n        );\r\n\r\n        if (count % 5 === 0) {\r\n            random = Math.random();\r\n            if (random < 0.5) {\r\n                random = Math.floor(random)\r\n            } else {\r\n                random = Math.ceil(random)\r\n            }\r\n            if (random === 0) {\r\n                console.log(\"red\");\r\n                // this.polylineDrawRed =   <Polyline path={this.state.progress} options={{ strokeColor: \"#FF0000\"}} />\r\n                //console.log(position.lat()+\" , \"+ position.lng())\r\n                this.arr.push({lat: position.lat(), lng: position.lng()});\r\n                this.markerRed.push(<Marker position={this.arr[1]}/>);\r\n                progress = progress.concat(position);\r\n                this.setState({progress});\r\n\r\n            } else {\r\n                console.log(\"green\")\r\n                this.polylineDrawGreen = <Polyline path={this.state.progress} options={{strokeColor: \"#9efd38 \"}}/>\r\n                var prg = [];\r\n                var start = this.state.progress[0]\r\n                var end = this.state.progress[this.state.progress.length-2]\r\n                  prg.push(start);\r\n                  prg.push(end);\r\n                  console.log(this.state.progress[0])\r\n                  console.log(this.state.progress[this.state.progress.length-2])\r\n                  console.log(prg)\r\n                this.polylineDrawRed.push({lat: position.lat(), lng: position.lng()});\r\n\r\n                   // this.polylineDrawRed.push(prg)\r\n\r\n               // console.log(this.polylineDrawRed)\r\n                progress = progress.concat(position);\r\n                //  this.setState({progress});\r\n                console.log(!nextLine);\r\n\r\n            }\r\n            this.setState({progress});\r\n\r\n            console.log(random);\r\n            //sleep(1000)\r\n            // console.log(this.state.progress)\r\n        }\r\n\r\n\r\n        //this.setState({ progress });\r\n    }\r\n\r\n    componentWillMount = () => {\r\n        this.path = this.path.map((coordinates, i, array) => {\r\n                if (i === 0) {\r\n                    return {...coordinates, distance: 0} // it begins here!\r\n                }\r\n\r\n                const {lat: lat1, lng: lng1} = coordinates\r\n                const latLong1 = new window.google.maps.LatLng(lat1, lng1)\r\n\r\n                const {lat: lat2, lng: lng2} = array[0]\r\n                const latLong2 = new window.google.maps.LatLng(lat2, lng2)\r\n\r\n                // in meters:\r\n                const distance = window.google.maps.geometry.spherical.computeDistanceBetween(\r\n                    latLong1,\r\n                    latLong2\r\n                );\r\n\r\n\r\n                return {...coordinates, distance}\r\n            }\r\n        );\r\n\r\n    }\r\n\r\n\r\n    render = () => {\r\n        console.log(this.state.pathFromDatabase)\r\n        return (\r\n            <GoogleMap\r\n                defaultZoom={8}\r\n                defaultCenter={{\r\n                lat: 36.822941269910814, lng: 10.198781761953349\r\n                }}\r\n            >\r\n                {\r\n\r\n                    this.state.progress && (\r\n                        <>\r\n                            <Marker position={this.get_address_lat_lng_start[0]} icon={this.imageFlag}/>\r\n                            <Marker position={this.get_address_lat_lng_end[0]} icon={this.imageFlag}/>\r\n\r\n\r\n                            {this.polylineDrawGreen}\r\n                            {this.polylineDrawRed}\r\n                            {this.polynedatabase}\r\n                            <Polyline path={this.path} options={{strokeColor: \"#fefaff\"}}/>\r\n                            <Marker position={this.state.progress[this.state.progress.length - 1]}\r\n                                    icon={this.imageCar}/>\r\n\r\n                            {this.arr.map((value, index) => {\r\n                                return <Marker position={this.arr[index]}\r\n                                               icon={this.image}\r\n                                />\r\n                            })},\r\n                            {this.arr.map((valuePin, indexPin) => {\r\n                                return <Marker position={this.polylineDrawRed[indexPin]}\r\n                                               icon={this.imagex}\r\n                                />\r\n                            })}\r\n                        </>\r\n\r\n                    )\r\n                }\r\n            </GoogleMap>\r\n        )\r\n    }\r\n}\r\n\r\nconst MapComponent = withScriptjs(withGoogleMap(Map))\r\n\r\nexport default () => (\r\n    <MapComponent\r\n        googleMapURL=\"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\"\r\n        loadingElement={<div style={{height: `100%`}}/>}\r\n        containerElement={<div style={{height: `650px`, width: '100%'}}/>}\r\n        mapElement={<div style={{height: `120%`}}/>}\r\n    />\r\n)\r\n"]},"metadata":{},"sourceType":"module"}