{"ast":null,"code":"'use strict';\n/**\r\n * Class representing an event.\r\n *\r\n * @private\r\n */\n\nclass Event {\n  /**\r\n   * Create a new `Event`.\r\n   *\r\n   * @param {String} type The name of the event\r\n   * @param {Object} target A reference to the target to which the event was dispatched\r\n   */\n  constructor(type, target) {\n    this.target = target;\n    this.type = type;\n  }\n\n}\n/**\r\n * Class representing a message event.\r\n *\r\n * @extends Event\r\n * @private\r\n */\n\n\nclass MessageEvent extends Event {\n  /**\r\n   * Create a new `MessageEvent`.\r\n   *\r\n   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data\r\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\r\n   */\n  constructor(data, target) {\n    super('message', target);\n    this.data = data;\n  }\n\n}\n/**\r\n * Class representing a close event.\r\n *\r\n * @extends Event\r\n * @private\r\n */\n\n\nclass CloseEvent extends Event {\n  /**\r\n   * Create a new `CloseEvent`.\r\n   *\r\n   * @param {Number} code The status code explaining why the connection is being closed\r\n   * @param {String} reason A human-readable string explaining why the connection is closing\r\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\r\n   */\n  constructor(code, reason, target) {\n    super('close', target);\n    this.wasClean = target._closeFrameReceived && target._closeFrameSent;\n    this.reason = reason;\n    this.code = code;\n  }\n\n}\n/**\r\n * Class representing an open event.\r\n *\r\n * @extends Event\r\n * @private\r\n */\n\n\nclass OpenEvent extends Event {\n  /**\r\n   * Create a new `OpenEvent`.\r\n   *\r\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\r\n   */\n  constructor(target) {\n    super('open', target);\n  }\n\n}\n/**\r\n * Class representing an error event.\r\n *\r\n * @extends Event\r\n * @private\r\n */\n\n\nclass ErrorEvent extends Event {\n  /**\r\n   * Create a new `ErrorEvent`.\r\n   *\r\n   * @param {Object} error The error that generated this event\r\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\r\n   */\n  constructor(error, target) {\n    super('error', target);\n    this.message = error.message;\n    this.error = error;\n  }\n\n}\n/**\r\n * This provides methods for emulating the `EventTarget` interface. It's not\r\n * meant to be used directly.\r\n *\r\n * @mixin\r\n */\n\n\nconst EventTarget = {\n  /**\r\n   * Register an event listener.\r\n   *\r\n   * @param {String} method A string representing the event type to listen for\r\n   * @param {Function} listener The listener to add\r\n   * @public\r\n   */\n  addEventListener(method, listener) {\n    if (typeof listener !== 'function') return;\n\n    function onMessage(data) {\n      listener.call(this, new MessageEvent(data, this));\n    }\n\n    function onClose(code, message) {\n      listener.call(this, new CloseEvent(code, message, this));\n    }\n\n    function onError(error) {\n      listener.call(this, new ErrorEvent(error, this));\n    }\n\n    function onOpen() {\n      listener.call(this, new OpenEvent(this));\n    }\n\n    if (method === 'message') {\n      onMessage._listener = listener;\n      this.on(method, onMessage);\n    } else if (method === 'close') {\n      onClose._listener = listener;\n      this.on(method, onClose);\n    } else if (method === 'error') {\n      onError._listener = listener;\n      this.on(method, onError);\n    } else if (method === 'open') {\n      onOpen._listener = listener;\n      this.on(method, onOpen);\n    } else {\n      this.on(method, listener);\n    }\n  },\n\n  /**\r\n   * Remove an event listener.\r\n   *\r\n   * @param {String} method A string representing the event type to remove\r\n   * @param {Function} listener The listener to remove\r\n   * @public\r\n   */\n  removeEventListener(method, listener) {\n    const listeners = this.listeners(method);\n\n    for (var i = 0; i < listeners.length; i++) {\n      if (listeners[i] === listener || listeners[i]._listener === listener) {\n        this.removeListener(method, listeners[i]);\n      }\n    }\n  }\n\n};\nmodule.exports = EventTarget;","map":{"version":3,"sources":["C:/Users/khouloud/Documents/PI/MERN_Stack_PI/node_modules/ws/lib/event-target.js"],"names":["Event","constructor","type","target","MessageEvent","data","CloseEvent","code","reason","wasClean","_closeFrameReceived","_closeFrameSent","OpenEvent","ErrorEvent","error","message","EventTarget","addEventListener","method","listener","onMessage","call","onClose","onError","onOpen","_listener","on","removeEventListener","listeners","i","length","removeListener","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\n/**\r\n * Class representing an event.\r\n *\r\n * @private\r\n */\r\nclass Event {\r\n  /**\r\n   * Create a new `Event`.\r\n   *\r\n   * @param {String} type The name of the event\r\n   * @param {Object} target A reference to the target to which the event was dispatched\r\n   */\r\n  constructor (type, target) {\r\n    this.target = target;\r\n    this.type = type;\r\n  }\r\n}\r\n\r\n/**\r\n * Class representing a message event.\r\n *\r\n * @extends Event\r\n * @private\r\n */\r\nclass MessageEvent extends Event {\r\n  /**\r\n   * Create a new `MessageEvent`.\r\n   *\r\n   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data\r\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\r\n   */\r\n  constructor (data, target) {\r\n    super('message', target);\r\n\r\n    this.data = data;\r\n  }\r\n}\r\n\r\n/**\r\n * Class representing a close event.\r\n *\r\n * @extends Event\r\n * @private\r\n */\r\nclass CloseEvent extends Event {\r\n  /**\r\n   * Create a new `CloseEvent`.\r\n   *\r\n   * @param {Number} code The status code explaining why the connection is being closed\r\n   * @param {String} reason A human-readable string explaining why the connection is closing\r\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\r\n   */\r\n  constructor (code, reason, target) {\r\n    super('close', target);\r\n\r\n    this.wasClean = target._closeFrameReceived && target._closeFrameSent;\r\n    this.reason = reason;\r\n    this.code = code;\r\n  }\r\n}\r\n\r\n/**\r\n * Class representing an open event.\r\n *\r\n * @extends Event\r\n * @private\r\n */\r\nclass OpenEvent extends Event {\r\n  /**\r\n   * Create a new `OpenEvent`.\r\n   *\r\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\r\n   */\r\n  constructor (target) {\r\n    super('open', target);\r\n  }\r\n}\r\n\r\n/**\r\n * Class representing an error event.\r\n *\r\n * @extends Event\r\n * @private\r\n */\r\nclass ErrorEvent extends Event {\r\n  /**\r\n   * Create a new `ErrorEvent`.\r\n   *\r\n   * @param {Object} error The error that generated this event\r\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\r\n   */\r\n  constructor (error, target) {\r\n    super('error', target);\r\n\r\n    this.message = error.message;\r\n    this.error = error;\r\n  }\r\n}\r\n\r\n/**\r\n * This provides methods for emulating the `EventTarget` interface. It's not\r\n * meant to be used directly.\r\n *\r\n * @mixin\r\n */\r\nconst EventTarget = {\r\n  /**\r\n   * Register an event listener.\r\n   *\r\n   * @param {String} method A string representing the event type to listen for\r\n   * @param {Function} listener The listener to add\r\n   * @public\r\n   */\r\n  addEventListener (method, listener) {\r\n    if (typeof listener !== 'function') return;\r\n\r\n    function onMessage (data) {\r\n      listener.call(this, new MessageEvent(data, this));\r\n    }\r\n\r\n    function onClose (code, message) {\r\n      listener.call(this, new CloseEvent(code, message, this));\r\n    }\r\n\r\n    function onError (error) {\r\n      listener.call(this, new ErrorEvent(error, this));\r\n    }\r\n\r\n    function onOpen () {\r\n      listener.call(this, new OpenEvent(this));\r\n    }\r\n\r\n    if (method === 'message') {\r\n      onMessage._listener = listener;\r\n      this.on(method, onMessage);\r\n    } else if (method === 'close') {\r\n      onClose._listener = listener;\r\n      this.on(method, onClose);\r\n    } else if (method === 'error') {\r\n      onError._listener = listener;\r\n      this.on(method, onError);\r\n    } else if (method === 'open') {\r\n      onOpen._listener = listener;\r\n      this.on(method, onOpen);\r\n    } else {\r\n      this.on(method, listener);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Remove an event listener.\r\n   *\r\n   * @param {String} method A string representing the event type to remove\r\n   * @param {Function} listener The listener to remove\r\n   * @public\r\n   */\r\n  removeEventListener (method, listener) {\r\n    const listeners = this.listeners(method);\r\n\r\n    for (var i = 0; i < listeners.length; i++) {\r\n      if (listeners[i] === listener || listeners[i]._listener === listener) {\r\n        this.removeListener(method, listeners[i]);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = EventTarget;\r\n"]},"metadata":{},"sourceType":"script"}