{"ast":null,"code":"const Events = require('backbone-events-standalone');\n\nconst _require = require('./utils'),\n      hasListeners = _require.hasListeners;\n\nfunction Room(name, {\n  historyCount\n}, scaledrone) {\n  this.name = name;\n  this._history = {\n    messages: [],\n    nextIndex: 0\n  };\n  this._historyCount = historyCount;\n  this.scaledrone = scaledrone;\n  this._observable = isObservable(name);\n\n  if (this._observable) {\n    this._cache = [];\n    this.on('members', members => this._cache = members.slice(0));\n    this.on('member_join', member => this._cache.unshift(member));\n  }\n}\n\nEvents.mixin(Room.prototype);\n\nRoom.prototype.unsubscribe = function () {\n  this.off();\n  this.scaledrone.unsubscribe(this.name);\n};\n\nRoom.prototype._getCacheMember = function (id) {\n  if (typeof id !== 'string') {\n    return null;\n  }\n\n  for (let i = 0; i < this._cache.length; i++) {\n    const member = this._cache[i];\n\n    if (member.id === id) {\n      return member;\n    }\n  }\n\n  return null;\n};\n\nRoom.prototype._trigger = function (type, error) {\n  if (hasListeners(this, type)) {\n    this.trigger(type, error);\n  } else if (error) {\n    this.scaledrone.trigger('error', error);\n  }\n};\n\nRoom.prototype._handleHistoryMessage = function (data) {\n  // Making sure the events get triggered in the right order\n  const trigger = () => {\n    const data = this._history.messages[this._history.nextIndex];\n    this._history.nextIndex++;\n    const message = data.message,\n          client_id = data.client_id,\n          timestamp = data.timestamp,\n          id = data.id;\n    const historyMessage = {\n      data: message,\n      timestamp,\n      id\n    };\n\n    if (client_id) {\n      historyMessage.clientId = client_id;\n    }\n\n    this.trigger('history_message', historyMessage);\n\n    if (this._history.messages[this._history.nextIndex]) {\n      trigger();\n    }\n  };\n\n  this._history.messages[data.index] = data;\n\n  if (this._history.messages[this._history.nextIndex]) {\n    trigger();\n  }\n};\n\nmodule.exports = Room;\n\nfunction isObservable(name) {\n  return name && name.substring(0, 11) === \"observable-\";\n}","map":{"version":3,"sources":["C:/Users/khouloud/Documents/PI/MERN_Stack_PI/node_modules/scaledrone-react-native/room.js"],"names":["Events","require","hasListeners","Room","name","historyCount","scaledrone","_history","messages","nextIndex","_historyCount","_observable","isObservable","_cache","on","members","slice","member","unshift","mixin","prototype","unsubscribe","off","_getCacheMember","id","i","length","_trigger","type","error","trigger","_handleHistoryMessage","data","message","client_id","timestamp","historyMessage","clientId","index","module","exports","substring"],"mappings":"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","sourcesContent":["const Events = require('backbone-events-standalone');\r\nconst {hasListeners} = require('./utils');\r\n\r\nfunction Room(name, {historyCount}, scaledrone) {\r\n  this.name = name;\r\n  this._history = {\r\n    messages: [],\r\n    nextIndex: 0,\r\n  };\r\n  this._historyCount = historyCount;\r\n  this.scaledrone = scaledrone;\r\n  this._observable = isObservable(name);\r\n  if (this._observable) {\r\n    this._cache = [];\r\n    this.on('members', members => this._cache = members.slice(0));\r\n    this.on('member_join', member => this._cache.unshift(member));\r\n  }\r\n}\r\n\r\nEvents.mixin(Room.prototype);\r\n\r\nRoom.prototype.unsubscribe = function() {\r\n  this.off();\r\n\tthis.scaledrone.unsubscribe(this.name);\r\n};\r\n\r\nRoom.prototype._getCacheMember = function(id) {\r\n  if (typeof id !== 'string') {\r\n    return null;\r\n  }\r\n  for (let i = 0; i < this._cache.length; i++) {\r\n    const member = this._cache[i];\r\n    if (member.id === id) {\r\n      return member;\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\nRoom.prototype._trigger = function(type, error) {\r\n  if (hasListeners(this, type)) {\r\n    this.trigger(type, error);\r\n  } else if (error) {\r\n    this.scaledrone.trigger('error', error);\r\n  }\r\n};\r\n\r\nRoom.prototype._handleHistoryMessage = function(data) {\r\n  // Making sure the events get triggered in the right order\r\n  const trigger = () => {\r\n    const data = this._history.messages[this._history.nextIndex];\r\n    this._history.nextIndex++;\r\n    const {message, client_id, timestamp, id} = data;\r\n    const historyMessage = {data: message, timestamp, id};\r\n    if (client_id) {\r\n      historyMessage.clientId = client_id;\r\n    }\r\n    this.trigger('history_message', historyMessage);\r\n    if (this._history.messages[this._history.nextIndex]) {\r\n      trigger();\r\n    }\r\n  };\r\n  this._history.messages[data.index] = data;\r\n  if (this._history.messages[this._history.nextIndex]) {\r\n    trigger();\r\n  }\r\n};\r\n\r\nmodule.exports = Room;\r\n\r\nfunction isObservable(name) {\r\n  return name && name.substring(0, 11) === \"observable-\";\r\n}\r\n"]},"metadata":{},"sourceType":"script"}