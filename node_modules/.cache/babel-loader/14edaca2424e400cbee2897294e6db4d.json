{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\khouloud\\\\Documents\\\\PI\\\\MERN_Stack_PI\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\khouloud\\\\Documents\\\\PI\\\\MERN_Stack_PI\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst uri_1 = require(\"./utils/uri\");\n\nconst syncerror_1 = require(\"./utils/syncerror\");\n\nconst logger_1 = require(\"./utils/logger\");\n\nconst events_1 = require(\"events\");\n\nconst entity_1 = require(\"./entity\");\n\nconst closeable_1 = require(\"./closeable\");\n\nconst cache_1 = require(\"./cache\");\n\nclass InsightsItem {}\n\nexports.InsightsItem = InsightsItem;\n\nclass LiveQueryImpl extends entity_1.SyncEntity {\n  constructor(descriptor, services, removalHandler, items) {\n    super(services, removalHandler);\n    this.descriptor = descriptor;\n    this.cache = new cache_1.Cache();\n\n    if (items) {\n      items.forEach(item => {\n        this.cache.store(item.key, {\n          key: item.key,\n          value: item.data\n        }, item.revision);\n      });\n    }\n  } // public\n\n\n  get sid() {\n    return this.descriptor.sid;\n  } // private extension of SyncEntity\n\n\n  get uniqueName() {\n    return null;\n  }\n\n  get type() {\n    return LiveQueryImpl.type;\n  }\n\n  static get type() {\n    return 'live_query';\n  }\n\n  get lastEventId() {\n    return this.descriptor.last_event_id;\n  }\n\n  get indexName() {\n    return this.descriptor.indexName;\n  }\n\n  get queryString() {\n    return this.descriptor.queryExpression;\n  } // custom private props\n\n\n  get queryUri() {\n    return this.descriptor.queryUri;\n  }\n\n  get liveQueryDescriptor() {\n    return this.descriptor;\n  } // dummy stub from iface\n\n\n  onRemoved() {}\n\n  getItems() {\n    const dataByKey = {};\n    this.cache.forEach((key, item) => {\n      dataByKey[key] = item.value;\n    });\n    return dataByKey;\n  }\n  /**\n   * @private\n   */\n\n\n  _update(message, isStrictlyOrdered) {\n    switch (message.type) {\n      case 'live_query_item_updated':\n        this.handleItemMutated(message.item_key, message.item_data, message.item_revision);\n        break;\n\n      case 'live_query_item_removed':\n        this.handleItemRemoved(message.item_key, message.item_revision);\n        break;\n\n      case 'live_query_updated':\n        this.handleBatchUpdate(message.items);\n        break;\n    }\n\n    if (isStrictlyOrdered) {\n      this._advanceLastEventId(message.last_event_id);\n    }\n  }\n\n  handleItemMutated(key, value, revision) {\n    if (this.shouldIgnoreEvent(key, revision)) {\n      logger_1.default.trace(\"Item \".concat(key, \" update skipped, revision: \").concat(revision));\n    } else {\n      const newItem = {\n        key,\n        value\n      };\n      this.cache.store(key, newItem, revision);\n      this.broadcastEventToListeners('itemUpdated', newItem);\n    }\n  }\n\n  handleItemRemoved(key, revision) {\n    const force = revision === null;\n\n    if (this.shouldIgnoreEvent(key, revision)) {\n      logger_1.default.trace(\"Item \".concat(key, \" delete skipped, revision: \").concat(revision));\n    } else {\n      this.cache.delete(key, revision, force);\n      this.broadcastEventToListeners('itemRemoved', {\n        key\n      });\n    }\n  }\n\n  handleBatchUpdate(items) {\n    // preprocess item set for easy key-based access (it's a one-time constant time operation)\n    let newItems = {};\n\n    if (items != null) {\n      items.forEach(item => {\n        newItems[item.key] = {\n          data: item.data,\n          revision: item.revision\n        };\n      });\n    } // go through existing items and generate update/remove events for them\n\n\n    this.cache.forEach((key, item) => {\n      const newItem = newItems[key];\n\n      if (newItem != null) {\n        this.handleItemMutated(key, newItem.data, newItem.revision);\n      } else {\n        this.handleItemRemoved(key, null); // force deletion w/o revision\n      } // once item is handled, remove it from incoming array\n\n\n      delete newItems[key];\n    }); // once we handled all the known items, handle remaining pack\n\n    for (let key in newItems) {\n      this.handleItemMutated(key, newItems[key].data, newItems[key].revision);\n    }\n  }\n\n  shouldIgnoreEvent(key, eventId) {\n    return key != null && eventId != null && this.cache.isKnown(key, eventId);\n  }\n  /**\n   * @private\n   */\n\n\n  _advanceLastEventId(eventId, revision) {\n    // LiveQuery is not revisioned in any way, so simply ignore second param and act upon lastEventId only\n    if (this.lastEventId < eventId) {\n      this.descriptor.last_event_id = eventId;\n    }\n  }\n\n}\n\nexports.LiveQueryImpl = LiveQueryImpl;\n\nfunction queryItems(_x) {\n  return _queryItems.apply(this, arguments);\n}\n\nfunction _queryItems() {\n  _queryItems = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(params) {\n    var network, queryString, uri, type, liveQueryRequestBody, response;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          network = params.network, queryString = params.queryString, uri = params.uri, type = params.type;\n\n          if (!(queryString == null)) {\n            _context3.next = 3;\n            break;\n          }\n\n          throw new syncerror_1.SyncError(\"Invalid query\", 400, 54507);\n\n        case 3:\n          liveQueryRequestBody = {\n            query_string: queryString // raw query string (like `key == \"value\" AND key2 != \"value2\"`)\n\n          };\n\n          if (type === LiveQuery.type) {\n            liveQueryRequestBody.type = type;\n          }\n\n          _context3.next = 7;\n          return network.post(uri, liveQueryRequestBody, undefined, true);\n\n        case 7:\n          response = _context3.sent;\n          return _context3.abrupt(\"return\", response.body);\n\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _queryItems.apply(this, arguments);\n}\n\nexports.queryItems = queryItems;\n/**\n * @class\n * @alias LiveQuery\n * @classdesc Represents a long-running query against Flex data wherein the returned result set\n *     subsequently receives pushed updates whenever new (or updated) records would match the\n *     given expression. Updated results are presented row-by-row until this query is explicitly\n *     closed.\n *\n *     Use the {@link Client#liveQuery} method to create a live query.\n *\n * @property {String} sid The immutable identifier of this query object, assigned by the system.\n *\n * @fires LiveQuery#itemUpdated\n * @fires LiveQuery#itemRemoved\n */\n\nclass LiveQuery extends closeable_1.Closeable {\n  /**\n   * @private\n   */\n  constructor(liveQueryImpl) {\n    super();\n    this.liveQueryImpl = liveQueryImpl;\n    this.liveQueryImpl.attach(this);\n  } // private props\n\n\n  static get type() {\n    return LiveQueryImpl.type;\n  }\n\n  get type() {\n    return LiveQueryImpl.type;\n  }\n\n  get lastEventId() {\n    return this.liveQueryImpl.lastEventId;\n  } // public\n\n\n  get sid() {\n    return this.liveQueryImpl.sid;\n  }\n  /**\n   * Closes this query instance and unsubscribes from further service events.\n   * This will eventually stop the physical inflow of updates over the network, when all other instances of this query are closed as well.\n   * @public\n   */\n\n\n  close() {\n    super.close();\n    this.liveQueryImpl.detach(this.listenerUuid);\n  }\n  /**\n   * @returns {LiveQuery#ItemsSnapshot} A snapshot of items matching the current query expression.\n   * @public\n   */\n\n\n  getItems() {\n    this.ensureNotClosed();\n    return this.liveQueryImpl.getItems();\n  }\n\n}\n\nexports.LiveQuery = LiveQuery;\n/**\n * @class\n * @alias InstantQuery\n * @classdesc Allows repetitive quick searches against a specific Flex data. Unlike a\n * LiveQuery, this result set does not subscribe to any updates and therefore receives no events\n * beyond the initial result set.\n *\n * Use the {@link Client#instantQuery} method to create an Instant Query.\n *\n * @fires InstantQuery#searchResult\n */\n\nclass InstantQuery extends events_1.EventEmitter {\n  /**\n   * @private\n   */\n  constructor(params) {\n    super();\n    this.queryExpression = null;\n    this.items = {};\n    Object.assign(this, params);\n    this.updateIndexName(params.indexName);\n  } // private props\n\n\n  static get type() {\n    return 'instant_query';\n  }\n\n  get type() {\n    return InstantQuery.type;\n  }\n  /**\n   * Spawns a new search request. The result will be provided asynchronously via the {@link InstantQuery#event:searchResult}\n   * event.\n   * @param {String} queryExpression A query expression to be executed against the given data index. For more information\n   * on the syntax read {@link Client#liveQuery}.\n   * @returns {Promise<void>} A promise that resolves when query result has been received.\n   * @public\n   */\n\n\n  search(queryExpression) {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _this.items = {};\n            return _context.abrupt(\"return\", queryItems({\n              network: _this.network,\n              uri: _this.queryUri,\n              queryString: queryExpression\n            }).then(response => {\n              _this.queryExpression = queryExpression;\n\n              if (response.items) {\n                response.items.forEach(item => {\n                  _this.items[item.key] = item.data;\n                });\n              }\n\n              _this.emit('searchResult', _this.getItems());\n            }).catch(err => {\n              logger_1.default.error(\"Error '\".concat(err.message, \"' while executing query '\").concat(queryExpression, \"'\"));\n              _this.queryExpression = null;\n              throw err;\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n  /**\n   * Instantiates a LiveQuery object based on the last known query expression that was passed to the\n   * {@link InstantQuery#search} method. This LiveQuery will start receiving updates with new results,\n   * while current object can be still used to execute repetitive searches.\n   * @returns {Promise<LiveQuery>} A promise which resolves when the LiveQuery object is ready.\n   * @public\n   */\n\n\n  subscribe() {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(_this2.queryExpression == null)) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", Promise.reject(new syncerror_1.SyncError(\"Invalid query\", 400, 54507)));\n\n          case 2:\n            return _context2.abrupt(\"return\", _this2.liveQueryCreator(_this2.indexName, _this2.queryExpression));\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  }\n  /**\n   * @returns {LiveQuery#ItemsSnapshot} A snapshot of items matching current query expression.\n   * @public\n   */\n\n\n  getItems() {\n    return this.items;\n  }\n  /**\n   * Set new index name\n   * @param {String} indexName New index name to set\n   * @returns void\n   * @public\n   */\n\n\n  updateIndexName(indexName) {\n    if (!indexName || typeof indexName !== 'string') {\n      throw new Error('Index name must contain a non-empty string value');\n    }\n\n    this.indexName = indexName;\n    this.queryUri = this.generateQueryUri(this.indexName);\n  }\n\n  generateQueryUri(indexName) {\n    return new uri_1.UriBuilder(this.insightsUri).pathSegment(indexName).pathSegment('Items').build();\n  }\n\n}\n\nexports.InstantQuery = InstantQuery;\nexports.default = LiveQuery;\n/**\n * @class InsightsItem\n * @classdesc An individual result from a LiveQuery or InstantQuery result set.\n * @property {String} key The identifier that maps to this item within the search result.\n * @property {Object} value The contents of the item.\n */\n\n/**\n * A result set, i.e. a collection of items that matched a LiveQuery or InstantQuery expression. Each result is a\n * key-value pair, where each key identifies its object uniquely. These results are equivalent to a set of\n * {@link InsightsItem}-s.\n * @typedef {Object.<string, Object>} LiveQuery#ItemsSnapshot\n */\n\n/**\n * Fired when an item has been added or updated.\n * @event LiveQuery#itemUpdated\n * @param {InsightsItem} item Updated item.\n * @example\n * liveQuery.on('itemUpdated', function(item) {\n *   console.log('Item ' + item.key + ' was updated');\n *   console.log('Item value: ', item.value);\n * });\n */\n\n/**\n * Fired when an existing item has been removed.\n * @event LiveQuery#itemRemoved\n * @param {Object} args Arguments provided with the event.\n * @param {String} args.key The key of the removed item.\n * @example\n * liveQuery.on('itemRemoved', function(args) {\n *   console.log('Item ' + args.key + ' was removed');\n * });\n */\n\n/**\n * Fired when a search result is ready.\n * @event InstantQuery#searchResult\n * @param {LiveQuery#ItemsSnapshot} items A snapshot of items matching current query expression.\n * @example\n * instantQuery.on('searchResult', function(items) {\n *    Object.entries(items).forEach(([key, value]) => {\n *      console.log('Search result item key: ' + key);\n *      console.log('Search result item value: ' + value);\n *    });\n * });\n */","map":{"version":3,"sources":["C:/Users/khouloud/Documents/PI/MERN_Stack_PI/node_modules/twilio-sync/lib/livequery.js"],"names":["Object","defineProperty","exports","value","uri_1","require","syncerror_1","logger_1","events_1","entity_1","closeable_1","cache_1","InsightsItem","LiveQueryImpl","SyncEntity","constructor","descriptor","services","removalHandler","items","cache","Cache","forEach","item","store","key","data","revision","sid","uniqueName","type","lastEventId","last_event_id","indexName","queryString","queryExpression","queryUri","liveQueryDescriptor","onRemoved","getItems","dataByKey","_update","message","isStrictlyOrdered","handleItemMutated","item_key","item_data","item_revision","handleItemRemoved","handleBatchUpdate","_advanceLastEventId","shouldIgnoreEvent","default","trace","newItem","broadcastEventToListeners","force","delete","newItems","eventId","isKnown","queryItems","params","network","uri","SyncError","liveQueryRequestBody","query_string","LiveQuery","post","undefined","response","body","Closeable","liveQueryImpl","attach","close","detach","listenerUuid","ensureNotClosed","InstantQuery","EventEmitter","assign","updateIndexName","search","then","emit","catch","err","error","subscribe","Promise","reject","liveQueryCreator","Error","generateQueryUri","UriBuilder","insightsUri","pathSegment","build"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst uri_1 = require(\"./utils/uri\");\nconst syncerror_1 = require(\"./utils/syncerror\");\nconst logger_1 = require(\"./utils/logger\");\nconst events_1 = require(\"events\");\nconst entity_1 = require(\"./entity\");\nconst closeable_1 = require(\"./closeable\");\nconst cache_1 = require(\"./cache\");\nclass InsightsItem {\n}\nexports.InsightsItem = InsightsItem;\nclass LiveQueryImpl extends entity_1.SyncEntity {\n    constructor(descriptor, services, removalHandler, items) {\n        super(services, removalHandler);\n        this.descriptor = descriptor;\n        this.cache = new cache_1.Cache();\n        if (items) {\n            items.forEach(item => {\n                this.cache.store(item.key, { key: item.key, value: item.data }, item.revision);\n            });\n        }\n    }\n    // public\n    get sid() {\n        return this.descriptor.sid;\n    }\n    // private extension of SyncEntity\n    get uniqueName() {\n        return null;\n    }\n    get type() {\n        return LiveQueryImpl.type;\n    }\n    static get type() {\n        return 'live_query';\n    }\n    get lastEventId() {\n        return this.descriptor.last_event_id;\n    }\n    get indexName() {\n        return this.descriptor.indexName;\n    }\n    get queryString() {\n        return this.descriptor.queryExpression;\n    }\n    // custom private props\n    get queryUri() {\n        return this.descriptor.queryUri;\n    }\n    get liveQueryDescriptor() {\n        return this.descriptor;\n    }\n    // dummy stub from iface\n    onRemoved() {\n    }\n    getItems() {\n        const dataByKey = {};\n        this.cache.forEach((key, item) => {\n            dataByKey[key] = item.value;\n        });\n        return dataByKey;\n    }\n    /**\n     * @private\n     */\n    _update(message, isStrictlyOrdered) {\n        switch (message.type) {\n            case 'live_query_item_updated':\n                this.handleItemMutated(message.item_key, message.item_data, message.item_revision);\n                break;\n            case 'live_query_item_removed':\n                this.handleItemRemoved(message.item_key, message.item_revision);\n                break;\n            case 'live_query_updated':\n                this.handleBatchUpdate(message.items);\n                break;\n        }\n        if (isStrictlyOrdered) {\n            this._advanceLastEventId(message.last_event_id);\n        }\n    }\n    handleItemMutated(key, value, revision) {\n        if (this.shouldIgnoreEvent(key, revision)) {\n            logger_1.default.trace(`Item ${key} update skipped, revision: ${revision}`);\n        }\n        else {\n            const newItem = { key, value };\n            this.cache.store(key, newItem, revision);\n            this.broadcastEventToListeners('itemUpdated', newItem);\n        }\n    }\n    handleItemRemoved(key, revision) {\n        const force = (revision === null);\n        if (this.shouldIgnoreEvent(key, revision)) {\n            logger_1.default.trace(`Item ${key} delete skipped, revision: ${revision}`);\n        }\n        else {\n            this.cache.delete(key, revision, force);\n            this.broadcastEventToListeners('itemRemoved', { key });\n        }\n    }\n    handleBatchUpdate(items) {\n        // preprocess item set for easy key-based access (it's a one-time constant time operation)\n        let newItems = {};\n        if (items != null) {\n            items.forEach(item => {\n                newItems[item.key] = {\n                    data: item.data,\n                    revision: item.revision\n                };\n            });\n        }\n        // go through existing items and generate update/remove events for them\n        this.cache.forEach((key, item) => {\n            const newItem = newItems[key];\n            if (newItem != null) {\n                this.handleItemMutated(key, newItem.data, newItem.revision);\n            }\n            else {\n                this.handleItemRemoved(key, null); // force deletion w/o revision\n            }\n            // once item is handled, remove it from incoming array\n            delete newItems[key];\n        });\n        // once we handled all the known items, handle remaining pack\n        for (let key in newItems) {\n            this.handleItemMutated(key, newItems[key].data, newItems[key].revision);\n        }\n    }\n    shouldIgnoreEvent(key, eventId) {\n        return key != null && eventId != null && this.cache.isKnown(key, eventId);\n    }\n    /**\n     * @private\n     */\n    _advanceLastEventId(eventId, revision) {\n        // LiveQuery is not revisioned in any way, so simply ignore second param and act upon lastEventId only\n        if (this.lastEventId < eventId) {\n            this.descriptor.last_event_id = eventId;\n        }\n    }\n}\nexports.LiveQueryImpl = LiveQueryImpl;\nasync function queryItems(params) {\n    let { network, queryString, uri, type } = params;\n    if (queryString == null) { // should not be null or undefined\n        throw new syncerror_1.SyncError(`Invalid query`, 400, 54507);\n    }\n    const liveQueryRequestBody = {\n        query_string: queryString // raw query string (like `key == \"value\" AND key2 != \"value2\"`)\n    };\n    if (type === LiveQuery.type) {\n        liveQueryRequestBody.type = type;\n    }\n    let response = await network.post(uri, liveQueryRequestBody, undefined, true);\n    return response.body;\n}\nexports.queryItems = queryItems;\n/**\n * @class\n * @alias LiveQuery\n * @classdesc Represents a long-running query against Flex data wherein the returned result set\n *     subsequently receives pushed updates whenever new (or updated) records would match the\n *     given expression. Updated results are presented row-by-row until this query is explicitly\n *     closed.\n *\n *     Use the {@link Client#liveQuery} method to create a live query.\n *\n * @property {String} sid The immutable identifier of this query object, assigned by the system.\n *\n * @fires LiveQuery#itemUpdated\n * @fires LiveQuery#itemRemoved\n */\nclass LiveQuery extends closeable_1.Closeable {\n    /**\n     * @private\n     */\n    constructor(liveQueryImpl) {\n        super();\n        this.liveQueryImpl = liveQueryImpl;\n        this.liveQueryImpl.attach(this);\n    }\n    // private props\n    static get type() {\n        return LiveQueryImpl.type;\n    }\n    get type() {\n        return LiveQueryImpl.type;\n    }\n    get lastEventId() {\n        return this.liveQueryImpl.lastEventId;\n    }\n    // public\n    get sid() {\n        return this.liveQueryImpl.sid;\n    }\n    /**\n     * Closes this query instance and unsubscribes from further service events.\n     * This will eventually stop the physical inflow of updates over the network, when all other instances of this query are closed as well.\n     * @public\n     */\n    close() {\n        super.close();\n        this.liveQueryImpl.detach(this.listenerUuid);\n    }\n    /**\n     * @returns {LiveQuery#ItemsSnapshot} A snapshot of items matching the current query expression.\n     * @public\n     */\n    getItems() {\n        this.ensureNotClosed();\n        return this.liveQueryImpl.getItems();\n    }\n}\nexports.LiveQuery = LiveQuery;\n/**\n * @class\n * @alias InstantQuery\n * @classdesc Allows repetitive quick searches against a specific Flex data. Unlike a\n * LiveQuery, this result set does not subscribe to any updates and therefore receives no events\n * beyond the initial result set.\n *\n * Use the {@link Client#instantQuery} method to create an Instant Query.\n *\n * @fires InstantQuery#searchResult\n */\nclass InstantQuery extends events_1.EventEmitter {\n    /**\n     * @private\n     */\n    constructor(params) {\n        super();\n        this.queryExpression = null;\n        this.items = {};\n        Object.assign(this, params);\n        this.updateIndexName(params.indexName);\n    }\n    // private props\n    static get type() {\n        return 'instant_query';\n    }\n    get type() {\n        return InstantQuery.type;\n    }\n    /**\n     * Spawns a new search request. The result will be provided asynchronously via the {@link InstantQuery#event:searchResult}\n     * event.\n     * @param {String} queryExpression A query expression to be executed against the given data index. For more information\n     * on the syntax read {@link Client#liveQuery}.\n     * @returns {Promise<void>} A promise that resolves when query result has been received.\n     * @public\n     */\n    async search(queryExpression) {\n        this.items = {};\n        return queryItems({\n            network: this.network,\n            uri: this.queryUri,\n            queryString: queryExpression\n        })\n            .then(response => {\n            this.queryExpression = queryExpression;\n            if (response.items) {\n                response.items.forEach((item) => {\n                    this.items[item.key] = item.data;\n                });\n            }\n            this.emit('searchResult', this.getItems());\n        })\n            .catch(err => {\n            logger_1.default.error(`Error '${err.message}' while executing query '${queryExpression}'`);\n            this.queryExpression = null;\n            throw err;\n        });\n    }\n    /**\n     * Instantiates a LiveQuery object based on the last known query expression that was passed to the\n     * {@link InstantQuery#search} method. This LiveQuery will start receiving updates with new results,\n     * while current object can be still used to execute repetitive searches.\n     * @returns {Promise<LiveQuery>} A promise which resolves when the LiveQuery object is ready.\n     * @public\n     */\n    async subscribe() {\n        if (this.queryExpression == null) { // should not be null or undefined\n            return Promise.reject(new syncerror_1.SyncError(`Invalid query`, 400, 54507));\n        }\n        return this.liveQueryCreator(this.indexName, this.queryExpression);\n    }\n    /**\n     * @returns {LiveQuery#ItemsSnapshot} A snapshot of items matching current query expression.\n     * @public\n     */\n    getItems() {\n        return this.items;\n    }\n    /**\n     * Set new index name\n     * @param {String} indexName New index name to set\n     * @returns void\n     * @public\n     */\n    updateIndexName(indexName) {\n        if (!indexName || typeof indexName !== 'string') {\n            throw new Error('Index name must contain a non-empty string value');\n        }\n        this.indexName = indexName;\n        this.queryUri = this.generateQueryUri(this.indexName);\n    }\n    generateQueryUri(indexName) {\n        return new uri_1.UriBuilder(this.insightsUri)\n            .pathSegment(indexName)\n            .pathSegment('Items')\n            .build();\n    }\n}\nexports.InstantQuery = InstantQuery;\nexports.default = LiveQuery;\n/**\n * @class InsightsItem\n * @classdesc An individual result from a LiveQuery or InstantQuery result set.\n * @property {String} key The identifier that maps to this item within the search result.\n * @property {Object} value The contents of the item.\n */\n/**\n * A result set, i.e. a collection of items that matched a LiveQuery or InstantQuery expression. Each result is a\n * key-value pair, where each key identifies its object uniquely. These results are equivalent to a set of\n * {@link InsightsItem}-s.\n * @typedef {Object.<string, Object>} LiveQuery#ItemsSnapshot\n */\n/**\n * Fired when an item has been added or updated.\n * @event LiveQuery#itemUpdated\n * @param {InsightsItem} item Updated item.\n * @example\n * liveQuery.on('itemUpdated', function(item) {\n *   console.log('Item ' + item.key + ' was updated');\n *   console.log('Item value: ', item.value);\n * });\n */\n/**\n * Fired when an existing item has been removed.\n * @event LiveQuery#itemRemoved\n * @param {Object} args Arguments provided with the event.\n * @param {String} args.key The key of the removed item.\n * @example\n * liveQuery.on('itemRemoved', function(args) {\n *   console.log('Item ' + args.key + ' was removed');\n * });\n */\n/**\n * Fired when a search result is ready.\n * @event InstantQuery#searchResult\n * @param {LiveQuery#ItemsSnapshot} items A snapshot of items matching current query expression.\n * @example\n * instantQuery.on('searchResult', function(items) {\n *    Object.entries(items).forEach(([key, value]) => {\n *      console.log('Search result item key: ' + key);\n *      console.log('Search result item value: ' + value);\n *    });\n * });\n */\n"]},"metadata":{},"sourceType":"script"}