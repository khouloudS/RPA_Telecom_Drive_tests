{"ast":null,"code":"'use strict';\n\nfunction Queue(options) {\n  if (!(this instanceof Queue)) {\n    return new Queue(options);\n  }\n\n  options = options || {};\n  this.concurrency = options.concurrency || Infinity;\n  this.pending = 0;\n  this.jobs = [];\n  this.cbs = [];\n  this._done = done.bind(this);\n}\n\nvar arrayAddMethods = ['push', 'unshift', 'splice'];\narrayAddMethods.forEach(function (method) {\n  Queue.prototype[method] = function () {\n    var methodResult = Array.prototype[method].apply(this.jobs, arguments);\n\n    this._run();\n\n    return methodResult;\n  };\n});\nObject.defineProperty(Queue.prototype, 'length', {\n  get: function get() {\n    return this.pending + this.jobs.length;\n  }\n});\n\nQueue.prototype._run = function () {\n  if (this.pending === this.concurrency) {\n    return;\n  }\n\n  if (this.jobs.length) {\n    var job = this.jobs.shift();\n    this.pending++;\n    job(this._done);\n\n    this._run();\n  }\n\n  if (this.pending === 0) {\n    while (this.cbs.length !== 0) {\n      var cb = this.cbs.pop();\n      process.nextTick(cb);\n    }\n  }\n};\n\nQueue.prototype.onDone = function (cb) {\n  if (typeof cb === 'function') {\n    this.cbs.push(cb);\n\n    this._run();\n  }\n};\n\nfunction done() {\n  this.pending--;\n\n  this._run();\n}\n\nmodule.exports = Queue;","map":{"version":3,"sources":["C:/Users/khouloud/Documents/PI/MERN_Stack_PI/node_modules/async-limiter/index.js"],"names":["Queue","options","concurrency","Infinity","pending","jobs","cbs","_done","done","bind","arrayAddMethods","forEach","method","prototype","methodResult","Array","apply","arguments","_run","Object","defineProperty","get","length","job","shift","cb","pop","process","nextTick","onDone","push","module","exports"],"mappings":"AAAA;;AAEA,SAASA,KAAT,CAAeC,OAAf,EAAwB;AACtB,MAAI,EAAE,gBAAgBD,KAAlB,CAAJ,EAA8B;AAC5B,WAAO,IAAIA,KAAJ,CAAUC,OAAV,CAAP;AACD;;AAEDA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,OAAKC,WAAL,GAAmBD,OAAO,CAACC,WAAR,IAAuBC,QAA1C;AACA,OAAKC,OAAL,GAAe,CAAf;AACA,OAAKC,IAAL,GAAY,EAAZ;AACA,OAAKC,GAAL,GAAW,EAAX;AACA,OAAKC,KAAL,GAAaC,IAAI,CAACC,IAAL,CAAU,IAAV,CAAb;AACD;;AAED,IAAIC,eAAe,GAAG,CACpB,MADoB,EAEpB,SAFoB,EAGpB,QAHoB,CAAtB;AAMAA,eAAe,CAACC,OAAhB,CAAwB,UAASC,MAAT,EAAiB;AACvCZ,EAAAA,KAAK,CAACa,SAAN,CAAgBD,MAAhB,IAA0B,YAAW;AACnC,QAAIE,YAAY,GAAGC,KAAK,CAACF,SAAN,CAAgBD,MAAhB,EAAwBI,KAAxB,CAA8B,KAAKX,IAAnC,EAAyCY,SAAzC,CAAnB;;AACA,SAAKC,IAAL;;AACA,WAAOJ,YAAP;AACD,GAJD;AAKD,CAND;AAQAK,MAAM,CAACC,cAAP,CAAsBpB,KAAK,CAACa,SAA5B,EAAuC,QAAvC,EAAiD;AAC/CQ,EAAAA,GAAG,EAAE,eAAW;AACd,WAAO,KAAKjB,OAAL,GAAe,KAAKC,IAAL,CAAUiB,MAAhC;AACD;AAH8C,CAAjD;;AAMAtB,KAAK,CAACa,SAAN,CAAgBK,IAAhB,GAAuB,YAAW;AAChC,MAAI,KAAKd,OAAL,KAAiB,KAAKF,WAA1B,EAAuC;AACrC;AACD;;AACD,MAAI,KAAKG,IAAL,CAAUiB,MAAd,EAAsB;AACpB,QAAIC,GAAG,GAAG,KAAKlB,IAAL,CAAUmB,KAAV,EAAV;AACA,SAAKpB,OAAL;AACAmB,IAAAA,GAAG,CAAC,KAAKhB,KAAN,CAAH;;AACA,SAAKW,IAAL;AACD;;AAED,MAAI,KAAKd,OAAL,KAAiB,CAArB,EAAwB;AACtB,WAAO,KAAKE,GAAL,CAASgB,MAAT,KAAoB,CAA3B,EAA8B;AAC5B,UAAIG,EAAE,GAAG,KAAKnB,GAAL,CAASoB,GAAT,EAAT;AACAC,MAAAA,OAAO,CAACC,QAAR,CAAiBH,EAAjB;AACD;AACF;AACF,CAjBD;;AAmBAzB,KAAK,CAACa,SAAN,CAAgBgB,MAAhB,GAAyB,UAASJ,EAAT,EAAa;AACpC,MAAI,OAAOA,EAAP,KAAc,UAAlB,EAA8B;AAC5B,SAAKnB,GAAL,CAASwB,IAAT,CAAcL,EAAd;;AACA,SAAKP,IAAL;AACD;AACF,CALD;;AAOA,SAASV,IAAT,GAAgB;AACd,OAAKJ,OAAL;;AACA,OAAKc,IAAL;AACD;;AAEDa,MAAM,CAACC,OAAP,GAAiBhC,KAAjB","sourcesContent":["'use strict';\r\n\r\nfunction Queue(options) {\r\n  if (!(this instanceof Queue)) {\r\n    return new Queue(options);\r\n  }\r\n\r\n  options = options || {};\r\n  this.concurrency = options.concurrency || Infinity;\r\n  this.pending = 0;\r\n  this.jobs = [];\r\n  this.cbs = [];\r\n  this._done = done.bind(this);\r\n}\r\n\r\nvar arrayAddMethods = [\r\n  'push',\r\n  'unshift',\r\n  'splice'\r\n];\r\n\r\narrayAddMethods.forEach(function(method) {\r\n  Queue.prototype[method] = function() {\r\n    var methodResult = Array.prototype[method].apply(this.jobs, arguments);\r\n    this._run();\r\n    return methodResult;\r\n  };\r\n});\r\n\r\nObject.defineProperty(Queue.prototype, 'length', {\r\n  get: function() {\r\n    return this.pending + this.jobs.length;\r\n  }\r\n});\r\n\r\nQueue.prototype._run = function() {\r\n  if (this.pending === this.concurrency) {\r\n    return;\r\n  }\r\n  if (this.jobs.length) {\r\n    var job = this.jobs.shift();\r\n    this.pending++;\r\n    job(this._done);\r\n    this._run();\r\n  }\r\n\r\n  if (this.pending === 0) {\r\n    while (this.cbs.length !== 0) {\r\n      var cb = this.cbs.pop();\r\n      process.nextTick(cb);\r\n    }\r\n  }\r\n};\r\n\r\nQueue.prototype.onDone = function(cb) {\r\n  if (typeof cb === 'function') {\r\n    this.cbs.push(cb);\r\n    this._run();\r\n  }\r\n};\r\n\r\nfunction done() {\r\n  this.pending--;\r\n  this._run();\r\n}\r\n\r\nmodule.exports = Queue;\r\n"]},"metadata":{},"sourceType":"script"}