{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\khouloud\\\\Documents\\\\PI\\\\MERN_Stack_PI\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\khouloud\\\\Documents\\\\PI\\\\MERN_Stack_PI\\\\src\\\\components\\\\App\\\\App_chat.js\";\nimport React, { Component } from 'react';\nimport './App_chat.css';\nimport MessageList from \"./MessageList\";\nimport MessageForm from \"./MessageForm\";\n\nclass App_chat extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      this.getToken().then(this.createChatClient).then(this.joinGeneralChannel).then(this.configureChannelEvents).catch(error => {\n        this.addMessage({\n          body: \"Error: \".concat(error.message)\n        });\n      });\n    };\n\n    this.addMessage = message => {\n      const messageData = _objectSpread({}, message, {\n        me: message.author === this.state.username\n      });\n\n      this.setState({\n        messages: [...this.state.messages, messageData]\n      });\n    };\n\n    this.createChatClient = token => {\n      return new Promise((resolve, reject) => {\n        resolve(new TwilioChat(token.jwt));\n      });\n    };\n\n    this.joinGeneralChannel = chatClient => {\n      return new Promise((resolve, reject) => {\n        chatClient.getSubscribedChannels().then(() => {\n          chatClient.getChannelByUniqueName('general').then(channel => {// ...\n          }).catch(() => this.createGeneralChannel(chatClient));\n        }).catch(() => reject(Error('Could not get channel list.')));\n      });\n    };\n\n    this.createGeneralChannel = chatClient => {\n      return new Promise((resolve, reject) => {\n        this.addMessage({\n          body: 'Creating general channel...'\n        });\n        chatClient.createChannel({\n          uniqueName: 'general',\n          friendlyName: 'General Chat'\n        }).then(() => this.joinGeneralChannel(chatClient)).catch(() => reject(Error('Could not create general channel.')));\n      });\n    };\n\n    this.configureChannelEvents = channel => {\n      channel.on('messageAdded', ({\n        author,\n        body\n      }) => {\n        this.addMessage({\n          author,\n          body\n        });\n      });\n      channel.on('memberJoined', member => {\n        this.addMessage({\n          body: \"\".concat(member.identity, \" has joined the channel.\")\n        });\n      });\n      channel.on('memberLeft', member => {\n        this.addMessage({\n          body: \"\".concat(member.identity, \" has left the channel.\")\n        });\n      });\n    };\n\n    this.handleNewMessage = text => {\n      if (this.state.channel) {\n        this.state.channel.sendMessage(text);\n      }\n    };\n\n    this.state = {\n      messages: [],\n      username: null,\n      channel: null\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(MessageList, {\n      messages: this.state.messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(MessageForm, {\n      onMessageSend: this.handleNewMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App_chat;","map":{"version":3,"sources":["C:/Users/khouloud/Documents/PI/MERN_Stack_PI/src/components/App/App_chat.js"],"names":["React","Component","MessageList","MessageForm","App_chat","constructor","props","componentDidMount","getToken","then","createChatClient","joinGeneralChannel","configureChannelEvents","catch","error","addMessage","body","message","messageData","me","author","state","username","setState","messages","token","Promise","resolve","reject","TwilioChat","jwt","chatClient","getSubscribedChannels","getChannelByUniqueName","channel","createGeneralChannel","Error","createChannel","uniqueName","friendlyName","on","member","identity","handleNewMessage","text","sendMessage","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport './App_chat.css'\r\nimport MessageList from \"./MessageList\";\r\nimport MessageForm from \"./MessageForm\";\r\n\r\nclass App_chat extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            messages: [],\r\n            username: null,\r\n            channel: null,\r\n        }\r\n    }\r\n    componentDidMount = () => {\r\n        this.getToken()\r\n            .then(this.createChatClient)\r\n            .then(this.joinGeneralChannel)\r\n            .then(this.configureChannelEvents)\r\n            .catch((error) => {\r\n                this.addMessage({ body: `Error: ${error.message}` })\r\n            })\r\n    }\r\n    addMessage = (message) => {\r\n        const messageData = { ...message, me: message.author === this.state.username }\r\n        this.setState({\r\n            messages: [...this.state.messages, messageData],\r\n        })\r\n    }\r\n    createChatClient = (token) => {\r\n        return new Promise((resolve, reject) => {\r\n            resolve(new TwilioChat(token.jwt))\r\n        })\r\n    }\r\n    joinGeneralChannel = (chatClient) => {\r\n        return new Promise((resolve, reject) => {\r\n            chatClient.getSubscribedChannels().then(() => {\r\n                chatClient.getChannelByUniqueName('general').then((channel) => {\r\n                    // ...\r\n                }).catch(() => this.createGeneralChannel(chatClient))\r\n            }).catch(() => reject(Error('Could not get channel list.')))\r\n        })\r\n    }\r\n\r\n    createGeneralChannel = (chatClient) => {\r\n        return new Promise((resolve, reject) => {\r\n            this.addMessage({ body: 'Creating general channel...' })\r\n            chatClient\r\n                .createChannel({ uniqueName: 'general', friendlyName: 'General Chat' })\r\n                .then(() => this.joinGeneralChannel(chatClient))\r\n                .catch(() => reject(Error('Could not create general channel.')))\r\n        })\r\n    }\r\n\r\n    configureChannelEvents = (channel) => {\r\n        channel.on('messageAdded', ({ author, body }) => {\r\n            this.addMessage({ author, body })\r\n        })\r\n\r\n        channel.on('memberJoined', (member) => {\r\n            this.addMessage({ body: `${member.identity} has joined the channel.` })\r\n        })\r\n\r\n        channel.on('memberLeft', (member) => {\r\n            this.addMessage({ body: `${member.identity} has left the channel.` })\r\n        })\r\n    }\r\n    handleNewMessage = (text) => {\r\n        if (this.state.channel) {\r\n            this.state.channel.sendMessage(text)\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <MessageList messages={this.state.messages} />\r\n                <MessageForm onMessageSend={this.handleNewMessage} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App_chat\r\n"]},"metadata":{},"sourceType":"module"}