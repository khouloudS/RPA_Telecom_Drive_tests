{"ast":null,"code":"'use strict';\n\nvar request = require('./request');\n\nvar createTwilioError = require('./util/twilio-video-errors').createTwilioError;\n\nvar ConfigurationAcquireFailedError = require('./util/twilio-video-errors').ConfigurationAcquireFailedError;\n\nvar CONFIG_URL = 'https://ecs.us1.twilio.com/v1/Configuration';\n/**\r\n * Request a configuration setting for the specified JWT.\r\n * @param {String} token - A JWT String representing a valid AccessToken.\r\n * @param {?ECS.getConfigurationOptions} [options]\r\n * @returns {Promise<Object>} configuration - An unformatted map of\r\n *   configuration settings specific to the specified service.\r\n * @throws {TwilioError}\r\n*/\n\n/**\r\n* @typedef {Object} ECS.getConfigurationOptions\r\n* @property {?Object} [body] - A valid JSON payload to send to the\r\n*   ECS endpoint.\r\n* @property {?String} [configUrl='https://ecs.us1.twilio.com/v1/Configuration'] - A\r\n*   custom URL to POST ECS configuration requests to.\r\n*/\n\nfunction getConfiguration(token, options) {\n  if (!token) {\n    throw new Error('<String>token is a required argument.');\n  }\n\n  options = Object.assign({\n    configUrl: CONFIG_URL\n  }, options);\n  var postData = {\n    url: options.configUrl,\n    headers: {\n      'X-Twilio-Token': token,\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  };\n\n  if (options.body) {\n    postData.body = toQueryString(options.body);\n  }\n\n  return request.post(postData).then(function (responseText) {\n    return parseJsonTextFromECS(responseText);\n  }, function (errorText) {\n    var error = parseJsonTextFromECS(errorText);\n    throw createTwilioError(error.code, error.message);\n  });\n}\n\nfunction parseJsonTextFromECS(jsonText) {\n  var json = null;\n\n  try {\n    json = JSON.parse(jsonText);\n  } catch (error) {\n    throw new ConfigurationAcquireFailedError();\n  }\n\n  return json;\n}\n\nfunction toQueryString(params) {\n  return Object.keys(params || {}).map(function (key) {\n    return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);\n  }).join('&');\n}\n\nmodule.exports.getConfiguration = getConfiguration;","map":{"version":3,"sources":["C:/Users/khouloud/Documents/PI/MERN_Stack_PI/node_modules/twilio-video/es5/ecs.js"],"names":["request","require","createTwilioError","ConfigurationAcquireFailedError","CONFIG_URL","getConfiguration","token","options","Error","Object","assign","configUrl","postData","url","headers","body","toQueryString","post","then","responseText","parseJsonTextFromECS","errorText","error","code","message","jsonText","json","JSON","parse","params","keys","map","key","encodeURIComponent","join","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAArB;;AACA,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,4BAAD,CAAP,CAAsCC,iBAA9D;;AACA,IAAIC,+BAA+B,GAAGF,OAAO,CAAC,4BAAD,CAAP,CAAsCE,+BAA5E;;AAEA,IAAIC,UAAU,GAAG,6CAAjB;AAEA;;;;;;;;;AAOG;;;;;;;;AAOH,SAASC,gBAAT,CAA0BC,KAA1B,EAAiCC,OAAjC,EAA0C;AACxC,MAAI,CAACD,KAAL,EAAY;AACV,UAAM,IAAIE,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAEDD,EAAAA,OAAO,GAAGE,MAAM,CAACC,MAAP,CAAc;AACtBC,IAAAA,SAAS,EAAEP;AADW,GAAd,EAEPG,OAFO,CAAV;AAIA,MAAIK,QAAQ,GAAG;AACbC,IAAAA,GAAG,EAAEN,OAAO,CAACI,SADA;AAEbG,IAAAA,OAAO,EAAE;AACP,wBAAkBR,KADX;AAEP,sBAAgB;AAFT;AAFI,GAAf;;AAQA,MAAIC,OAAO,CAACQ,IAAZ,EAAkB;AAChBH,IAAAA,QAAQ,CAACG,IAAT,GAAgBC,aAAa,CAACT,OAAO,CAACQ,IAAT,CAA7B;AACD;;AAED,SAAOf,OAAO,CAACiB,IAAR,CAAaL,QAAb,EAAuBM,IAAvB,CAA4B,UAAUC,YAAV,EAAwB;AACzD,WAAOC,oBAAoB,CAACD,YAAD,CAA3B;AACD,GAFM,EAEJ,UAAUE,SAAV,EAAqB;AACtB,QAAIC,KAAK,GAAGF,oBAAoB,CAACC,SAAD,CAAhC;AACA,UAAMnB,iBAAiB,CAACoB,KAAK,CAACC,IAAP,EAAaD,KAAK,CAACE,OAAnB,CAAvB;AACD,GALM,CAAP;AAMD;;AAED,SAASJ,oBAAT,CAA8BK,QAA9B,EAAwC;AACtC,MAAIC,IAAI,GAAG,IAAX;;AACA,MAAI;AACFA,IAAAA,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,QAAX,CAAP;AACD,GAFD,CAEE,OAAOH,KAAP,EAAc;AACd,UAAM,IAAInB,+BAAJ,EAAN;AACD;;AACD,SAAOuB,IAAP;AACD;;AAED,SAASV,aAAT,CAAuBa,MAAvB,EAA+B;AAC7B,SAAOpB,MAAM,CAACqB,IAAP,CAAYD,MAAM,IAAI,EAAtB,EAA0BE,GAA1B,CAA8B,UAAUC,GAAV,EAAe;AAClD,WAAOC,kBAAkB,CAACD,GAAD,CAAlB,GAA0B,GAA1B,GAAgCC,kBAAkB,CAACJ,MAAM,CAACG,GAAD,CAAP,CAAzD;AACD,GAFM,EAEJE,IAFI,CAEC,GAFD,CAAP;AAGD;;AAEDC,MAAM,CAACC,OAAP,CAAe/B,gBAAf,GAAkCA,gBAAlC","sourcesContent":["'use strict';\r\n\r\nvar request = require('./request');\r\nvar createTwilioError = require('./util/twilio-video-errors').createTwilioError;\r\nvar ConfigurationAcquireFailedError = require('./util/twilio-video-errors').ConfigurationAcquireFailedError;\r\n\r\nvar CONFIG_URL = 'https://ecs.us1.twilio.com/v1/Configuration';\r\n\r\n/**\r\n * Request a configuration setting for the specified JWT.\r\n * @param {String} token - A JWT String representing a valid AccessToken.\r\n * @param {?ECS.getConfigurationOptions} [options]\r\n * @returns {Promise<Object>} configuration - An unformatted map of\r\n *   configuration settings specific to the specified service.\r\n * @throws {TwilioError}\r\n*/ /**\r\n   * @typedef {Object} ECS.getConfigurationOptions\r\n   * @property {?Object} [body] - A valid JSON payload to send to the\r\n   *   ECS endpoint.\r\n   * @property {?String} [configUrl='https://ecs.us1.twilio.com/v1/Configuration'] - A\r\n   *   custom URL to POST ECS configuration requests to.\r\n   */\r\nfunction getConfiguration(token, options) {\r\n  if (!token) {\r\n    throw new Error('<String>token is a required argument.');\r\n  }\r\n\r\n  options = Object.assign({\r\n    configUrl: CONFIG_URL\r\n  }, options);\r\n\r\n  var postData = {\r\n    url: options.configUrl,\r\n    headers: {\r\n      'X-Twilio-Token': token,\r\n      'Content-Type': 'application/x-www-form-urlencoded'\r\n    }\r\n  };\r\n\r\n  if (options.body) {\r\n    postData.body = toQueryString(options.body);\r\n  }\r\n\r\n  return request.post(postData).then(function (responseText) {\r\n    return parseJsonTextFromECS(responseText);\r\n  }, function (errorText) {\r\n    var error = parseJsonTextFromECS(errorText);\r\n    throw createTwilioError(error.code, error.message);\r\n  });\r\n}\r\n\r\nfunction parseJsonTextFromECS(jsonText) {\r\n  var json = null;\r\n  try {\r\n    json = JSON.parse(jsonText);\r\n  } catch (error) {\r\n    throw new ConfigurationAcquireFailedError();\r\n  }\r\n  return json;\r\n}\r\n\r\nfunction toQueryString(params) {\r\n  return Object.keys(params || {}).map(function (key) {\r\n    return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);\r\n  }).join('&');\r\n}\r\n\r\nmodule.exports.getConfiguration = getConfiguration;"]},"metadata":{},"sourceType":"script"}