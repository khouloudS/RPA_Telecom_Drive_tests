{"ast":null,"code":"/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\n\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport { shimGetUserMedia } from './getusermedia';\nexport { shimGetDisplayMedia } from './getdisplaymedia';\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent && 'receiver' in window.RTCTrackEvent.prototype && !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {\n          receiver: this.receiver\n        };\n      }\n\n    });\n  }\n}\nexport function shimPeerConnection(window) {\n  const browserDetails = utils.detectBrowser(window);\n\n  if (typeof window !== 'object' || !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach(function (method) {\n      const nativeMethod = window.RTCPeerConnection.prototype[method];\n      const methodObj = {\n        [method]() {\n          arguments[0] = new (method === 'addIceCandidate' ? window.RTCIceCandidate : window.RTCSessionDescription)(arguments[0]);\n          return nativeMethod.apply(this, arguments);\n        }\n\n      };\n      window.RTCPeerConnection.prototype[method] = methodObj[method];\n    });\n  } // support for addIceCandidate(null or undefined)\n  // as well as ignoring {sdpMid, candidate: \"\"}\n\n\n  if (browserDetails.version < 68) {\n    const nativeAddIceCandidate = window.RTCPeerConnection.prototype.addIceCandidate;\n\n    window.RTCPeerConnection.prototype.addIceCandidate = function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n\n        return Promise.resolve();\n      } // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n\n\n      if (arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const _arguments = Array.prototype.slice.call(arguments),\n          selector = _arguments[0],\n          onSucc = _arguments[1],\n          onErr = _arguments[2];\n\n    return nativeGetStats.apply(this, [selector || null]).then(stats => {\n      if (browserDetails.version < 53 && !onSucc) {\n        // Shim only promise getStats with spec-hyphens in type names\n        // Leave callback version alone; misc old uses of forEach before Map\n        try {\n          stats.forEach(stat => {\n            stat.type = modernStatsTypes[stat.type] || stat.type;\n          });\n        } catch (e) {\n          if (e.name !== 'TypeError') {\n            throw e;\n          } // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n\n\n          stats.forEach((stat, i) => {\n            stats.set(i, Object.assign({}, stat, {\n              type: modernStatsTypes[stat.type] || stat.type\n            }));\n          });\n        }\n      }\n\n      return stats;\n    }).then(onSucc, onErr);\n  };\n}\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection && window.RTCRtpSender)) {\n    return;\n  }\n\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) : Promise.resolve(new Map());\n  };\n}\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection && window.RTCRtpSender)) {\n    return;\n  }\n\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection || 'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n\n  window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {\n    utils.deprecated('removeStream', 'removeTrack');\n    this.getSenders().forEach(sender => {\n      if (sender.track && stream.getTracks().includes(sender.track)) {\n        this.removeTrack(sender);\n      }\n    });\n  };\n}\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver = function addTransceiver() {\n      this.setParametersPromises = [];\n      const initParameters = arguments[1];\n      const shouldPerformCheck = initParameters && 'sendEncodings' in initParameters;\n\n      if (shouldPerformCheck) {\n        // If sendEncodings params are provided, validate grammar\n        initParameters.sendEncodings.forEach(encodingParam => {\n          if ('rid' in encodingParam) {\n            const ridRegex = /^[a-z0-9]{0,16}$/i;\n\n            if (!ridRegex.test(encodingParam.rid)) {\n              throw new TypeError('Invalid RID value provided.');\n            }\n          }\n\n          if ('scaleResolutionDownBy' in encodingParam) {\n            if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n              throw new RangeError('scale_resolution_down_by must be >= 1.0');\n            }\n          }\n\n          if ('maxFramerate' in encodingParam) {\n            if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n              throw new RangeError('max_framerate must be >= 0.0');\n            }\n          }\n        });\n      }\n\n      const transceiver = origAddTransceiver.apply(this, arguments);\n\n      if (shouldPerformCheck) {\n        // Check if the init options were applied. If not we do this in an\n        // asynchronous way and save the promise reference in a global object.\n        // This is an ugly hack, but at the same time is way more robust than\n        // checking the sender parameters before and after the createOffer\n        // Also note that after the createoffer we are not 100% sure that\n        // the params were asynchronously applied so we might miss the\n        // opportunity to recreate offer.\n        const sender = transceiver.sender;\n        const params = sender.getParameters();\n\n        if (!('encodings' in params)) {\n          params.encodings = initParameters.sendEncodings;\n          this.setParametersPromises.push(sender.setParameters(params).catch(() => {}));\n        }\n      }\n\n      return transceiver;\n    };\n  }\n}\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises).then(() => {\n        return origCreateOffer.apply(this, arguments);\n      }).finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n\n    return origCreateOffer.apply(this, arguments);\n  };\n}\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises).then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      }).finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n\n    return origCreateAnswer.apply(this, arguments);\n  };\n}","map":{"version":3,"sources":["C:/Users/khouloud/Documents/PI/MERN_Stack_PI/node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js"],"names":["utils","shimGetUserMedia","shimGetDisplayMedia","shimOnTrack","window","RTCTrackEvent","prototype","Object","defineProperty","get","receiver","shimPeerConnection","browserDetails","detectBrowser","RTCPeerConnection","mozRTCPeerConnection","version","forEach","method","nativeMethod","methodObj","arguments","RTCIceCandidate","RTCSessionDescription","apply","nativeAddIceCandidate","addIceCandidate","Promise","resolve","candidate","modernStatsTypes","inboundrtp","outboundrtp","candidatepair","localcandidate","remotecandidate","nativeGetStats","getStats","selector","onSucc","onErr","then","stats","stat","type","e","name","i","set","assign","shimSenderGetStats","RTCRtpSender","origGetSenders","getSenders","senders","sender","_pc","origAddTrack","addTrack","track","Map","shimReceiverGetStats","RTCRtpReceiver","origGetReceivers","getReceivers","receivers","wrapPeerConnectionEvent","srcElement","shimRemoveStream","removeStream","stream","deprecated","getTracks","includes","removeTrack","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","addTransceiver","setParametersPromises","initParameters","shouldPerformCheck","sendEncodings","encodingParam","ridRegex","test","rid","TypeError","parseFloat","scaleResolutionDownBy","RangeError","maxFramerate","transceiver","params","getParameters","encodings","push","setParameters","catch","shimCreateOffer","origCreateOffer","createOffer","length","all","finally","shimCreateAnswer","origCreateAnswer","createAnswer"],"mappings":"AAAA;;;;;;;;AAOA;AACA;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,UAAvB;AACA,SAAQC,gBAAR,QAA+B,gBAA/B;AACA,SAAQC,mBAAR,QAAkC,mBAAlC;AAEA,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAA6B;AAClC,MAAI,OAAOA,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACC,aAArC,IACC,cAAcD,MAAM,CAACC,aAAP,CAAqBC,SADpC,IAEA,EAAE,iBAAiBF,MAAM,CAACC,aAAP,CAAqBC,SAAxC,CAFJ,EAEwD;AACtDC,IAAAA,MAAM,CAACC,cAAP,CAAsBJ,MAAM,CAACC,aAAP,CAAqBC,SAA3C,EAAsD,aAAtD,EAAqE;AACnEG,MAAAA,GAAG,GAAG;AACJ,eAAO;AAACC,UAAAA,QAAQ,EAAE,KAAKA;AAAhB,SAAP;AACD;;AAHkE,KAArE;AAKD;AACF;AAED,OAAO,SAASC,kBAAT,CAA4BP,MAA5B,EAAoC;AACzC,QAAMQ,cAAc,GAAGZ,KAAK,CAACa,aAAN,CAAoBT,MAApB,CAAvB;;AAEA,MAAI,OAAOA,MAAP,KAAkB,QAAlB,IACA,EAAEA,MAAM,CAACU,iBAAP,IAA4BV,MAAM,CAACW,oBAArC,CADJ,EACgE;AAC9D,WAD8D,CACtD;AACT;;AACD,MAAI,CAACX,MAAM,CAACU,iBAAR,IAA6BV,MAAM,CAACW,oBAAxC,EAA8D;AAC5D;AACAX,IAAAA,MAAM,CAACU,iBAAP,GAA2BV,MAAM,CAACW,oBAAlC;AACD;;AAED,MAAIH,cAAc,CAACI,OAAf,GAAyB,EAA7B,EAAiC;AAC/B;AACA,KAAC,qBAAD,EAAwB,sBAAxB,EAAgD,iBAAhD,EACKC,OADL,CACa,UAASC,MAAT,EAAiB;AACxB,YAAMC,YAAY,GAAGf,MAAM,CAACU,iBAAP,CAAyBR,SAAzB,CAAmCY,MAAnC,CAArB;AACA,YAAME,SAAS,GAAG;AAAC,SAACF,MAAD,IAAW;AAC5BG,UAAAA,SAAS,CAAC,CAAD,CAAT,GAAe,KAAMH,MAAM,KAAK,iBAAZ,GAChBd,MAAM,CAACkB,eADS,GAEhBlB,MAAM,CAACmB,qBAFI,EAEmBF,SAAS,CAAC,CAAD,CAF5B,CAAf;AAGA,iBAAOF,YAAY,CAACK,KAAb,CAAmB,IAAnB,EAAyBH,SAAzB,CAAP;AACD;;AALiB,OAAlB;AAMAjB,MAAAA,MAAM,CAACU,iBAAP,CAAyBR,SAAzB,CAAmCY,MAAnC,IAA6CE,SAAS,CAACF,MAAD,CAAtD;AACD,KAVL;AAWD,GAzBwC,CA2BzC;AACA;;;AACA,MAAIN,cAAc,CAACI,OAAf,GAAyB,EAA7B,EAAiC;AAC/B,UAAMS,qBAAqB,GACvBrB,MAAM,CAACU,iBAAP,CAAyBR,SAAzB,CAAmCoB,eADvC;;AAEAtB,IAAAA,MAAM,CAACU,iBAAP,CAAyBR,SAAzB,CAAmCoB,eAAnC,GACA,SAASA,eAAT,GAA2B;AACzB,UAAI,CAACL,SAAS,CAAC,CAAD,CAAd,EAAmB;AACjB,YAAIA,SAAS,CAAC,CAAD,CAAb,EAAkB;AAChBA,UAAAA,SAAS,CAAC,CAAD,CAAT,CAAaG,KAAb,CAAmB,IAAnB;AACD;;AACD,eAAOG,OAAO,CAACC,OAAR,EAAP;AACD,OANwB,CAOzB;AACA;;;AACA,UAAIP,SAAS,CAAC,CAAD,CAAT,IAAgBA,SAAS,CAAC,CAAD,CAAT,CAAaQ,SAAb,KAA2B,EAA/C,EAAmD;AACjD,eAAOF,OAAO,CAACC,OAAR,EAAP;AACD;;AACD,aAAOH,qBAAqB,CAACD,KAAtB,CAA4B,IAA5B,EAAkCH,SAAlC,CAAP;AACD,KAdD;AAeD;;AAED,QAAMS,gBAAgB,GAAG;AACvBC,IAAAA,UAAU,EAAE,aADW;AAEvBC,IAAAA,WAAW,EAAE,cAFU;AAGvBC,IAAAA,aAAa,EAAE,gBAHQ;AAIvBC,IAAAA,cAAc,EAAE,iBAJO;AAKvBC,IAAAA,eAAe,EAAE;AALM,GAAzB;AAQA,QAAMC,cAAc,GAAGhC,MAAM,CAACU,iBAAP,CAAyBR,SAAzB,CAAmC+B,QAA1D;;AACAjC,EAAAA,MAAM,CAACU,iBAAP,CAAyBR,SAAzB,CAAmC+B,QAAnC,GAA8C,SAASA,QAAT,GAAoB;AAAA,kDAC9BhB,SAD8B;AAAA,UACzDiB,QADyD;AAAA,UAC/CC,MAD+C;AAAA,UACvCC,KADuC;;AAEhE,WAAOJ,cAAc,CAACZ,KAAf,CAAqB,IAArB,EAA2B,CAACc,QAAQ,IAAI,IAAb,CAA3B,EACJG,IADI,CACCC,KAAK,IAAI;AACb,UAAI9B,cAAc,CAACI,OAAf,GAAyB,EAAzB,IAA+B,CAACuB,MAApC,EAA4C;AAC1C;AACA;AACA,YAAI;AACFG,UAAAA,KAAK,CAACzB,OAAN,CAAc0B,IAAI,IAAI;AACpBA,YAAAA,IAAI,CAACC,IAAL,GAAYd,gBAAgB,CAACa,IAAI,CAACC,IAAN,CAAhB,IAA+BD,IAAI,CAACC,IAAhD;AACD,WAFD;AAGD,SAJD,CAIE,OAAOC,CAAP,EAAU;AACV,cAAIA,CAAC,CAACC,IAAF,KAAW,WAAf,EAA4B;AAC1B,kBAAMD,CAAN;AACD,WAHS,CAIV;;;AACAH,UAAAA,KAAK,CAACzB,OAAN,CAAc,CAAC0B,IAAD,EAAOI,CAAP,KAAa;AACzBL,YAAAA,KAAK,CAACM,GAAN,CAAUD,CAAV,EAAaxC,MAAM,CAAC0C,MAAP,CAAc,EAAd,EAAkBN,IAAlB,EAAwB;AACnCC,cAAAA,IAAI,EAAEd,gBAAgB,CAACa,IAAI,CAACC,IAAN,CAAhB,IAA+BD,IAAI,CAACC;AADP,aAAxB,CAAb;AAGD,WAJD;AAKD;AACF;;AACD,aAAOF,KAAP;AACD,KAtBI,EAuBJD,IAvBI,CAuBCF,MAvBD,EAuBSC,KAvBT,CAAP;AAwBD,GA1BD;AA2BD;AAED,OAAO,SAASU,kBAAT,CAA4B9C,MAA5B,EAAoC;AACzC,MAAI,EAAE,OAAOA,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACU,iBAArC,IACFV,MAAM,CAAC+C,YADP,CAAJ,EAC0B;AACxB;AACD;;AACD,MAAI/C,MAAM,CAAC+C,YAAP,IAAuB,cAAc/C,MAAM,CAAC+C,YAAP,CAAoB7C,SAA7D,EAAwE;AACtE;AACD;;AACD,QAAM8C,cAAc,GAAGhD,MAAM,CAACU,iBAAP,CAAyBR,SAAzB,CAAmC+C,UAA1D;;AACA,MAAID,cAAJ,EAAoB;AAClBhD,IAAAA,MAAM,CAACU,iBAAP,CAAyBR,SAAzB,CAAmC+C,UAAnC,GAAgD,SAASA,UAAT,GAAsB;AACpE,YAAMC,OAAO,GAAGF,cAAc,CAAC5B,KAAf,CAAqB,IAArB,EAA2B,EAA3B,CAAhB;AACA8B,MAAAA,OAAO,CAACrC,OAAR,CAAgBsC,MAAM,IAAIA,MAAM,CAACC,GAAP,GAAa,IAAvC;AACA,aAAOF,OAAP;AACD,KAJD;AAKD;;AAED,QAAMG,YAAY,GAAGrD,MAAM,CAACU,iBAAP,CAAyBR,SAAzB,CAAmCoD,QAAxD;;AACA,MAAID,YAAJ,EAAkB;AAChBrD,IAAAA,MAAM,CAACU,iBAAP,CAAyBR,SAAzB,CAAmCoD,QAAnC,GAA8C,SAASA,QAAT,GAAoB;AAChE,YAAMH,MAAM,GAAGE,YAAY,CAACjC,KAAb,CAAmB,IAAnB,EAAyBH,SAAzB,CAAf;AACAkC,MAAAA,MAAM,CAACC,GAAP,GAAa,IAAb;AACA,aAAOD,MAAP;AACD,KAJD;AAKD;;AACDnD,EAAAA,MAAM,CAAC+C,YAAP,CAAoB7C,SAApB,CAA8B+B,QAA9B,GAAyC,SAASA,QAAT,GAAoB;AAC3D,WAAO,KAAKsB,KAAL,GAAa,KAAKH,GAAL,CAASnB,QAAT,CAAkB,KAAKsB,KAAvB,CAAb,GACHhC,OAAO,CAACC,OAAR,CAAgB,IAAIgC,GAAJ,EAAhB,CADJ;AAED,GAHD;AAID;AAED,OAAO,SAASC,oBAAT,CAA8BzD,MAA9B,EAAsC;AAC3C,MAAI,EAAE,OAAOA,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACU,iBAArC,IACFV,MAAM,CAAC+C,YADP,CAAJ,EAC0B;AACxB;AACD;;AACD,MAAI/C,MAAM,CAAC+C,YAAP,IAAuB,cAAc/C,MAAM,CAAC0D,cAAP,CAAsBxD,SAA/D,EAA0E;AACxE;AACD;;AACD,QAAMyD,gBAAgB,GAAG3D,MAAM,CAACU,iBAAP,CAAyBR,SAAzB,CAAmC0D,YAA5D;;AACA,MAAID,gBAAJ,EAAsB;AACpB3D,IAAAA,MAAM,CAACU,iBAAP,CAAyBR,SAAzB,CAAmC0D,YAAnC,GAAkD,SAASA,YAAT,GAAwB;AACxE,YAAMC,SAAS,GAAGF,gBAAgB,CAACvC,KAAjB,CAAuB,IAAvB,EAA6B,EAA7B,CAAlB;AACAyC,MAAAA,SAAS,CAAChD,OAAV,CAAkBP,QAAQ,IAAIA,QAAQ,CAAC8C,GAAT,GAAe,IAA7C;AACA,aAAOS,SAAP;AACD,KAJD;AAKD;;AACDjE,EAAAA,KAAK,CAACkE,uBAAN,CAA8B9D,MAA9B,EAAsC,OAAtC,EAA+CyC,CAAC,IAAI;AAClDA,IAAAA,CAAC,CAACnC,QAAF,CAAW8C,GAAX,GAAiBX,CAAC,CAACsB,UAAnB;AACA,WAAOtB,CAAP;AACD,GAHD;;AAIAzC,EAAAA,MAAM,CAAC0D,cAAP,CAAsBxD,SAAtB,CAAgC+B,QAAhC,GAA2C,SAASA,QAAT,GAAoB;AAC7D,WAAO,KAAKmB,GAAL,CAASnB,QAAT,CAAkB,KAAKsB,KAAvB,CAAP;AACD,GAFD;AAGD;AAED,OAAO,SAASS,gBAAT,CAA0BhE,MAA1B,EAAkC;AACvC,MAAI,CAACA,MAAM,CAACU,iBAAR,IACA,kBAAkBV,MAAM,CAACU,iBAAP,CAAyBR,SAD/C,EAC0D;AACxD;AACD;;AACDF,EAAAA,MAAM,CAACU,iBAAP,CAAyBR,SAAzB,CAAmC+D,YAAnC,GACE,SAASA,YAAT,CAAsBC,MAAtB,EAA8B;AAC5BtE,IAAAA,KAAK,CAACuE,UAAN,CAAiB,cAAjB,EAAiC,aAAjC;AACA,SAAKlB,UAAL,GAAkBpC,OAAlB,CAA0BsC,MAAM,IAAI;AAClC,UAAIA,MAAM,CAACI,KAAP,IAAgBW,MAAM,CAACE,SAAP,GAAmBC,QAAnB,CAA4BlB,MAAM,CAACI,KAAnC,CAApB,EAA+D;AAC7D,aAAKe,WAAL,CAAiBnB,MAAjB;AACD;AACF,KAJD;AAKD,GARH;AASD;AAED,OAAO,SAASoB,kBAAT,CAA4BvE,MAA5B,EAAoC;AACzC;AACA;AACA,MAAIA,MAAM,CAACwE,WAAP,IAAsB,CAACxE,MAAM,CAACyE,cAAlC,EAAkD;AAChDzE,IAAAA,MAAM,CAACyE,cAAP,GAAwBzE,MAAM,CAACwE,WAA/B;AACD;AACF;AAED,OAAO,SAASE,kBAAT,CAA4B1E,MAA5B,EAAoC;AACzC;AACA;AACA;AACA,MAAI,EAAE,OAAOA,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACU,iBAAvC,CAAJ,EAA+D;AAC7D;AACD;;AACD,QAAMiE,kBAAkB,GAAG3E,MAAM,CAACU,iBAAP,CAAyBR,SAAzB,CAAmC0E,cAA9D;;AACA,MAAID,kBAAJ,EAAwB;AACtB3E,IAAAA,MAAM,CAACU,iBAAP,CAAyBR,SAAzB,CAAmC0E,cAAnC,GACE,SAASA,cAAT,GAA0B;AACxB,WAAKC,qBAAL,GAA6B,EAA7B;AACA,YAAMC,cAAc,GAAG7D,SAAS,CAAC,CAAD,CAAhC;AACA,YAAM8D,kBAAkB,GAAGD,cAAc,IACf,mBAAmBA,cAD7C;;AAEA,UAAIC,kBAAJ,EAAwB;AACtB;AACAD,QAAAA,cAAc,CAACE,aAAf,CAA6BnE,OAA7B,CAAsCoE,aAAD,IAAmB;AACtD,cAAI,SAASA,aAAb,EAA4B;AAC1B,kBAAMC,QAAQ,GAAG,mBAAjB;;AACA,gBAAI,CAACA,QAAQ,CAACC,IAAT,CAAcF,aAAa,CAACG,GAA5B,CAAL,EAAuC;AACrC,oBAAM,IAAIC,SAAJ,CAAc,6BAAd,CAAN;AACD;AACF;;AACD,cAAI,2BAA2BJ,aAA/B,EAA8C;AAC5C,gBAAI,EAAEK,UAAU,CAACL,aAAa,CAACM,qBAAf,CAAV,IAAmD,GAArD,CAAJ,EAA+D;AAC7D,oBAAM,IAAIC,UAAJ,CAAe,yCAAf,CAAN;AACD;AACF;;AACD,cAAI,kBAAkBP,aAAtB,EAAqC;AACnC,gBAAI,EAAEK,UAAU,CAACL,aAAa,CAACQ,YAAf,CAAV,IAA0C,CAA5C,CAAJ,EAAoD;AAClD,oBAAM,IAAID,UAAJ,CAAe,8BAAf,CAAN;AACD;AACF;AACF,SAjBD;AAkBD;;AACD,YAAME,WAAW,GAAGf,kBAAkB,CAACvD,KAAnB,CAAyB,IAAzB,EAA+BH,SAA/B,CAApB;;AACA,UAAI8D,kBAAJ,EAAwB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AAPsB,cAQf5B,MARe,GAQLuC,WARK,CAQfvC,MARe;AAStB,cAAMwC,MAAM,GAAGxC,MAAM,CAACyC,aAAP,EAAf;;AACA,YAAI,EAAE,eAAeD,MAAjB,CAAJ,EAA8B;AAC5BA,UAAAA,MAAM,CAACE,SAAP,GAAmBf,cAAc,CAACE,aAAlC;AACA,eAAKH,qBAAL,CAA2BiB,IAA3B,CACE3C,MAAM,CAAC4C,aAAP,CAAqBJ,MAArB,EACCK,KADD,CACO,MAAM,CAAE,CADf,CADF;AAID;AACF;;AACD,aAAON,WAAP;AACD,KA/CH;AAgDD;AACF;AAED,OAAO,SAASO,eAAT,CAAyBjG,MAAzB,EAAiC;AACtC;AACA;AACA;AACA,MAAI,EAAE,OAAOA,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACU,iBAAvC,CAAJ,EAA+D;AAC7D;AACD;;AACD,QAAMwF,eAAe,GAAGlG,MAAM,CAACU,iBAAP,CAAyBR,SAAzB,CAAmCiG,WAA3D;;AACAnG,EAAAA,MAAM,CAACU,iBAAP,CAAyBR,SAAzB,CAAmCiG,WAAnC,GAAiD,SAASA,WAAT,GAAuB;AACtE,QAAI,KAAKtB,qBAAL,IAA8B,KAAKA,qBAAL,CAA2BuB,MAA7D,EAAqE;AACnE,aAAO7E,OAAO,CAAC8E,GAAR,CAAY,KAAKxB,qBAAjB,EACNxC,IADM,CACD,MAAM;AACV,eAAO6D,eAAe,CAAC9E,KAAhB,CAAsB,IAAtB,EAA4BH,SAA5B,CAAP;AACD,OAHM,EAINqF,OAJM,CAIE,MAAM;AACb,aAAKzB,qBAAL,GAA6B,EAA7B;AACD,OANM,CAAP;AAOD;;AACD,WAAOqB,eAAe,CAAC9E,KAAhB,CAAsB,IAAtB,EAA4BH,SAA5B,CAAP;AACD,GAXD;AAYD;AAED,OAAO,SAASsF,gBAAT,CAA0BvG,MAA1B,EAAkC;AACvC;AACA;AACA;AACA,MAAI,EAAE,OAAOA,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACU,iBAAvC,CAAJ,EAA+D;AAC7D;AACD;;AACD,QAAM8F,gBAAgB,GAAGxG,MAAM,CAACU,iBAAP,CAAyBR,SAAzB,CAAmCuG,YAA5D;;AACAzG,EAAAA,MAAM,CAACU,iBAAP,CAAyBR,SAAzB,CAAmCuG,YAAnC,GAAkD,SAASA,YAAT,GAAwB;AACxE,QAAI,KAAK5B,qBAAL,IAA8B,KAAKA,qBAAL,CAA2BuB,MAA7D,EAAqE;AACnE,aAAO7E,OAAO,CAAC8E,GAAR,CAAY,KAAKxB,qBAAjB,EACNxC,IADM,CACD,MAAM;AACV,eAAOmE,gBAAgB,CAACpF,KAAjB,CAAuB,IAAvB,EAA6BH,SAA7B,CAAP;AACD,OAHM,EAINqF,OAJM,CAIE,MAAM;AACb,aAAKzB,qBAAL,GAA6B,EAA7B;AACD,OANM,CAAP;AAOD;;AACD,WAAO2B,gBAAgB,CAACpF,KAAjB,CAAuB,IAAvB,EAA6BH,SAA7B,CAAP;AACD,GAXD;AAYD","sourcesContent":["/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nimport * as utils from '../utils';\r\nexport {shimGetUserMedia} from './getusermedia';\r\nexport {shimGetDisplayMedia} from './getdisplaymedia';\r\n\r\nexport function shimOnTrack(window) {\r\n  if (typeof window === 'object' && window.RTCTrackEvent &&\r\n      ('receiver' in window.RTCTrackEvent.prototype) &&\r\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\r\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\r\n      get() {\r\n        return {receiver: this.receiver};\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function shimPeerConnection(window) {\r\n  const browserDetails = utils.detectBrowser(window);\r\n\r\n  if (typeof window !== 'object' ||\r\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\r\n    return; // probably media.peerconnection.enabled=false in about:config\r\n  }\r\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\r\n    // very basic support for old versions.\r\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\r\n  }\r\n\r\n  if (browserDetails.version < 53) {\r\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\r\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\r\n        .forEach(function(method) {\r\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\r\n          const methodObj = {[method]() {\r\n            arguments[0] = new ((method === 'addIceCandidate') ?\r\n                window.RTCIceCandidate :\r\n                window.RTCSessionDescription)(arguments[0]);\r\n            return nativeMethod.apply(this, arguments);\r\n          }};\r\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\r\n        });\r\n  }\r\n\r\n  // support for addIceCandidate(null or undefined)\r\n  // as well as ignoring {sdpMid, candidate: \"\"}\r\n  if (browserDetails.version < 68) {\r\n    const nativeAddIceCandidate =\r\n        window.RTCPeerConnection.prototype.addIceCandidate;\r\n    window.RTCPeerConnection.prototype.addIceCandidate =\r\n    function addIceCandidate() {\r\n      if (!arguments[0]) {\r\n        if (arguments[1]) {\r\n          arguments[1].apply(null);\r\n        }\r\n        return Promise.resolve();\r\n      }\r\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\r\n      // in older versions.\r\n      if (arguments[0] && arguments[0].candidate === '') {\r\n        return Promise.resolve();\r\n      }\r\n      return nativeAddIceCandidate.apply(this, arguments);\r\n    };\r\n  }\r\n\r\n  const modernStatsTypes = {\r\n    inboundrtp: 'inbound-rtp',\r\n    outboundrtp: 'outbound-rtp',\r\n    candidatepair: 'candidate-pair',\r\n    localcandidate: 'local-candidate',\r\n    remotecandidate: 'remote-candidate'\r\n  };\r\n\r\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\r\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\r\n    const [selector, onSucc, onErr] = arguments;\r\n    return nativeGetStats.apply(this, [selector || null])\r\n      .then(stats => {\r\n        if (browserDetails.version < 53 && !onSucc) {\r\n          // Shim only promise getStats with spec-hyphens in type names\r\n          // Leave callback version alone; misc old uses of forEach before Map\r\n          try {\r\n            stats.forEach(stat => {\r\n              stat.type = modernStatsTypes[stat.type] || stat.type;\r\n            });\r\n          } catch (e) {\r\n            if (e.name !== 'TypeError') {\r\n              throw e;\r\n            }\r\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\r\n            stats.forEach((stat, i) => {\r\n              stats.set(i, Object.assign({}, stat, {\r\n                type: modernStatsTypes[stat.type] || stat.type\r\n              }));\r\n            });\r\n          }\r\n        }\r\n        return stats;\r\n      })\r\n      .then(onSucc, onErr);\r\n  };\r\n}\r\n\r\nexport function shimSenderGetStats(window) {\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\r\n      window.RTCRtpSender)) {\r\n    return;\r\n  }\r\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\r\n    return;\r\n  }\r\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\r\n  if (origGetSenders) {\r\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\r\n      const senders = origGetSenders.apply(this, []);\r\n      senders.forEach(sender => sender._pc = this);\r\n      return senders;\r\n    };\r\n  }\r\n\r\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\r\n  if (origAddTrack) {\r\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\r\n      const sender = origAddTrack.apply(this, arguments);\r\n      sender._pc = this;\r\n      return sender;\r\n    };\r\n  }\r\n  window.RTCRtpSender.prototype.getStats = function getStats() {\r\n    return this.track ? this._pc.getStats(this.track) :\r\n        Promise.resolve(new Map());\r\n  };\r\n}\r\n\r\nexport function shimReceiverGetStats(window) {\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\r\n      window.RTCRtpSender)) {\r\n    return;\r\n  }\r\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\r\n    return;\r\n  }\r\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\r\n  if (origGetReceivers) {\r\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\r\n      const receivers = origGetReceivers.apply(this, []);\r\n      receivers.forEach(receiver => receiver._pc = this);\r\n      return receivers;\r\n    };\r\n  }\r\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\r\n    e.receiver._pc = e.srcElement;\r\n    return e;\r\n  });\r\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\r\n    return this._pc.getStats(this.track);\r\n  };\r\n}\r\n\r\nexport function shimRemoveStream(window) {\r\n  if (!window.RTCPeerConnection ||\r\n      'removeStream' in window.RTCPeerConnection.prototype) {\r\n    return;\r\n  }\r\n  window.RTCPeerConnection.prototype.removeStream =\r\n    function removeStream(stream) {\r\n      utils.deprecated('removeStream', 'removeTrack');\r\n      this.getSenders().forEach(sender => {\r\n        if (sender.track && stream.getTracks().includes(sender.track)) {\r\n          this.removeTrack(sender);\r\n        }\r\n      });\r\n    };\r\n}\r\n\r\nexport function shimRTCDataChannel(window) {\r\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\r\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\r\n  if (window.DataChannel && !window.RTCDataChannel) {\r\n    window.RTCDataChannel = window.DataChannel;\r\n  }\r\n}\r\n\r\nexport function shimAddTransceiver(window) {\r\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\r\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\r\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\r\n    return;\r\n  }\r\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\r\n  if (origAddTransceiver) {\r\n    window.RTCPeerConnection.prototype.addTransceiver =\r\n      function addTransceiver() {\r\n        this.setParametersPromises = [];\r\n        const initParameters = arguments[1];\r\n        const shouldPerformCheck = initParameters &&\r\n                                  'sendEncodings' in initParameters;\r\n        if (shouldPerformCheck) {\r\n          // If sendEncodings params are provided, validate grammar\r\n          initParameters.sendEncodings.forEach((encodingParam) => {\r\n            if ('rid' in encodingParam) {\r\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\r\n              if (!ridRegex.test(encodingParam.rid)) {\r\n                throw new TypeError('Invalid RID value provided.');\r\n              }\r\n            }\r\n            if ('scaleResolutionDownBy' in encodingParam) {\r\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\r\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\r\n              }\r\n            }\r\n            if ('maxFramerate' in encodingParam) {\r\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\r\n                throw new RangeError('max_framerate must be >= 0.0');\r\n              }\r\n            }\r\n          });\r\n        }\r\n        const transceiver = origAddTransceiver.apply(this, arguments);\r\n        if (shouldPerformCheck) {\r\n          // Check if the init options were applied. If not we do this in an\r\n          // asynchronous way and save the promise reference in a global object.\r\n          // This is an ugly hack, but at the same time is way more robust than\r\n          // checking the sender parameters before and after the createOffer\r\n          // Also note that after the createoffer we are not 100% sure that\r\n          // the params were asynchronously applied so we might miss the\r\n          // opportunity to recreate offer.\r\n          const {sender} = transceiver;\r\n          const params = sender.getParameters();\r\n          if (!('encodings' in params)) {\r\n            params.encodings = initParameters.sendEncodings;\r\n            this.setParametersPromises.push(\r\n              sender.setParameters(params)\r\n              .catch(() => {})\r\n            );\r\n          }\r\n        }\r\n        return transceiver;\r\n      };\r\n  }\r\n}\r\n\r\nexport function shimCreateOffer(window) {\r\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\r\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\r\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\r\n    return;\r\n  }\r\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\r\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\r\n    if (this.setParametersPromises && this.setParametersPromises.length) {\r\n      return Promise.all(this.setParametersPromises)\r\n      .then(() => {\r\n        return origCreateOffer.apply(this, arguments);\r\n      })\r\n      .finally(() => {\r\n        this.setParametersPromises = [];\r\n      });\r\n    }\r\n    return origCreateOffer.apply(this, arguments);\r\n  };\r\n}\r\n\r\nexport function shimCreateAnswer(window) {\r\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\r\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\r\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\r\n    return;\r\n  }\r\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\r\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\r\n    if (this.setParametersPromises && this.setParametersPromises.length) {\r\n      return Promise.all(this.setParametersPromises)\r\n      .then(() => {\r\n        return origCreateAnswer.apply(this, arguments);\r\n      })\r\n      .finally(() => {\r\n        this.setParametersPromises = [];\r\n      });\r\n    }\r\n    return origCreateAnswer.apply(this, arguments);\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}