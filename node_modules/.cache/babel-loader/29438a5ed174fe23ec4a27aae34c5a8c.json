{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\khouloud\\\\Documents\\\\PI\\\\MERN_Stack_PI\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\khouloud\\\\Documents\\\\PI\\\\MERN_Stack_PI\\\\src\\\\views\\\\driver\\\\Maps.js\";\nimport React from 'react';\nimport { withGoogleMap, withScriptjs, GoogleMap, Polyline, Marker } from 'react-google-maps';\n\nclass Map extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      progress: []\n    };\n    this.path = [{\n      lat: 10.198707934404316,\n      lng: 36.776209298858504\n    }, {\n      lat: 10.200233776057663,\n      lng: 36.777431491380185\n    }, {\n      lat: 10.20175961771101,\n      lng: 36.777431491380185\n    }, {\n      lat: 10.20328554318339,\n      lng: 36.776209298858504\n    }, {\n      lat: 10.206337310309115,\n      lng: 36.776209298858504\n    }, {\n      lat: 10.20786315196246,\n      lng: 36.776209298858504\n    }, {\n      lat: 10.20938907743484,\n      lng: 36.776209298858504\n    }, {\n      lat: 10.212440844560566,\n      lng: 36.77498708684983\n    }, {\n      lat: 10.213966686213913,\n      lng: 36.77498708684983\n    }, {\n      lat: 10.21549252786726,\n      lng: 36.77498708684983\n    }, {\n      lat: 10.217018453339639,\n      lng: 36.77498708684983\n    }, {\n      lat: 10.218544294992986,\n      lng: 36.77498708684983\n    }, {\n      lat: 10.220070220465365,\n      lng: 36.77376485535446\n    }, {\n      lat: 10.22159606211871,\n      lng: 36.77376485535446\n    }, {\n      lat: 10.22312198759109,\n      lng: 36.77376485535446\n    }, {\n      lat: 10.226173754716816,\n      lng: 36.772542604372575\n    }, {\n      lat: 10.227699596370163,\n      lng: 36.77132033390444\n    }, {\n      lat: 10.22922543802351,\n      lng: 36.77132033390444\n    }, {\n      lat: 10.230751363495889,\n      lng: 36.77009804395031\n    }, {\n      lat: 10.232277205149236,\n      lng: 36.77009804395031\n    }, {\n      lat: 10.233803130621613,\n      lng: 36.768875734510445\n    }, {\n      lat: 10.236854897747339,\n      lng: 36.768875734510445\n    }, {\n      lat: 10.23838073940069,\n      lng: 36.768875734510445\n    }, {\n      lat: 10.239906664873066,\n      lng: 36.76765343915747\n    }, {\n      lat: 10.241432506526413,\n      lng: 36.76765343915747\n    }, {\n      lat: 10.244484273652139,\n      lng: 36.76765343915747\n    }, {\n      lat: 10.247536040777863,\n      lng: 36.76520872285218\n    }, {\n      lat: 10.249061882431212,\n      lng: 36.76520872285218\n    }, {\n      lat: 10.252113649556938,\n      lng: 36.76520872285218\n    }, {\n      lat: 10.253639575029316,\n      lng: 36.76643109074732\n    }, {\n      lat: 10.255165416682663,\n      lng: 36.76643109074732\n    }, {\n      lat: 10.259743025461736,\n      lng: 36.76643109074732\n    }, {\n      lat: 10.261268950934117,\n      lng: 36.76643109074732\n    }, {\n      lat: 10.262794792587462,\n      lng: 36.76643109074732\n    }, {\n      lat: 10.264320718059842,\n      lng: 36.76765343915747\n    }];\n    this.velocity = 5;\n    this.initialDate = new Date();\n    this.color = \"\";\n    this.arr = [];\n    this.markerRed = [];\n    this.imageFlag = 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png';\n    this.image = 'https://img.icons8.com/flat_round/20/000000/error--v1.png';\n    this.imageCar = 'https://img.icons8.com/offices/30/000000/rv-campground.png';\n\n    this.getDistance = () => {\n      // seconds between when the component loaded and now\n      const differentInTime = (new Date() - this.initialDate) / 1000; // pass to seconds\n\n      return differentInTime * this.velocity; // d = v*t -- thanks Newton!\n    };\n\n    this.componentDidMount = () => {\n      this.interval = window.setInterval(this.moveObject, 1000);\n    };\n\n    this.componentWillUnmount = () => {\n      window.clearInterval(this.interval);\n    };\n\n    this.moveObject = () => {\n      const distance = this.getDistance();\n\n      if (!distance) {\n        return;\n      }\n      /*function sleep(milliseconds) {\r\n          const date = Date.now();\r\n          let currentDate = null;\r\n          do {\r\n              currentDate = Date.now();\r\n          } while (currentDate - date < milliseconds);\r\n      }*/\n\n\n      let progress = this.path.filter(coordinates => coordinates.distance < distance);\n      const nextLine = this.path.find(coordinates => coordinates.distance > distance);\n      var random = 0;\n      var count = 0; //var markerGreen;\n\n      if (!nextLine) {\n        this.setState({\n          progress\n        });\n        return; // it's the end!\n      }\n\n      const lastLine = progress[progress.length - 1];\n      const lastLineLatLng = new window.google.maps.LatLng(lastLine.lat, lastLine.lng);\n      const nextLineLatLng = new window.google.maps.LatLng(nextLine.lat, nextLine.lng); // distance of this line\n\n      const totalDistance = nextLine.distance - lastLine.distance;\n      const percentage = (distance - lastLine.distance) / totalDistance;\n      const position = window.google.maps.geometry.spherical.interpolate(lastLineLatLng, nextLineLatLng, percentage);\n\n      if (count % 5 === 0) {\n        random = Math.random();\n\n        if (random < 0.5) {\n          random = Math.floor(random);\n        } else {\n          random = Math.ceil(random);\n        }\n\n        if (random === 0) {\n          console.log(\"red\"); // this.polylineDrawRed =   <Polyline path={this.state.progress} options={{ strokeColor: \"#FF0000\"}} />\n          //console.log(position.lat()+\" , \"+ position.lng())\n\n          this.arr.push({\n            lat: position.lat(),\n            lng: position.lng()\n          });\n          this.markerRed.push(React.createElement(Marker, {\n            position: this.arr[1],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 224\n            },\n            __self: this\n          }));\n          progress = progress.concat(position);\n          this.setState({\n            progress\n          });\n        } else {\n          console.log(\"green\");\n          this.polylineDrawGreen = React.createElement(Polyline, {\n            path: this.state.progress,\n            options: {\n              strokeColor: \"#9efd38 \"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 230\n            },\n            __self: this\n          });\n          progress = progress.concat(position); //  this.setState({progress});\n\n          console.log(!nextLine);\n        }\n\n        this.setState({\n          progress\n        });\n        console.log(random); //sleep(1000)\n        // console.log(this.state.progress)\n      } //this.setState({ progress });\n\n    };\n\n    this.componentWillMount = () => {\n      this.path = this.path.map((coordinates, i, array) => {\n        if (i === 0) {\n          return _objectSpread({}, coordinates, {\n            distance: 0\n          }); // it begins here!\n        }\n\n        const lat1 = coordinates.lat,\n              lng1 = coordinates.lng;\n        const latLong1 = new window.google.maps.LatLng(lat1, lng1);\n        const _array$ = array[0],\n              lat2 = _array$.lat,\n              lng2 = _array$.lng;\n        const latLong2 = new window.google.maps.LatLng(lat2, lng2); // in meters:\n\n        const distance = window.google.maps.geometry.spherical.computeDistanceBetween(latLong1, latLong2);\n        return _objectSpread({}, coordinates, {\n          distance\n        });\n      });\n    };\n\n    this.render = () => {\n      return React.createElement(GoogleMap, {\n        defaultZoom: 16,\n        defaultCenter: {\n          lat: 18.566516,\n          lng: -68.435996\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, this.state.progress && React.createElement(React.Fragment, null, React.createElement(Marker, {\n        position: this.path[0],\n        icon: this.imageFlag,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      }), React.createElement(Marker, {\n        position: this.path[this.path.length - 1],\n        icon: this.imageFlag,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }), this.polylineDrawGreen, React.createElement(Marker, {\n        position: this.state.progress[this.state.progress.length - 1],\n        icon: this.imageCar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }), this.arr.map((value, index) => {\n        return React.createElement(Marker, {\n          position: this.arr[index],\n          icon: this.image,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 292\n          },\n          __self: this\n        });\n      })));\n    };\n  }\n\n}\n\nconst MapComponent = withScriptjs(withGoogleMap(Map));\nexport default (() => React.createElement(MapComponent, {\n  googleMapURL: \"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\",\n  loadingElement: React.createElement(\"div\", {\n    style: {\n      height: \"100%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311\n    },\n    __self: this\n  }),\n  containerElement: React.createElement(\"div\", {\n    style: {\n      height: \"650px\",\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312\n    },\n    __self: this\n  }),\n  mapElement: React.createElement(\"div\", {\n    style: {\n      height: \"100%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313\n    },\n    __self: this\n  }),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 309\n  },\n  __self: this\n}));","map":{"version":3,"sources":["C:/Users/khouloud/Documents/PI/MERN_Stack_PI/src/views/driver/Maps.js"],"names":["React","withGoogleMap","withScriptjs","GoogleMap","Polyline","Marker","Map","Component","state","progress","path","lat","lng","velocity","initialDate","Date","color","arr","markerRed","imageFlag","image","imageCar","getDistance","differentInTime","componentDidMount","interval","window","setInterval","moveObject","componentWillUnmount","clearInterval","distance","filter","coordinates","nextLine","find","random","count","setState","lastLine","length","lastLineLatLng","google","maps","LatLng","nextLineLatLng","totalDistance","percentage","position","geometry","spherical","interpolate","Math","floor","ceil","console","log","push","concat","polylineDrawGreen","strokeColor","componentWillMount","map","i","array","lat1","lng1","latLong1","lat2","lng2","latLong2","computeDistanceBetween","render","value","index","MapComponent","height","width"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { withGoogleMap, withScriptjs, GoogleMap, Polyline, Marker } from 'react-google-maps'\r\n\r\nclass Map extends React.Component {\r\n    state = {\r\n        progress: [],\r\n    }\r\n\r\n    path = [\r\n        {lat: 10.198707934404316, lng: 36.776209298858504},\r\n        {lat: 10.200233776057663, lng: 36.777431491380185},\r\n        {lat: 10.20175961771101, lng: 36.777431491380185},\r\n        {lat: 10.20328554318339, lng: 36.776209298858504},\r\n        {lat: 10.206337310309115, lng: 36.776209298858504},\r\n        {lat:\r\n                10.20786315196246, lng:\r\n                36.776209298858504\r\n        },\r\n        {lat:\r\n                10.20938907743484, lng:\r\n                36.776209298858504\r\n        },\r\n        {lat:\r\n                10.212440844560566, lng:\r\n                36.77498708684983\r\n        },\r\n        {lat:\r\n                10.213966686213913, lng:\r\n                36.77498708684983\r\n        },\r\n        {lat:\r\n                10.21549252786726, lng:\r\n                36.77498708684983\r\n        },\r\n        {lat:\r\n                10.217018453339639, lng:\r\n                36.77498708684983\r\n        },\r\n        {lat:\r\n                10.218544294992986, lng:\r\n                36.77498708684983\r\n        },\r\n        {lat:\r\n                10.220070220465365, lng:\r\n                36.77376485535446\r\n        },\r\n        {lat:\r\n                10.22159606211871, lng:\r\n                36.77376485535446\r\n        },\r\n        {lat:\r\n                10.22312198759109, lng:\r\n                36.77376485535446\r\n        },\r\n        {lat:\r\n                10.226173754716816, lng:\r\n                36.772542604372575\r\n        },\r\n        {lat:\r\n                10.227699596370163, lng:\r\n                36.77132033390444\r\n        },\r\n        {lat:\r\n                10.22922543802351, lng:\r\n                36.77132033390444\r\n        },\r\n        {lat:\r\n                10.230751363495889, lng:\r\n                36.77009804395031\r\n        },\r\n        {lat:\r\n                10.232277205149236, lng:\r\n                36.77009804395031\r\n        },\r\n        {lat:\r\n                10.233803130621613, lng:\r\n                36.768875734510445\r\n        },\r\n        {lat:\r\n                10.236854897747339, lng:\r\n                36.768875734510445\r\n        },\r\n        {lat:\r\n                10.23838073940069, lng:\r\n                36.768875734510445\r\n        },\r\n        {lat:\r\n                10.239906664873066, lng:\r\n                36.76765343915747\r\n        },\r\n        {lat:\r\n                10.241432506526413, lng:\r\n                36.76765343915747\r\n        },\r\n        {lat:\r\n                10.244484273652139, lng:\r\n                36.76765343915747\r\n        },\r\n        {lat:\r\n                10.247536040777863, lng:\r\n                36.76520872285218\r\n        },\r\n        {lat:\r\n                10.249061882431212, lng:\r\n                36.76520872285218\r\n        },\r\n        {lat:\r\n                10.252113649556938, lng:\r\n                36.76520872285218\r\n        },\r\n        {lat:\r\n                10.253639575029316, lng:\r\n                36.76643109074732\r\n        },\r\n        {lat:\r\n                10.255165416682663, lng:\r\n                36.76643109074732\r\n        },\r\n        {lat:\r\n                10.259743025461736, lng:\r\n                36.76643109074732\r\n        },\r\n        {lat:\r\n                10.261268950934117, lng:\r\n                36.76643109074732\r\n        },\r\n        {lat:\r\n                10.262794792587462, lng:\r\n                36.76643109074732\r\n        },\r\n        {lat:\r\n                10.264320718059842, lng:\r\n                36.76765343915747\r\n        },\r\n    ]\r\n\r\n    velocity = 5\r\n    initialDate = new Date()\r\n    color = \"\";\r\n    polylineDrawGreen;\r\n    polylineDrawRed;\r\n    arr = [];\r\n    markerRed = [];\r\n    imageFlag = 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png';\r\n    image = 'https://img.icons8.com/flat_round/20/000000/error--v1.png';\r\n    imageCar = 'https://img.icons8.com/offices/30/000000/rv-campground.png';\r\n\r\n    getDistance = () => {\r\n        // seconds between when the component loaded and now\r\n        const differentInTime = (new Date() - this.initialDate) / 1000 // pass to seconds\r\n        return differentInTime * this.velocity // d = v*t -- thanks Newton!\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.interval = window.setInterval(this.moveObject, 1000)\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n        window.clearInterval(this.interval)\r\n    }\r\n\r\n    moveObject = () => {\r\n        const distance = this.getDistance()\r\n        if (! distance) {\r\n            return\r\n        }\r\n        /*function sleep(milliseconds) {\r\n            const date = Date.now();\r\n            let currentDate = null;\r\n            do {\r\n                currentDate = Date.now();\r\n            } while (currentDate - date < milliseconds);\r\n        }*/\r\n        let progress = this.path.filter(coordinates => coordinates.distance < distance)\r\n\r\n         const nextLine = this.path.find(coordinates => coordinates.distance > distance)\r\n\r\n\r\n        var random = 0;\r\n\r\n        var count = 0;\r\n        //var markerGreen;\r\n\r\n\r\n        if (! nextLine) {\r\n            this.setState({ progress });\r\n            return // it's the end!\r\n        }\r\n        const lastLine = progress[progress.length - 1];\r\n\r\n        const lastLineLatLng = new window.google.maps.LatLng(\r\n            lastLine.lat,\r\n            lastLine.lng\r\n        );\r\n\r\n        const nextLineLatLng = new window.google.maps.LatLng(\r\n            nextLine.lat,\r\n            nextLine.lng\r\n        );\r\n\r\n        // distance of this line\r\n        const totalDistance = nextLine.distance - lastLine.distance\r\n        const percentage = (distance - lastLine.distance) / totalDistance\r\n\r\n        const position = window.google.maps.geometry.spherical.interpolate(\r\n            lastLineLatLng,\r\n            nextLineLatLng,\r\n            percentage\r\n        );\r\n\r\n        if (count % 5 === 0) {\r\n            random =Math.random();\r\n            if(random<0.5){\r\n                random =Math.floor(random)\r\n            }\r\n            else{\r\n                random= Math.ceil(random)\r\n            }\r\n            if (random === 0) {\r\n                console.log(\"red\");\r\n                // this.polylineDrawRed =   <Polyline path={this.state.progress} options={{ strokeColor: \"#FF0000\"}} />\r\n                //console.log(position.lat()+\" , \"+ position.lng())\r\n                this.arr.push({ lat: position.lat(), lng:position.lng()});\r\n                this.markerRed.push(<Marker position={this.arr[1]}/>);\r\n                progress = progress.concat(position);\r\n                this.setState({progress});\r\n\r\n            } else {\r\n                console.log(\"green\")\r\n                this.polylineDrawGreen =   <Polyline path={this.state.progress} options={{ strokeColor: \"#9efd38 \"}} />\r\n                progress = progress.concat(position);\r\n                //  this.setState({progress});\r\n                console.log(! nextLine);\r\n\r\n            }\r\n             this.setState({progress});\r\n\r\n            console.log(random);\r\n            //sleep(1000)\r\n            // console.log(this.state.progress)\r\n        }\r\n\r\n\r\n        //this.setState({ progress });\r\n    }\r\n\r\n    componentWillMount = () => {\r\n        this.path = this.path.map((coordinates, i, array) => {\r\n                if (i === 0) {\r\n                    return { ...coordinates, distance: 0 } // it begins here!\r\n                }\r\n\r\n                const { lat: lat1, lng: lng1 } = coordinates\r\n                const latLong1 = new window.google.maps.LatLng(lat1, lng1)\r\n\r\n                const { lat: lat2, lng: lng2 } = array[0]\r\n                const latLong2 = new window.google.maps.LatLng(lat2, lng2)\r\n\r\n                // in meters:\r\n                const distance = window.google.maps.geometry.spherical.computeDistanceBetween(\r\n                    latLong1,\r\n                    latLong2\r\n                );\r\n\r\n\r\n                return { ...coordinates, distance }\r\n            }\r\n\r\n        );\r\n    }\r\n\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <GoogleMap\r\n                defaultZoom={16}\r\n                defaultCenter={ {\r\n                    lat: 18.566516, lng: -68.435996\r\n                }}\r\n            >\r\n                {\r\n\r\n                    this.state.progress && (\r\n                        <>\r\n                            <Marker position={this.path[0] } icon={this.imageFlag}/>\r\n                            <Marker position={this.path[this.path.length-1] } icon={this.imageFlag}/>\r\n                            {this.polylineDrawGreen}\r\n                            <Marker position={this.state.progress[this.state.progress.length - 1] } icon={this.imageCar} />\r\n\r\n                            {this.arr.map((value, index) => {\r\n                                return <Marker position={this.arr[index]}\r\n                                               icon={this.image}\r\n                                />\r\n                            })}\r\n\r\n                        </>\r\n\r\n                    )\r\n                }\r\n            </GoogleMap>\r\n        )\r\n    }\r\n}\r\n\r\nconst MapComponent = withScriptjs(withGoogleMap(Map))\r\n\r\nexport default () => (\r\n    <MapComponent\r\n        googleMapURL=\"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\"\r\n        loadingElement={<div style={{ height: `100%` }} />}\r\n        containerElement={<div style={{ height: `650px`, width: '100%' }} />}\r\n        mapElement={<div style={{ height: `100%` }} />}\r\n    />\r\n)\r\n"]},"metadata":{},"sourceType":"module"}