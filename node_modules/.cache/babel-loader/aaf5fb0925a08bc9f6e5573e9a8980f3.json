{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\khouloud\\\\Documents\\\\PI\\\\MERN_Stack_PI\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\khouloud\\\\Documents\\\\PI\\\\MERN_Stack_PI\\\\src\\\\views\\\\driver\\\\Maps.js\";\nimport React from 'react';\nimport { withGoogleMap, withScriptjs, GoogleMap, Polyline, Marker, InfoWindow } from 'react-google-maps';\nimport axios from \"axios\";\nimport LocationIQ from 'react-native-locationiq';\nimport { Card, CardHeader, Container, Button, CardBody } from \"reactstrap\";\nimport { Modal } from \"react-bootstrap\";\n\nclass Map extends React.Component {\n  /* pathData = [\r\n       { lat: 36.73085422985146, lng: 10.233588491073034 },\r\n       { lat: 36.73085422985146, lng: 10.233540808521369 },\r\n       { lat: 36.73085422985146, lng: 10.233493125969702 },\r\n       { lat: 36.73085422985146, lng: 10.23339775562768 },\r\n       { lat: 36.73085422985146, lng: 10.23335007307601 },\r\n       { lat: 36.73089244624914, lng: 10.233302390524344 },\r\n       { lat: 36.73089244624914, lng: 10.233254707972677 },\r\n       { lat: 36.73093066262783, lng: 10.233159337630651 },\r\n       { lat: 36.73093066262783, lng: 10.233111655078986 },\r\n       { lat: 36.73093066262783, lng: 10.233063972527319 },\r\n       { lat: 36.73093066262783, lng: 10.233016284736962 },\r\n       { lat: 36.73093066262783, lng: 10.232920919633628 },\r\n       { lat: 36.73093066262783, lng: 10.23287323708196 },\r\n       { lat: 36.73093066262783, lng: 10.232825554530296 },\r\n       { lat: 36.73093066262783, lng: 10.232777866739937 },\r\n       { lat: 36.73096887793784, lng: 10.23273018418827 },\r\n       { lat: 36.73100709427845, lng: 10.232682501636603 },\r\n       { lat: 36.73100709427845, lng: 10.232634819084936 },\r\n       { lat: 36.73100709427845, lng: 10.23258713129458 },\r\n       { lat: 36.73104531060007, lng: 10.23253944874291 },\r\n       { lat: 36.73108352690265, lng: 10.232444083639578 },\r\n       { lat: 36.73108352690265, lng: 10.232396401087911 },\r\n       { lat: 36.73112174318622, lng: 10.232301030745887 },\r\n       { lat: 36.73112174318622, lng: 10.232205665642553 },\r\n       { lat: 36.73119817569629, lng: 10.232110295300528 },\r\n       { lat: 36.73119817569629, lng: 10.232062612748862 },\r\n       { lat: 36.73123639192279, lng: 10.232014930197195 },\r\n       { lat: 36.73123639192279, lng: 10.231967247645528 },\r\n       { lat: 36.73127460813028, lng: 10.231871877303506 },\r\n       { lat: 36.731312823269064, lng: 10.231681141858145 },\r\n       { lat: 36.73138925558894, lng: 10.231538094203145 },\r\n       { lat: 36.73142747172032, lng: 10.231442723861123 },\r\n       { lat: 36.73146568783271, lng: 10.231395041309455 },\r\n       { lat: 36.73146568783271, lng: 10.231347358757787 },\r\n       { lat: 36.731503903926054, lng: 10.231204305864097 },\r\n       { lat: 36.731503903926054, lng: 10.23115662331243 },\r\n       { lat: 36.731503903926054, lng: 10.231108940760762 },\r\n       { lat: 36.73161855209196, lng: 10.230918205315405 },\r\n       { lat: 36.731656767059604, lng: 10.230822834973383 },\r\n       { lat: 36.731656767059604, lng: 10.230727469870047 },\r\n       { lat: 36.73169498305785, lng: 10.230632099528023 },\r\n       { lat: 36.73173319903708, lng: 10.230584416976354 },\r\n       { lat: 36.73184784686063, lng: 10.230489051873022 },\r\n       { lat: 36.73188606276375, lng: 10.230441364082665 },\r\n       { lat: 36.73188606276375, lng: 10.230393681531 },\r\n       { lat: 36.73188606276375, lng: 10.230298316427664 },\r\n       { lat: 36.73192427864787, lng: 10.23020294608564 },\r\n       { lat: 36.731962494512985, lng: 10.230059898430639 },\r\n       { lat: 36.73200071035906, lng: 10.229916845536946 },\r\n       { lat: 36.73200071035906, lng: 10.229821480433614 },\r\n       { lat: 36.732038925136465, lng: 10.22972611009159 },\r\n       { lat: 36.732038925136465, lng: 10.229678427539923 },\r\n       { lat: 36.732038925136465, lng: 10.2295830571979 },\r\n       { lat: 36.73207714094451, lng: 10.22953537464623 },\r\n       { lat: 36.73207714094451, lng: 10.229487692094564 },\r\n       { lat: 36.7321153567335, lng: 10.229392326991231 },\r\n       { lat: 36.73215357250348, lng: 10.229344639200875 },\r\n       { lat: 36.73219178825444, lng: 10.22929695664921 },\r\n       { lat: 36.7322300039864, lng: 10.22924927409754 },\r\n       { lat: 36.73226821969931, lng: 10.229153903755517 },\r\n       { lat: 36.73226821969931, lng: 10.229106221203848 },\r\n       { lat: 36.73230643539321, lng: 10.229010856100516 },\r\n       { lat: 36.732344651068075, lng: 10.228963173548848 },\r\n       { lat: 36.732382865674325, lng: 10.22877243810349 },\r\n       { lat: 36.73242108131117, lng: 10.228581702658133 },\r\n       { lat: 36.732459296928994, lng: 10.228486332316109 },\r\n       { lat: 36.732459296928994, lng: 10.228390967212775 },\r\n       { lat: 36.732459296928994, lng: 10.228343284661108 },\r\n       { lat: 36.732535728107536, lng: 10.228247914319086 },\r\n       { lat: 36.73257394366827, lng: 10.22815254921575 },\r\n       { lat: 36.73257394366827, lng: 10.228057178873726 },\r\n       { lat: 36.73261215921002, lng: 10.227914131218725 },\r\n       { lat: 36.73265037473273, lng: 10.227818760876703 },\r\n       { lat: 36.73268859023639, lng: 10.227723395773367 },\r\n       { lat: 36.732726804671444, lng: 10.227675713221702 },\r\n       { lat: 36.73276502013708, lng: 10.227628025431343 },\r\n       { lat: 36.7328032355837, lng: 10.227580342879676 },\r\n       { lat: 36.732841451011296, lng: 10.22753266032801 },\r\n       { lat: 36.732841451011296, lng: 10.22743729260533 },\r\n       { lat: 36.732879666419876, lng: 10.227389607434317 },\r\n       { lat: 36.73291788180943, lng: 10.22734192488265 },\r\n       { lat: 36.73295609717995, lng: 10.22729423971164 },\r\n       { lat: 36.732994312531474, lng: 10.227246557159972 },\r\n       { lat: 36.732994312531474, lng: 10.227198874608304 },\r\n       { lat: 36.732994312531474, lng: 10.227151189437294 },\r\n       { lat: 36.732994312531474, lng: 10.227103506885626 },\r\n       { lat: 36.73303252786394, lng: 10.22700813916295 },\r\n       { lat: 36.73303252786394, lng: 10.226960453991934 },\r\n       { lat: 36.73310895742226, lng: 10.22681740371759 },\r\n       { lat: 36.7331471726977, lng: 10.22676972116592 },\r\n       { lat: 36.7331471726977, lng: 10.22672203599491 },\r\n       { lat: 36.733185387954094, lng: 10.226626668272232 },\r\n       { lat: 36.733185387954094, lng: 10.226578985720563 },\r\n       { lat: 36.733223603191476, lng: 10.226531300549551 },\r\n       { lat: 36.733223603191476, lng: 10.226483617997886 },\r\n       { lat: 36.733223603191476, lng: 10.226435932826874 },\r\n       { lat: 36.73330003360914, lng: 10.22634056772354 },\r\n       { lat: 36.73330003360914, lng: 10.22624520000086 },\r\n       { lat: 36.73333824878948, lng: 10.226197514829849 },\r\n       { lat: 36.73337646395079, lng: 10.226149832278182 }\r\n   ]*/\n  constructor(props) {\n    super(props);\n    this.state = {\n      progress: [],\n      pathFromDatabase: []\n    };\n    this.path = [{\n      lat: 36.81477236601238,\n      lng: 10.189578804217952\n    }, {\n      lat: 36.81477236601238,\n      lng: 10.189650329355125\n    }, {\n      lat: 36.81477236601238,\n      lng: 10.189674171940629\n    }, {\n      lat: 36.81477236601238,\n      lng: 10.189698013216464\n    }, {\n      lat: 36.814810540600746,\n      lng: 10.189817222214975\n    }, {\n      lat: 36.81482962841204,\n      lng: 10.189841064800483\n    }, {\n      lat: 36.814848715170086,\n      lng: 10.18988874866182\n    }, {\n      lat: 36.8148868897204,\n      lng: 10.189960273798995\n    }, {\n      lat: 36.81490597751265,\n      lng: 10.189984115074827\n    }, {\n      lat: 36.81492506425167,\n      lng: 10.190007957660335\n    }, {\n      lat: 36.81494415098594,\n      lng: 10.190031798936168\n    }, {\n      lat: 36.814963238763895,\n      lng: 10.190055641521674\n    }, {\n      lat: 36.81498232548864,\n      lng: 10.190079482797508\n    }, {\n      lat: 36.81500141325708,\n      lng: 10.190103325383012\n    }, {\n      lat: 36.81502049997232,\n      lng: 10.190103325383012\n    }, {\n      lat: 36.81507776218638,\n      lng: 10.19015100793468\n    }, {\n      lat: 36.81511593557394,\n      lng: 10.190174850520187\n    }, {\n      lat: 36.81513502330911,\n      lng: 10.190174850520187\n    }, {\n      lat: 36.81515410999101,\n      lng: 10.190198691796018\n    }, {\n      lat: 36.81523045876796,\n      lng: 10.19024637565736\n    }, {\n      lat: 36.81524954647455,\n      lng: 10.190270218242865\n    }, {\n      lat: 36.8152686331279,\n      lng: 10.190294059518699\n    }, {\n      lat: 36.8153068074688,\n      lng: 10.190317902104203\n    }, {\n      lat: 36.815344981790645,\n      lng: 10.190389427241378\n    }, {\n      lat: 36.815383156093446,\n      lng: 10.190437111102717\n    }, {\n      lat: 36.815421329852995,\n      lng: 10.190460952378551\n    }, {\n      lat: 36.81545950411771,\n      lng: 10.19050863623989\n    }, {\n      lat: 36.81547859124295,\n      lng: 10.190532478825395\n    }, {\n      lat: 36.81549767836343,\n      lng: 10.19055632010123\n    }, {\n      lat: 36.81549767836343,\n      lng: 10.190604003962568\n    }, {\n      lat: 36.815516765479146,\n      lng: 10.190627845238405\n    }, {\n      lat: 36.8155358525901,\n      lng: 10.190651687823909\n    }, {\n      lat: 36.81557402627347,\n      lng: 10.190699371685248\n    }, {\n      lat: 36.815593113370156,\n      lng: 10.190723212961082\n    }, {\n      lat: 36.81561220046207,\n      lng: 10.19074705554659\n    }, {\n      lat: 36.81563128754922,\n      lng: 10.190770896822421\n    }, {\n      lat: 36.81563128754922,\n      lng: 10.190794738098255\n    }, {\n      lat: 36.81566946170928,\n      lng: 10.190890105820934\n    }, {\n      lat: 36.815707635850245,\n      lng: 10.19091394840644\n    }, {\n      lat: 36.81572672238936,\n      lng: 10.190937789682273\n    }, {\n      lat: 36.81578398355089,\n      lng: 10.191009314819446\n    }, {\n      lat: 36.81580307059521,\n      lng: 10.19103315740495\n    }, {\n      lat: 36.81582215763477,\n      lng: 10.19103315740495\n    }, {\n      lat: 36.815841244669585,\n      lng: 10.191056998680786\n    }, {\n      lat: 36.81586033169961,\n      lng: 10.191056998680786\n    }, {\n      lat: 36.815898505221185,\n      lng: 10.191104682542125\n    }, {\n      lat: 36.81591759223693,\n      lng: 10.191128525127631\n    }, {\n      lat: 36.81597485325567,\n      lng: 10.191152366403465\n    }, {\n      lat: 36.8159939402524,\n      lng: 10.191152366403465\n    }, {\n      lat: 36.81607028766746,\n      lng: 10.191176208988972\n    }, {\n      lat: 36.8161466355306,\n      lng: 10.191176208988972\n    }, {\n      lat: 36.816203896378,\n      lng: 10.191223891540638\n    }, {\n      lat: 36.816261156658314,\n      lng: 10.191271575401977\n    }, {\n      lat: 36.81631841742005,\n      lng: 10.191295417987483\n    }, {\n      lat: 36.816375678138925,\n      lng: 10.191343101848823\n    }, {\n      lat: 36.81639476503571,\n      lng: 10.191366943124656\n    }, {\n      lat: 36.81639476503571,\n      lng: 10.191390785710162\n    }, {\n      lat: 36.81639476503571,\n      lng: 10.191438469571501\n    }, {\n      lat: 36.81639476503571,\n      lng: 10.191462310847333\n    }, {\n      lat: 36.81639476503571,\n      lng: 10.191509994708674\n    }, {\n      lat: 36.816432938290745,\n      lng: 10.191629203707185\n    }, {\n      lat: 36.81647111205095,\n      lng: 10.191700728844358\n    }, {\n      lat: 36.816509285792165,\n      lng: 10.191843780428377\n    }, {\n      lat: 36.8165283726556,\n      lng: 10.191962989426889\n    }, {\n      lat: 36.81658563321743,\n      lng: 10.192034515873734\n    }, {\n      lat: 36.816642893212176,\n      lng: 10.192153724872249\n    }, {\n      lat: 36.816681066867716,\n      lng: 10.192249092594926\n    }, {\n      lat: 36.816700153688316,\n      lng: 10.1923206177321\n    }, {\n      lat: 36.816757414121625,\n      lng: 10.19236830159344\n    }, {\n      lat: 36.81679558719581,\n      lng: 10.19241598545478\n    }, {\n      lat: 36.816852847557755,\n      lng: 10.192439826730613\n    }, {\n      lat: 36.816891021108546,\n      lng: 10.192487510591953\n    }, {\n      lat: 36.81692919464032,\n      lng: 10.192511353177457\n    }, {\n      lat: 36.816948280874826,\n      lng: 10.192559035729124\n    }, {\n      lat: 36.81700554112254,\n      lng: 10.192582878314632\n    }, {\n      lat: 36.81704371459719,\n      lng: 10.192606719590465\n    }, {\n      lat: 36.81706280132738,\n      lng: 10.192606719590465\n    }, {\n      lat: 36.817120060965195,\n      lng: 10.192630562175971\n    }, {\n      lat: 36.817139147676315,\n      lng: 10.192654403451805\n    }, {\n      lat: 36.81719640778121,\n      lng: 10.192654403451805\n    }, {\n      lat: 36.81721549447333,\n      lng: 10.192654403451805\n    }, {\n      lat: 36.81725366784332,\n      lng: 10.192678246037309\n    }, {\n      lat: 36.81729184066997,\n      lng: 10.192678246037309\n    }, {\n      lat: 36.81731092733828,\n      lng: 10.192678246037309\n    }, {\n      lat: 36.817330014001854,\n      lng: 10.192678246037309\n    }, {\n      lat: 36.817349100660635,\n      lng: 10.192702087313144\n    }, {\n      lat: 36.817368187314685,\n      lng: 10.192725929898648\n    }, {\n      lat: 36.8174063606085,\n      lng: 10.192773612450315\n    }, {\n      lat: 36.81742544724824,\n      lng: 10.192797455035823\n    }, {\n      lat: 36.81742544724824,\n      lng: 10.192821296311656\n    }, {\n      lat: 36.81742544724824,\n      lng: 10.192868980172996\n    }, {\n      lat: 36.81744453388325,\n      lng: 10.192916664034335\n    }, {\n      lat: 36.81746361998927,\n      lng: 10.192940506619841\n    }, {\n      lat: 36.817482706614754,\n      lng: 10.193012031757014\n    }, {\n      lat: 36.817501793235465,\n      lng: 10.193035873032848\n    }, {\n      lat: 36.81753996646263,\n      lng: 10.193059715618354\n    }, {\n      lat: 36.81755905306906,\n      lng: 10.193083556894187\n    }, {\n      lat: 36.81759722626768,\n      lng: 10.193107399479691\n    }, {\n      lat: 36.817616312859826,\n      lng: 10.193131240755527\n    }, {\n      lat: 36.817654485505656,\n      lng: 10.193155083341033\n    }, {\n      lat: 36.822941269910814,\n      lng: 10.198781761953349\n    }];\n    this.velocity = 5;\n    this.initialDate = new Date();\n    this.color = \"\";\n    this.polylineDrawRed = [];\n    this.arr = [];\n    this.markerRed = [];\n    this.imageFlag = 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png';\n    this.image = 'https://img.icons8.com/flat_round/20/000000/error--v1.png';\n    this.imageCar = 'https://img.icons8.com/offices/30/000000/rv-campground.png';\n    this.imagex = 'https://img.icons8.com/doodle/16/000000/delete-sign.png';\n    this.get_address_lat_lng_start = [];\n    this.get_address_lat_lng_end = [];\n    this.plannig_state = true;\n    this.process_title = null;\n    this.start_reverse_address = [];\n    this.end_reverse_address = [];\n    this.start_address = null;\n    this.end_address = null;\n\n    this.getDistance = () => {\n      // seconds between when the component loaded and now\n      const differentInTime = (new Date() - this.initialDate) / 1000; // pass to seconds\n\n      return differentInTime * this.velocity; // d = v*t -- thanks Newton!\n    };\n\n    this.componentDidMount = () => {\n      console.log(window.location.href);\n      var str = window.location.href;\n      var res;\n      res = str.search(\"maps/\") + 5;\n      var re = str.substr(res, str.length - 1);\n      console.log(re);\n      this.interval = window.setInterval(this.moveObject, 1000);\n      axios.get(\"http://localhost:4000/api/planning/get_address/\" + re).then(response => {\n        this.setState({\n          get_address: response.data\n        });\n        console.log(response.data);\n        this.get_address_lat_lng_start.push({\n          lat: response.data[0][0],\n          lng: response.data[0][1]\n        });\n        this.get_address_lat_lng_end.push({\n          lat: response.data[response.data.length - 1][0],\n          lng: response.data[response.data.length - 1][1]\n        });\n\n        for (var i = 0; i < response.data.length; i++) {\n          this.state.pathFromDatabase.push({\n            lat: response.data[i][0],\n            lng: response.data[i][1]\n          });\n        }\n\n        this.polynedatabase = React.createElement(Polyline, {\n          path: this.state.pathFromDatabase,\n          options: {\n            strokeColor: \"#FF0000\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 295\n          },\n          __self: this\n        });\n        console.log(this.get_address_lat_lng_end);\n        console.log(this.get_address_lat_lng_start);\n        LocationIQ.init(\"d2eee4724fae22\"); // use a valid API key\n\n        LocationIQ.reverse(this.get_address_lat_lng_start[0]['lat'], this.get_address_lat_lng_start[0]['lng']).then(json => {\n          this.start_reverse_address.push(json.address);\n          this.start_address = this.start_reverse_address[0]['county'] + \" \" + this.start_reverse_address[0]['state_district'] + \" \" + this.start_reverse_address[0]['state'] + \", \" + this.start_reverse_address[0]['country'];\n        }).catch(error => console.warn(error));\n        LocationIQ.reverse(this.get_address_lat_lng_end[0]['lat'], this.get_address_lat_lng_end[0]['lng']).then(json => {\n          this.end_reverse_address.push(json.address);\n          this.end_address = this.end_reverse_address[0]['county'] + \" \" + this.end_reverse_address[0]['state_district'] + \" \" + this.end_reverse_address[0]['state'] + \", \" + this.end_reverse_address[0]['country'];\n          console.log(this.end_reverse_address[0]);\n        }).catch(error => console.warn(error));\n      }).catch(function (error) {\n        console.log(error);\n      });\n      axios.get('http://localhost:4000/api/planning/get_planning/' + re).then(res => {\n        this.plannig_state = res.data['DriveTest_State'];\n        this.process_title = res.data['DriveTest_Title'];\n      }); // lat: 36.822941269910814, lng: 10.198781761953349\n    };\n\n    this.componentWillUnmount = () => {\n      window.clearInterval(this.interval);\n    };\n\n    this.moveObject = () => {\n      const distance = this.getDistance();\n\n      if (!distance) {\n        return;\n      }\n      /*function sleep(milliseconds) {\r\n          const date = Date.now();\r\n          let currentDate = null;\r\n          do {\r\n              currentDate = Date.now();\r\n          } while (currentDate - date < milliseconds);\r\n      }*/\n\n\n      let progress = this.path.filter(coordinates => coordinates.distance < distance);\n      const nextLine = this.path.find(coordinates => coordinates.distance > distance);\n      var random = 0;\n      var count = 0; //var markerGreen;\n\n      if (!nextLine) {\n        this.setState({\n          progress\n        });\n        return; // it's the end!\n      }\n\n      const lastLine = progress[progress.length - 1];\n      const lastLineLatLng = new window.google.maps.LatLng(lastLine.lat, lastLine.lng);\n      const nextLineLatLng = new window.google.maps.LatLng(nextLine.lat, nextLine.lng); // distance of this line\n\n      const totalDistance = nextLine.distance - lastLine.distance;\n      const percentage = (distance - lastLine.distance) / totalDistance;\n      const position = window.google.maps.geometry.spherical.interpolate(lastLineLatLng, nextLineLatLng, percentage);\n\n      if (count % 5 === 0) {\n        random = Math.random();\n\n        if (random < 0.5) {\n          random = Math.floor(random);\n        } else {\n          random = Math.ceil(random);\n        }\n\n        if (random === 0) {\n          console.log(\"red\"); // this.polylineDrawRed =   <Polyline path={this.state.progress} options={{ strokeColor: \"#FF0000\"}} />\n          //console.log(position.lat()+\" , \"+ position.lng())\n\n          this.arr.push({\n            lat: position.lat(),\n            lng: position.lng()\n          });\n          this.markerRed.push(React.createElement(Marker, {\n            position: this.arr[1],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 407\n            },\n            __self: this\n          }));\n          progress = progress.concat(position);\n          this.setState({\n            progress\n          });\n        } else {\n          console.log(\"green\");\n          this.polylineDrawGreen = React.createElement(Polyline, {\n            path: this.state.progress,\n            options: {\n              strokeColor: \"#9efd38 \"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 412\n            },\n            __self: this\n          });\n          var prg = [];\n          var start = this.state.progress[0];\n          var end = this.state.progress[this.state.progress.length - 2];\n          prg.push(start);\n          prg.push(end);\n          console.log(this.state.progress[0]);\n          console.log(this.state.progress[this.state.progress.length - 2]);\n          console.log(prg);\n          this.polylineDrawRed.push({\n            lat: position.lat(),\n            lng: position.lng()\n          }); // this.polylineDrawRed.push(prg)\n          // console.log(this.polylineDrawRed)\n\n          progress = progress.concat(position); //  this.setState({progress});\n\n          console.log(!nextLine);\n        }\n\n        this.setState({\n          progress\n        });\n        console.log(random); //sleep(1000)\n        // console.log(this.state.progress)\n      } //this.setState({ progress });\n\n    };\n\n    this.componentWillMount = () => {\n      this.path = this.path.map((coordinates, i, array) => {\n        if (i === 0) {\n          return _objectSpread({}, coordinates, {\n            distance: 0\n          }); // it begins here!\n        }\n\n        const lat1 = coordinates.lat,\n              lng1 = coordinates.lng;\n        const latLong1 = new window.google.maps.LatLng(lat1, lng1);\n        const _array$ = array[0],\n              lat2 = _array$.lat,\n              lng2 = _array$.lng;\n        const latLong2 = new window.google.maps.LatLng(lat2, lng2); // in meters:\n\n        const distance = window.google.maps.geometry.spherical.computeDistanceBetween(latLong1, latLong2);\n        return _objectSpread({}, coordinates, {\n          distance\n        });\n      });\n    };\n\n    this.render = () => {\n      console.log(this.state.pathFromDatabase);\n      console.log(this.plannig_state);\n      console.log(this.start_reverse_address[0]);\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 463\n        },\n        __self: this\n      }, React.createElement(GoogleMap, {\n        defaultZoom: 8,\n        defaultCenter: {\n          lat: 36.822941269910814,\n          lng: 10.198781761953349\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 464\n        },\n        __self: this\n      }, this.state.progress && React.createElement(React.Fragment, null, React.createElement(Marker, {\n        position: this.get_address_lat_lng_start[0],\n        icon: this.imageFlag,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 473\n        },\n        __self: this\n      }, React.createElement(InfoWindow, {\n        key: \"infowindow-\".concat(this.get_address_lat_lng_start[0]),\n        visible: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 474\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477\n        },\n        __self: this\n      }, this.start_address))), React.createElement(Marker, {\n        position: this.get_address_lat_lng_end[0],\n        icon: this.imageFlag,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 481\n        },\n        __self: this\n      }, React.createElement(InfoWindow, {\n        key: \"infowindow-\".concat(this.get_address_lat_lng_end[0]),\n        visible: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 482\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 485\n        },\n        __self: this\n      }, this.end_address))), this.polylineDrawGreen, this.polylineDrawRed, this.polynedatabase, React.createElement(Polyline, {\n        path: this.path,\n        options: {\n          strokeColor: \"#fefaff\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 491\n        },\n        __self: this\n      }), React.createElement(Marker, {\n        position: this.state.progress[this.state.progress.length - 1],\n        icon: this.imageCar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 492\n        },\n        __self: this\n      }), this.arr.map((value, index) => {\n        return React.createElement(Marker, {\n          position: this.arr[index],\n          icon: this.image,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 495\n          },\n          __self: this\n        });\n      }), this.arr.map((valuePin, indexPin) => {\n        return React.createElement(Marker, {\n          position: this.polylineDrawRed[indexPin],\n          icon: this.imagex,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 500\n          },\n          __self: this\n        });\n      }))), React.createElement(\"div\", {\n        className: \"row justify-content-md-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 509\n        },\n        __self: this\n      }, React.createElement(Card, {\n        className: \"bg-secondary shadow border-0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 510\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        className: \"bg-transparent row justify-content-md-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 511\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"text-muted text-center mt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 512\n        },\n        __self: this\n      }, React.createElement(\"big\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 513\n        },\n        __self: this\n      }, \" \", this.process_title))), React.createElement(CardBody, {\n        className: \"px-lg-5 py-lg-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 516\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 517\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"btn-neutral btn-icon mr-4\",\n        color: \"default\",\n        disabled: this.plannig_state,\n        onClick: this.start_rpa_process,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"btn-inner--icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 523\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        alt: \"...\",\n        src: \"https://img.icons8.com/officel/40/000000/start.png\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 524\n        },\n        __self: this\n      })), React.createElement(\"span\", {\n        className: \"btn-inner--text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 528\n        },\n        __self: this\n      }, \"Run\")), React.createElement(Button, {\n        className: \"btn-neutral btn-icon\",\n        color: \"default\",\n        onClick: this.kill_rpa_process,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 530\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"btn-inner--icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 534\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        alt: \"...\",\n        src: \"https://img.icons8.com/officel/40/000000/cancel.png\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 535\n        },\n        __self: this\n      })), React.createElement(\"span\", {\n        className: \"btn-inner--text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 538\n        },\n        __self: this\n      }, \"Cancel\")))))), React.createElement(Modal, {\n        show: this.state.show,\n        onHide: () => this.HandleModal(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 543\n        },\n        __self: this\n      }, React.createElement(Modal.Header, {\n        closeButton: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 544\n        },\n        __self: this\n      }, React.createElement(Modal.Title, {\n        id: \"contained-modal-title-vcenter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 545\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 546\n        },\n        __self: this\n      }, \"DELETE CONFIRMATION \"))), React.createElement(Modal.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 549\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 550\n        },\n        __self: this\n      }, \" Are You sure You want to delete this drive test ? \")), React.createElement(Modal.Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 553\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"danger\",\n        onClick: () => this.HandleDelete(this.state.DriveTest),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 555\n        },\n        __self: this\n      }, \"Confirm\"), React.createElement(Button, {\n        color: \"default\",\n        onClick: () => this.HandleModal(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 558\n        },\n        __self: this\n      }, \"Close\"))));\n    };\n\n    this.HandleModalEval = this.HandleModalEval.bind(this);\n  }\n\n  HandleModal(item) {\n    this.setState({\n      show: !this.state.show,\n      DriveTest: item\n    });\n  }\n\n  HandleModalEval(item) {\n    var state = Object.assign(this.state, {\n      DriveTestEval: item\n    });\n    this.setState({\n      showEval: !this.state.showEval,\n      state\n    });\n  }\n\n  start_rpa_process() {\n    var str = window.location.href;\n    var res;\n    res = str.search(\"maps/\") + 5;\n    var re = str.substr(res, str.length - 1);\n    console.log(re);\n    axios.get('http://localhost:4000/api/rpa/' + re).then(res => console.log(res.data));\n    alert('Hello!');\n  }\n\n  kill_rpa_process() {\n    var str = window.location.href;\n    var res;\n    res = str.search(\"maps/\") + 5;\n    var re = str.substr(res, str.length - 1);\n    console.log(re);\n    axios.get('http://localhost:4000/api/rpa/killProcess/' + re).then(res => console.log(res.data));\n    alert('Goodbye !');\n  }\n\n}\n\nconst MapComponent = withScriptjs(withGoogleMap(Map));\nexport default (() => React.createElement(MapComponent, {\n  googleMapURL: \"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\",\n  loadingElement: React.createElement(\"div\", {\n    style: {\n      height: \"100%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 574\n    },\n    __self: this\n  }),\n  containerElement: React.createElement(\"div\", {\n    style: {\n      height: \"500px\",\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 575\n    },\n    __self: this\n  }),\n  mapElement: React.createElement(\"div\", {\n    style: {\n      height: \"120%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 576\n    },\n    __self: this\n  }),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 572\n  },\n  __self: this\n}));","map":{"version":3,"sources":["C:/Users/khouloud/Documents/PI/MERN_Stack_PI/src/views/driver/Maps.js"],"names":["React","withGoogleMap","withScriptjs","GoogleMap","Polyline","Marker","InfoWindow","axios","LocationIQ","Card","CardHeader","Container","Button","CardBody","Modal","Map","Component","constructor","props","state","progress","pathFromDatabase","path","lat","lng","velocity","initialDate","Date","color","polylineDrawRed","arr","markerRed","imageFlag","image","imageCar","imagex","get_address_lat_lng_start","get_address_lat_lng_end","plannig_state","process_title","start_reverse_address","end_reverse_address","start_address","end_address","getDistance","differentInTime","componentDidMount","console","log","window","location","href","str","res","search","re","substr","length","interval","setInterval","moveObject","get","then","response","setState","get_address","data","push","i","polynedatabase","strokeColor","init","reverse","json","address","catch","error","warn","componentWillUnmount","clearInterval","distance","filter","coordinates","nextLine","find","random","count","lastLine","lastLineLatLng","google","maps","LatLng","nextLineLatLng","totalDistance","percentage","position","geometry","spherical","interpolate","Math","floor","ceil","concat","polylineDrawGreen","prg","start","end","componentWillMount","map","array","lat1","lng1","latLong1","lat2","lng2","latLong2","computeDistanceBetween","render","value","index","valuePin","indexPin","start_rpa_process","kill_rpa_process","show","HandleModal","HandleDelete","DriveTest","HandleModalEval","bind","item","Object","assign","DriveTestEval","showEval","alert","MapComponent","height","width"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,aAAR,EAAuBC,YAAvB,EAAqCC,SAArC,EAAgDC,QAAhD,EAA0DC,MAA1D,EAAkEC,UAAlE,QAAmF,mBAAnF;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AAEA,SACIC,IADJ,EAEIC,UAFJ,EAGIC,SAHJ,EAIIC,MAJJ,EAKGC,QALH,QAMO,YANP;AAOA,SAAQC,KAAR,QAAoB,iBAApB;;AAEA,MAAMC,GAAN,SAAkBf,KAAK,CAACgB,SAAxB,CAAkC;AAM9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoOAC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AADc,SAzOlBC,KAyOkB,GAzOV;AACJC,MAAAA,QAAQ,EAAE,EADN;AAEJC,MAAAA,gBAAgB,EAAE;AAFd,KAyOU;AAAA,SA7HlBC,IA6HkB,GA7HX,CACH;AAACC,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KADG,EAEH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAFG,EAGH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAHG,EAIH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAJG,EAKH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KALG,EAMH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KANG,EAOH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KAPG,EAQH;AAACD,MAAAA,GAAG,EAAE,gBAAN;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KARG,EASH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KATG,EAUH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAVG,EAWH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAXG,EAYH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KAZG,EAaH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAbG,EAcH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAdG,EAeH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAfG,EAgBH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAhBG,EAiBH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAjBG,EAkBH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAlBG,EAmBH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAnBG,EAoBH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KApBG,EAqBH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KArBG,EAsBH;AAACD,MAAAA,GAAG,EAAE,gBAAN;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KAtBG,EAuBH;AAACD,MAAAA,GAAG,EAAE,gBAAN;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KAvBG,EAwBH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KAxBG,EAyBH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KAzBG,EA0BH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KA1BG,EA2BH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KA3BG,EA4BH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KA5BG,EA6BH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KA7BG,EA8BH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KA9BG,EA+BH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KA/BG,EAgCH;AAACD,MAAAA,GAAG,EAAE,gBAAN;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KAhCG,EAiCH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAjCG,EAkCH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KAlCG,EAmCH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAnCG,EAoCH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KApCG,EAqCH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KArCG,EAsCH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAtCG,EAuCH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KAvCG,EAwCH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAxCG,EAyCH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAzCG,EA0CH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KA1CG,EA2CH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KA3CG,EA4CH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KA5CG,EA6CH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KA7CG,EA8CH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KA9CG,EA+CH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KA/CG,EAgDH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAhDG,EAiDH;AAACD,MAAAA,GAAG,EAAE,gBAAN;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KAjDG,EAkDH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAlDG,EAmDH;AAACD,MAAAA,GAAG,EAAE,gBAAN;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KAnDG,EAoDH;AAACD,MAAAA,GAAG,EAAE,eAAN;AAAuBC,MAAAA,GAAG,EAAE;AAA5B,KApDG,EAqDH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KArDG,EAsDH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAtDG,EAuDH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KAvDG,EAwDH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAxDG,EAyDH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAzDG,EA0DH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KA1DG,EA2DH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KA3DG,EA4DH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KA5DG,EA6DH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KA7DG,EA8DH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KA9DG,EA+DH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KA/DG,EAgEH;AAACD,MAAAA,GAAG,EAAE,gBAAN;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KAhEG,EAiEH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAjEG,EAkEH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KAlEG,EAmEH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KAnEG,EAoEH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KApEG,EAqEH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KArEG,EAsEH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAtEG,EAuEH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KAvEG,EAwEH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KAxEG,EAyEH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAzEG,EA0EH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KA1EG,EA2EH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KA3EG,EA4EH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KA5EG,EA6EH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KA7EG,EA8EH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KA9EG,EA+EH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KA/EG,EAgFH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAhFG,EAiFH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAjFG,EAkFH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAlFG,EAmFH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAnFG,EAoFH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KApFG,EAqFH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KArFG,EAsFH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KAtFG,EAuFH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KAvFG,EAwFH;AAACD,MAAAA,GAAG,EAAE,gBAAN;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KAxFG,EAyFH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAzFG,EA0FH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KA1FG,EA2FH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KA3FG,EA4FH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KA5FG,EA6FH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KA7FG,EA8FH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KA9FG,EA+FH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KA/FG,EAgGH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAhGG,EAiGH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAjGG,EAkGH;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAlGG,EAmGH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KAnGG,EAoGH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KApGG,EAqGH;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KArGG,CA6HW;AAAA,SApBlBC,QAoBkB,GApBP,CAoBO;AAAA,SAnBlBC,WAmBkB,GAnBJ,IAAIC,IAAJ,EAmBI;AAAA,SAlBlBC,KAkBkB,GAlBV,EAkBU;AAAA,SAhBlBC,eAgBkB,GAhBA,EAgBA;AAAA,SAflBC,GAekB,GAfZ,EAeY;AAAA,SAdlBC,SAckB,GAdN,EAcM;AAAA,SAblBC,SAakB,GAbN,gGAaM;AAAA,SAZlBC,KAYkB,GAZV,2DAYU;AAAA,SAXlBC,QAWkB,GAXP,4DAWO;AAAA,SAVlBC,MAUkB,GAVT,yDAUS;AAAA,SATlBC,yBASkB,GATU,EASV;AAAA,SARlBC,uBAQkB,GARQ,EAQR;AAAA,SANlBC,aAMkB,GANF,IAME;AAAA,SALlBC,aAKkB,GALF,IAKE;AAAA,SAJlBC,qBAIkB,GAJK,EAIL;AAAA,SAHlBC,mBAGkB,GAHG,EAGH;AAAA,SAFlBC,aAEkB,GAFF,IAEE;AAAA,SADlBC,WACkB,GADJ,IACI;;AAAA,SAmBlBC,WAnBkB,GAmBJ,MAAM;AAChB;AACA,YAAMC,eAAe,GAAG,CAAC,IAAIlB,IAAJ,KAAa,KAAKD,WAAnB,IAAkC,IAA1D,CAFgB,CAE+C;;AAC/D,aAAOmB,eAAe,GAAG,KAAKpB,QAA9B,CAHgB,CAGuB;AAC1C,KAvBiB;;AAAA,SAwBlBqB,iBAxBkB,GAwBE,MAAM;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,QAAP,CAAgBC,IAA5B;AACA,UAAIC,GAAG,GAAGH,MAAM,CAACC,QAAP,CAAgBC,IAA1B;AACA,UAAIE,GAAJ;AACAA,MAAAA,GAAG,GAAGD,GAAG,CAACE,MAAJ,CAAW,OAAX,IAAsB,CAA5B;AACA,UAAIC,EAAE,GAAGH,GAAG,CAACI,MAAJ,CAAWH,GAAX,EAAgBD,GAAG,CAACK,MAAJ,GAAa,CAA7B,CAAT;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAYO,EAAZ;AACA,WAAKG,QAAL,GAAgBT,MAAM,CAACU,WAAP,CAAmB,KAAKC,UAAxB,EAAoC,IAApC,CAAhB;AACArD,MAAAA,KAAK,CAACsD,GAAN,CAAU,oDAAoDN,EAA9D,EACKO,IADL,CACUC,QAAQ,IAAI;AACd,aAAKC,QAAL,CAAc;AAACC,UAAAA,WAAW,EAAEF,QAAQ,CAACG;AAAvB,SAAd;AACAnB,QAAAA,OAAO,CAACC,GAAR,CAAYe,QAAQ,CAACG,IAArB;AACA,aAAK9B,yBAAL,CAA+B+B,IAA/B,CAAoC;AAAC5C,UAAAA,GAAG,EAAEwC,QAAQ,CAACG,IAAT,CAAc,CAAd,EAAiB,CAAjB,CAAN;AAA2B1C,UAAAA,GAAG,EAAEuC,QAAQ,CAACG,IAAT,CAAc,CAAd,EAAiB,CAAjB;AAAhC,SAApC;AACA,aAAK7B,uBAAL,CAA6B8B,IAA7B,CAAkC;AAC9B5C,UAAAA,GAAG,EAAEwC,QAAQ,CAACG,IAAT,CAAcH,QAAQ,CAACG,IAAT,CAAcT,MAAd,GAAuB,CAArC,EAAwC,CAAxC,CADyB;AAE9BjC,UAAAA,GAAG,EAAEuC,QAAQ,CAACG,IAAT,CAAcH,QAAQ,CAACG,IAAT,CAAcT,MAAd,GAAuB,CAArC,EAAwC,CAAxC;AAFyB,SAAlC;;AAKA,aAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,QAAQ,CAACG,IAAT,CAAcT,MAAlC,EAA0CW,CAAC,EAA3C,EAA+C;AAC3C,eAAKjD,KAAL,CAAWE,gBAAX,CAA4B8C,IAA5B,CAAiC;AAAC5C,YAAAA,GAAG,EAAEwC,QAAQ,CAACG,IAAT,CAAcE,CAAd,EAAiB,CAAjB,CAAN;AAA2B5C,YAAAA,GAAG,EAAEuC,QAAQ,CAACG,IAAT,CAAcE,CAAd,EAAiB,CAAjB;AAAhC,WAAjC;AACH;;AAED,aAAKC,cAAL,GAAsB,oBAAC,QAAD;AAAU,UAAA,IAAI,EAAE,KAAKlD,KAAL,CAAWE,gBAA3B;AAA6C,UAAA,OAAO,EAAE;AAACiD,YAAAA,WAAW,EAAE;AAAd,WAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAtB;AACAvB,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKX,uBAAjB;AACAU,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKZ,yBAAjB;AAEA5B,QAAAA,UAAU,CAAC+D,IAAX,CAAgB,gBAAhB,EAjBc,CAiBqB;;AAClC/D,QAAAA,UAAU,CAACgE,OAAX,CAAmB,KAAKpC,yBAAL,CAA+B,CAA/B,EAAkC,KAAlC,CAAnB,EAA6D,KAAKA,yBAAL,CAA+B,CAA/B,EAAkC,KAAlC,CAA7D,EACK0B,IADL,CACUW,IAAI,IAAI;AACV,eAAKjC,qBAAL,CAA2B2B,IAA3B,CAAgCM,IAAI,CAACC,OAArC;AACA,eAAKhC,aAAL,GAAqB,KAAKF,qBAAL,CAA2B,CAA3B,EAA8B,QAA9B,IAAyC,GAAzC,GAA8C,KAAKA,qBAAL,CAA2B,CAA3B,EAA8B,gBAA9B,CAA9C,GAA8F,GAA9F,GAAkG,KAAKA,qBAAL,CAA2B,CAA3B,EAA8B,OAA9B,CAAlG,GAA0I,IAA1I,GAAgJ,KAAKA,qBAAL,CAA2B,CAA3B,EAA8B,SAA9B,CAArK;AACH,SAJL,EAKKmC,KALL,CAKWC,KAAK,IAAI7B,OAAO,CAAC8B,IAAR,CAAaD,KAAb,CALpB;AAMApE,QAAAA,UAAU,CAACgE,OAAX,CAAmB,KAAKnC,uBAAL,CAA6B,CAA7B,EAAgC,KAAhC,CAAnB,EAA2D,KAAKA,uBAAL,CAA6B,CAA7B,EAAgC,KAAhC,CAA3D,EACKyB,IADL,CACUW,IAAI,IAAI;AACV,eAAKhC,mBAAL,CAAyB0B,IAAzB,CAA8BM,IAAI,CAACC,OAAnC;AACA,eAAK/B,WAAL,GAAmB,KAAKF,mBAAL,CAAyB,CAAzB,EAA4B,QAA5B,IAAuC,GAAvC,GAA4C,KAAKA,mBAAL,CAAyB,CAAzB,EAA4B,gBAA5B,CAA5C,GAA0F,GAA1F,GAA8F,KAAKA,mBAAL,CAAyB,CAAzB,EAA4B,OAA5B,CAA9F,GAAoI,IAApI,GAA0I,KAAKA,mBAAL,CAAyB,CAAzB,EAA4B,SAA5B,CAA7J;AAEAM,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,mBAAL,CAAyB,CAAzB,CAAZ;AACH,SANL,EAOKkC,KAPL,CAOWC,KAAK,IAAI7B,OAAO,CAAC8B,IAAR,CAAaD,KAAb,CAPpB;AASJ,OAlCL,EAmCKD,KAnCL,CAmCW,UAAUC,KAAV,EAAiB;AACpB7B,QAAAA,OAAO,CAACC,GAAR,CAAY4B,KAAZ;AACH,OArCL;AAuCArE,MAAAA,KAAK,CAACsD,GAAN,CAAU,qDAAqDN,EAA/D,EACKO,IADL,CACUT,GAAG,IAAI;AACT,aAAKf,aAAL,GAAqBe,GAAG,CAACa,IAAJ,CAAS,iBAAT,CAArB;AACA,aAAK3B,aAAL,GAAqBc,GAAG,CAACa,IAAJ,CAAS,iBAAT,CAArB;AAEH,OALL,EA/CsB,CAqDvB;AAEF,KA/EiB;;AAAA,SAuGlBY,oBAvGkB,GAuGK,MAAM;AACzB7B,MAAAA,MAAM,CAAC8B,aAAP,CAAqB,KAAKrB,QAA1B;AACH,KAzGiB;;AAAA,SA2GlBE,UA3GkB,GA2GL,MAAM;AACf,YAAMoB,QAAQ,GAAG,KAAKpC,WAAL,EAAjB;;AACA,UAAI,CAACoC,QAAL,EAAe;AACX;AACH;AACD;;;;;;;;;AAOA,UAAI5D,QAAQ,GAAG,KAAKE,IAAL,CAAU2D,MAAV,CAAiBC,WAAW,IAAIA,WAAW,CAACF,QAAZ,GAAuBA,QAAvD,CAAf;AACA,YAAMG,QAAQ,GAAG,KAAK7D,IAAL,CAAU8D,IAAV,CAAeF,WAAW,IAAIA,WAAW,CAACF,QAAZ,GAAuBA,QAArD,CAAjB;AACA,UAAIK,MAAM,GAAG,CAAb;AACA,UAAIC,KAAK,GAAG,CAAZ,CAfe,CAgBf;;AACA,UAAI,CAACH,QAAL,EAAe;AACX,aAAKnB,QAAL,CAAc;AAAC5C,UAAAA;AAAD,SAAd;AACA,eAFW,CAEJ;AACV;;AACD,YAAMmE,QAAQ,GAAGnE,QAAQ,CAACA,QAAQ,CAACqC,MAAT,GAAkB,CAAnB,CAAzB;AACA,YAAM+B,cAAc,GAAG,IAAIvC,MAAM,CAACwC,MAAP,CAAcC,IAAd,CAAmBC,MAAvB,CACnBJ,QAAQ,CAAChE,GADU,EAEnBgE,QAAQ,CAAC/D,GAFU,CAAvB;AAIA,YAAMoE,cAAc,GAAG,IAAI3C,MAAM,CAACwC,MAAP,CAAcC,IAAd,CAAmBC,MAAvB,CACnBR,QAAQ,CAAC5D,GADU,EAEnB4D,QAAQ,CAAC3D,GAFU,CAAvB,CA1Be,CA8Bf;;AACA,YAAMqE,aAAa,GAAGV,QAAQ,CAACH,QAAT,GAAoBO,QAAQ,CAACP,QAAnD;AACA,YAAMc,UAAU,GAAG,CAACd,QAAQ,GAAGO,QAAQ,CAACP,QAArB,IAAiCa,aAApD;AACA,YAAME,QAAQ,GAAG9C,MAAM,CAACwC,MAAP,CAAcC,IAAd,CAAmBM,QAAnB,CAA4BC,SAA5B,CAAsCC,WAAtC,CACbV,cADa,EAEbI,cAFa,EAGbE,UAHa,CAAjB;;AAMA,UAAIR,KAAK,GAAG,CAAR,KAAc,CAAlB,EAAqB;AACjBD,QAAAA,MAAM,GAAGc,IAAI,CAACd,MAAL,EAAT;;AACA,YAAIA,MAAM,GAAG,GAAb,EAAkB;AACdA,UAAAA,MAAM,GAAGc,IAAI,CAACC,KAAL,CAAWf,MAAX,CAAT;AACH,SAFD,MAEO;AACHA,UAAAA,MAAM,GAAGc,IAAI,CAACE,IAAL,CAAUhB,MAAV,CAAT;AACH;;AACD,YAAIA,MAAM,KAAK,CAAf,EAAkB;AACdtC,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EADc,CAEd;AACA;;AACA,eAAKlB,GAAL,CAASqC,IAAT,CAAc;AAAC5C,YAAAA,GAAG,EAAEwE,QAAQ,CAACxE,GAAT,EAAN;AAAsBC,YAAAA,GAAG,EAAEuE,QAAQ,CAACvE,GAAT;AAA3B,WAAd;AACA,eAAKO,SAAL,CAAeoC,IAAf,CAAoB,oBAAC,MAAD;AAAQ,YAAA,QAAQ,EAAE,KAAKrC,GAAL,CAAS,CAAT,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAApB;AACAV,UAAAA,QAAQ,GAAGA,QAAQ,CAACkF,MAAT,CAAgBP,QAAhB,CAAX;AACA,eAAK/B,QAAL,CAAc;AAAC5C,YAAAA;AAAD,WAAd;AACH,SARD,MAQO;AACH2B,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,eAAKuD,iBAAL,GAAyB,oBAAC,QAAD;AAAU,YAAA,IAAI,EAAE,KAAKpF,KAAL,CAAWC,QAA3B;AAAqC,YAAA,OAAO,EAAE;AAACkD,cAAAA,WAAW,EAAE;AAAd,aAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAzB;AACA,cAAIkC,GAAG,GAAG,EAAV;AACA,cAAIC,KAAK,GAAG,KAAKtF,KAAL,CAAWC,QAAX,CAAoB,CAApB,CAAZ;AACA,cAAIsF,GAAG,GAAG,KAAKvF,KAAL,CAAWC,QAAX,CAAoB,KAAKD,KAAL,CAAWC,QAAX,CAAoBqC,MAApB,GAA6B,CAAjD,CAAV;AACA+C,UAAAA,GAAG,CAACrC,IAAJ,CAASsC,KAAT;AACAD,UAAAA,GAAG,CAACrC,IAAJ,CAASuC,GAAT;AACA3D,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAK7B,KAAL,CAAWC,QAAX,CAAoB,CAApB,CAAZ;AACA2B,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAK7B,KAAL,CAAWC,QAAX,CAAoB,KAAKD,KAAL,CAAWC,QAAX,CAAoBqC,MAApB,GAA6B,CAAjD,CAAZ;AACAV,UAAAA,OAAO,CAACC,GAAR,CAAYwD,GAAZ;AACA,eAAK3E,eAAL,CAAqBsC,IAArB,CAA0B;AAAC5C,YAAAA,GAAG,EAAEwE,QAAQ,CAACxE,GAAT,EAAN;AAAsBC,YAAAA,GAAG,EAAEuE,QAAQ,CAACvE,GAAT;AAA3B,WAA1B,EAXG,CAYH;AACA;;AACAJ,UAAAA,QAAQ,GAAGA,QAAQ,CAACkF,MAAT,CAAgBP,QAAhB,CAAX,CAdG,CAeH;;AACAhD,UAAAA,OAAO,CAACC,GAAR,CAAY,CAACmC,QAAb;AAEH;;AACD,aAAKnB,QAAL,CAAc;AAAC5C,UAAAA;AAAD,SAAd;AACA2B,QAAAA,OAAO,CAACC,GAAR,CAAYqC,MAAZ,EAnCiB,CAoCjB;AACA;AACH,OA7Ec,CA8Ef;;AACH,KA1LiB;;AAAA,SA4LlBsB,kBA5LkB,GA4LG,MAAM;AACvB,WAAKrF,IAAL,GAAY,KAAKA,IAAL,CAAUsF,GAAV,CAAc,CAAC1B,WAAD,EAAcd,CAAd,EAAiByC,KAAjB,KAA2B;AAC7C,YAAIzC,CAAC,KAAK,CAAV,EAAa;AACT,mCAAWc,WAAX;AAAwBF,YAAAA,QAAQ,EAAE;AAAlC,aADS,CAC4B;AACxC;;AAH4C,cAIjC8B,IAJiC,GAId5B,WAJc,CAItC3D,GAJsC;AAAA,cAItBwF,IAJsB,GAId7B,WAJc,CAI3B1D,GAJ2B;AAK7C,cAAMwF,QAAQ,GAAG,IAAI/D,MAAM,CAACwC,MAAP,CAAcC,IAAd,CAAmBC,MAAvB,CAA8BmB,IAA9B,EAAoCC,IAApC,CAAjB;AAL6C,wBAOdF,KAAK,CAAC,CAAD,CAPS;AAAA,cAOjCI,IAPiC,WAOtC1F,GAPsC;AAAA,cAOtB2F,IAPsB,WAO3B1F,GAP2B;AAQ7C,cAAM2F,QAAQ,GAAG,IAAIlE,MAAM,CAACwC,MAAP,CAAcC,IAAd,CAAmBC,MAAvB,CAA8BsB,IAA9B,EAAoCC,IAApC,CAAjB,CAR6C,CAU7C;;AACA,cAAMlC,QAAQ,GAAG/B,MAAM,CAACwC,MAAP,CAAcC,IAAd,CAAmBM,QAAnB,CAA4BC,SAA5B,CAAsCmB,sBAAtC,CACbJ,QADa,EAEbG,QAFa,CAAjB;AAIA,iCAAWjC,WAAX;AAAwBF,UAAAA;AAAxB;AACH,OAhBO,CAAZ;AAmBH,KAhNiB;;AAAA,SAiNlBqC,MAjNkB,GAiNT,MAAM;AACXtE,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAK7B,KAAL,CAAWE,gBAAvB;AACA0B,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,aAAjB;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKR,qBAAL,CAA2B,CAA3B,CAAZ;AACA,aACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD;AACI,QAAA,WAAW,EAAE,CADjB;AAEI,QAAA,aAAa,EAAE;AACXjB,UAAAA,GAAG,EAAE,kBADM;AACcC,UAAAA,GAAG,EAAE;AADnB,SAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOQ,KAAKL,KAAL,CAAWC,QAAX,IACI,0CACI,oBAAC,MAAD;AAAQ,QAAA,QAAQ,EAAE,KAAKgB,yBAAL,CAA+B,CAA/B,CAAlB;AAAqD,QAAA,IAAI,EAAE,KAAKJ,SAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,UAAD;AACI,QAAA,GAAG,uBAAgB,KAAKI,yBAAL,CAA+B,CAA/B,CAAhB,CADP;AAEI,QAAA,OAAO,EAAE,IAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAM,KAAKM,aAAX,CAHJ,CADA,CADJ,EASI,oBAAC,MAAD;AAAQ,QAAA,QAAQ,EAAE,KAAKL,uBAAL,CAA6B,CAA7B,CAAlB;AAAmD,QAAA,IAAI,EAAE,KAAKL,SAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,UAAD;AACI,QAAA,GAAG,uBAAgB,KAAKK,uBAAL,CAA6B,CAA7B,CAAhB,CADP;AAEI,QAAA,OAAO,EAAE,IAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAM,KAAKM,WAAX,CAHJ,CADA,CATJ,EAgBK,KAAK4D,iBAhBV,EAiBK,KAAK1E,eAjBV,EAkBK,KAAKwC,cAlBV,EAmBI,oBAAC,QAAD;AAAU,QAAA,IAAI,EAAE,KAAK/C,IAArB;AAA2B,QAAA,OAAO,EAAE;AAACgD,UAAAA,WAAW,EAAE;AAAd,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAnBJ,EAoBI,oBAAC,MAAD;AAAQ,QAAA,QAAQ,EAAE,KAAKnD,KAAL,CAAWC,QAAX,CAAoB,KAAKD,KAAL,CAAWC,QAAX,CAAoBqC,MAApB,GAA6B,CAAjD,CAAlB;AACQ,QAAA,IAAI,EAAE,KAAKvB,QADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QApBJ,EAsBK,KAAKJ,GAAL,CAAS8E,GAAT,CAAa,CAACU,KAAD,EAAQC,KAAR,KAAkB;AAC5B,eAAO,oBAAC,MAAD;AAAQ,UAAA,QAAQ,EAAE,KAAKzF,GAAL,CAASyF,KAAT,CAAlB;AACQ,UAAA,IAAI,EAAE,KAAKtF,KADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAGH,OAJA,CAtBL,EA2BK,KAAKH,GAAL,CAAS8E,GAAT,CAAa,CAACY,QAAD,EAAWC,QAAX,KAAwB;AAClC,eAAO,oBAAC,MAAD;AAAQ,UAAA,QAAQ,EAAE,KAAK5F,eAAL,CAAqB4F,QAArB,CAAlB;AACQ,UAAA,IAAI,EAAE,KAAKtF,MADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAGH,OAJA,CA3BL,CARZ,CADJ,EA8CI;AAAK,QAAA,SAAS,EAAC,+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,IAAD;AAAM,QAAA,SAAS,EAAC,8BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,UAAD;AAAY,QAAA,SAAS,EAAC,8CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAO,KAAKI,aAAZ,CADH,CADJ,CADJ,EAMI,oBAAC,QAAD;AAAU,QAAA,SAAS,EAAC,iBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AACI,QAAA,SAAS,EAAC,2BADd;AAEI,QAAA,KAAK,EAAC,SAFV;AAGI,QAAA,QAAQ,EAAE,KAAKD,aAHnB;AAII,QAAA,OAAO,EAAE,KAAKoF,iBAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKV;AAAM,QAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACI,QAAA,GAAG,EAAC,KADR;AAEI,QAAA,GAAG,EAAE,oDAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CALU,EAUI;AAAM,QAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAVJ,CADJ,EAaI,oBAAC,MAAD;AACI,QAAA,SAAS,EAAC,sBADd;AAEI,QAAA,KAAK,EAAC,SAFV;AAGI,QAAA,OAAO,EAAE,KAAKC,gBAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIV;AAAM,QAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,GAAG,EAAC,KAAT;AACI,QAAA,GAAG,EAAC,qDADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAJU,EAQI;AAAM,QAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBARJ,CAbJ,CADJ,CANJ,CADA,CA9CJ,EAgFI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAE,KAAKxG,KAAL,CAAWyG,IAAxB;AAA8B,QAAA,MAAM,EAAE,MAAI,KAAKC,WAAL,EAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD,CAAO,MAAP;AAAc,QAAA,WAAW,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD,CAAO,KAAP;AAAa,QAAA,EAAE,EAAC,+BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADJ,CADJ,CADJ,EAMI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DADJ,CANJ,EAUI,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAuB,QAAA,OAAO,EAAE,MAAI,KAAKC,YAAL,CAAkB,KAAK3G,KAAL,CAAW4G,SAA7B,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFJ,EAKI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,SAAd;AAAyB,QAAA,OAAO,EAAE,MAAI,KAAKF,WAAL,EAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBALJ,CAVJ,CAhFJ,CADJ;AAyGH,KA9TiB;;AAEd,SAAKG,eAAL,GAAqB,KAAKA,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAArB;AAEH;;AACDJ,EAAAA,WAAW,CAACK,IAAD,EAAO;AACd,SAAKlE,QAAL,CAAc;AACV4D,MAAAA,IAAI,EAAE,CAAC,KAAKzG,KAAL,CAAWyG,IADR;AAEVG,MAAAA,SAAS,EAAEG;AAFD,KAAd;AAIH;;AACDF,EAAAA,eAAe,CAACE,IAAD,EAAM;AACjB,QAAI/G,KAAK,GAAGgH,MAAM,CAACC,MAAP,CAAc,KAAKjH,KAAnB,EAA0B;AAAKkH,MAAAA,aAAa,EAACH;AAAnB,KAA1B,CAAZ;AACA,SAAKlE,QAAL,CAAc;AACNsE,MAAAA,QAAQ,EAAE,CAAC,KAAKnH,KAAL,CAAWmH,QADhB;AAENnH,MAAAA;AAFM,KAAd;AAKH;;AA+DDuG,EAAAA,iBAAiB,GAAG;AAChB,QAAItE,GAAG,GAAGH,MAAM,CAACC,QAAP,CAAgBC,IAA1B;AACA,QAAIE,GAAJ;AACAA,IAAAA,GAAG,GAAGD,GAAG,CAACE,MAAJ,CAAW,OAAX,IAAsB,CAA5B;AACA,QAAIC,EAAE,GAAGH,GAAG,CAACI,MAAJ,CAAWH,GAAX,EAAgBD,GAAG,CAACK,MAAJ,GAAa,CAA7B,CAAT;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAYO,EAAZ;AACAhD,IAAAA,KAAK,CAACsD,GAAN,CAAU,mCAAmCN,EAA7C,EACKO,IADL,CACUT,GAAG,IAAIN,OAAO,CAACC,GAAR,CAAYK,GAAG,CAACa,IAAhB,CADjB;AAEAqE,IAAAA,KAAK,CAAC,QAAD,CAAL;AACH;;AAEDZ,EAAAA,gBAAgB,GAAG;AACf,QAAIvE,GAAG,GAAGH,MAAM,CAACC,QAAP,CAAgBC,IAA1B;AACA,QAAIE,GAAJ;AACAA,IAAAA,GAAG,GAAGD,GAAG,CAACE,MAAJ,CAAW,OAAX,IAAsB,CAA5B;AACA,QAAIC,EAAE,GAAGH,GAAG,CAACI,MAAJ,CAAWH,GAAX,EAAgBD,GAAG,CAACK,MAAJ,GAAa,CAA7B,CAAT;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAYO,EAAZ;AACAhD,IAAAA,KAAK,CAACsD,GAAN,CAAU,+CAA+CN,EAAzD,EACKO,IADL,CACUT,GAAG,IAAIN,OAAO,CAACC,GAAR,CAAYK,GAAG,CAACa,IAAhB,CADjB;AAEAqE,IAAAA,KAAK,CAAC,WAAD,CAAL;AACH;;AA/U6B;;AA0iBlC,MAAMC,YAAY,GAAGtI,YAAY,CAACD,aAAa,CAACc,GAAD,CAAd,CAAjC;AAEA,gBAAe,MACX,oBAAC,YAAD;AACI,EAAA,YAAY,EAAC,mFADjB;AAEI,EAAA,cAAc,EAAE;AAAK,IAAA,KAAK,EAAE;AAAC0H,MAAAA,MAAM;AAAP,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFpB;AAGI,EAAA,gBAAgB,EAAE;AAAK,IAAA,KAAK,EAAE;AAACA,MAAAA,MAAM,SAAP;AAAkBC,MAAAA,KAAK,EAAE;AAAzB,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHtB;AAII,EAAA,UAAU,EAAE;AAAK,IAAA,KAAK,EAAE;AAACD,MAAAA,MAAM;AAAP,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ","sourcesContent":["import React from 'react';\r\nimport {withGoogleMap, withScriptjs, GoogleMap, Polyline, Marker, InfoWindow} from 'react-google-maps'\r\nimport axios from \"axios\";\r\nimport LocationIQ from 'react-native-locationiq';\r\n\r\nimport {\r\n    Card,\r\n    CardHeader,\r\n    Container,\r\n    Button,\r\n   CardBody\r\n} from \"reactstrap\";\r\nimport {Modal} from \"react-bootstrap\";\r\n\r\nclass Map extends React.Component {\r\n    state = {\r\n        progress: [],\r\n        pathFromDatabase: []\r\n    }\r\n\r\n    /* pathData = [\r\n         { lat: 36.73085422985146, lng: 10.233588491073034 },\r\n         { lat: 36.73085422985146, lng: 10.233540808521369 },\r\n         { lat: 36.73085422985146, lng: 10.233493125969702 },\r\n         { lat: 36.73085422985146, lng: 10.23339775562768 },\r\n         { lat: 36.73085422985146, lng: 10.23335007307601 },\r\n         { lat: 36.73089244624914, lng: 10.233302390524344 },\r\n         { lat: 36.73089244624914, lng: 10.233254707972677 },\r\n         { lat: 36.73093066262783, lng: 10.233159337630651 },\r\n         { lat: 36.73093066262783, lng: 10.233111655078986 },\r\n         { lat: 36.73093066262783, lng: 10.233063972527319 },\r\n         { lat: 36.73093066262783, lng: 10.233016284736962 },\r\n         { lat: 36.73093066262783, lng: 10.232920919633628 },\r\n         { lat: 36.73093066262783, lng: 10.23287323708196 },\r\n         { lat: 36.73093066262783, lng: 10.232825554530296 },\r\n         { lat: 36.73093066262783, lng: 10.232777866739937 },\r\n         { lat: 36.73096887793784, lng: 10.23273018418827 },\r\n         { lat: 36.73100709427845, lng: 10.232682501636603 },\r\n         { lat: 36.73100709427845, lng: 10.232634819084936 },\r\n         { lat: 36.73100709427845, lng: 10.23258713129458 },\r\n         { lat: 36.73104531060007, lng: 10.23253944874291 },\r\n         { lat: 36.73108352690265, lng: 10.232444083639578 },\r\n         { lat: 36.73108352690265, lng: 10.232396401087911 },\r\n         { lat: 36.73112174318622, lng: 10.232301030745887 },\r\n         { lat: 36.73112174318622, lng: 10.232205665642553 },\r\n         { lat: 36.73119817569629, lng: 10.232110295300528 },\r\n         { lat: 36.73119817569629, lng: 10.232062612748862 },\r\n         { lat: 36.73123639192279, lng: 10.232014930197195 },\r\n         { lat: 36.73123639192279, lng: 10.231967247645528 },\r\n         { lat: 36.73127460813028, lng: 10.231871877303506 },\r\n         { lat: 36.731312823269064, lng: 10.231681141858145 },\r\n         { lat: 36.73138925558894, lng: 10.231538094203145 },\r\n         { lat: 36.73142747172032, lng: 10.231442723861123 },\r\n         { lat: 36.73146568783271, lng: 10.231395041309455 },\r\n         { lat: 36.73146568783271, lng: 10.231347358757787 },\r\n         { lat: 36.731503903926054, lng: 10.231204305864097 },\r\n         { lat: 36.731503903926054, lng: 10.23115662331243 },\r\n         { lat: 36.731503903926054, lng: 10.231108940760762 },\r\n         { lat: 36.73161855209196, lng: 10.230918205315405 },\r\n         { lat: 36.731656767059604, lng: 10.230822834973383 },\r\n         { lat: 36.731656767059604, lng: 10.230727469870047 },\r\n         { lat: 36.73169498305785, lng: 10.230632099528023 },\r\n         { lat: 36.73173319903708, lng: 10.230584416976354 },\r\n         { lat: 36.73184784686063, lng: 10.230489051873022 },\r\n         { lat: 36.73188606276375, lng: 10.230441364082665 },\r\n         { lat: 36.73188606276375, lng: 10.230393681531 },\r\n         { lat: 36.73188606276375, lng: 10.230298316427664 },\r\n         { lat: 36.73192427864787, lng: 10.23020294608564 },\r\n         { lat: 36.731962494512985, lng: 10.230059898430639 },\r\n         { lat: 36.73200071035906, lng: 10.229916845536946 },\r\n         { lat: 36.73200071035906, lng: 10.229821480433614 },\r\n         { lat: 36.732038925136465, lng: 10.22972611009159 },\r\n         { lat: 36.732038925136465, lng: 10.229678427539923 },\r\n         { lat: 36.732038925136465, lng: 10.2295830571979 },\r\n         { lat: 36.73207714094451, lng: 10.22953537464623 },\r\n         { lat: 36.73207714094451, lng: 10.229487692094564 },\r\n         { lat: 36.7321153567335, lng: 10.229392326991231 },\r\n         { lat: 36.73215357250348, lng: 10.229344639200875 },\r\n         { lat: 36.73219178825444, lng: 10.22929695664921 },\r\n         { lat: 36.7322300039864, lng: 10.22924927409754 },\r\n         { lat: 36.73226821969931, lng: 10.229153903755517 },\r\n         { lat: 36.73226821969931, lng: 10.229106221203848 },\r\n         { lat: 36.73230643539321, lng: 10.229010856100516 },\r\n         { lat: 36.732344651068075, lng: 10.228963173548848 },\r\n         { lat: 36.732382865674325, lng: 10.22877243810349 },\r\n         { lat: 36.73242108131117, lng: 10.228581702658133 },\r\n         { lat: 36.732459296928994, lng: 10.228486332316109 },\r\n         { lat: 36.732459296928994, lng: 10.228390967212775 },\r\n         { lat: 36.732459296928994, lng: 10.228343284661108 },\r\n         { lat: 36.732535728107536, lng: 10.228247914319086 },\r\n         { lat: 36.73257394366827, lng: 10.22815254921575 },\r\n         { lat: 36.73257394366827, lng: 10.228057178873726 },\r\n         { lat: 36.73261215921002, lng: 10.227914131218725 },\r\n         { lat: 36.73265037473273, lng: 10.227818760876703 },\r\n         { lat: 36.73268859023639, lng: 10.227723395773367 },\r\n         { lat: 36.732726804671444, lng: 10.227675713221702 },\r\n         { lat: 36.73276502013708, lng: 10.227628025431343 },\r\n         { lat: 36.7328032355837, lng: 10.227580342879676 },\r\n         { lat: 36.732841451011296, lng: 10.22753266032801 },\r\n         { lat: 36.732841451011296, lng: 10.22743729260533 },\r\n         { lat: 36.732879666419876, lng: 10.227389607434317 },\r\n         { lat: 36.73291788180943, lng: 10.22734192488265 },\r\n         { lat: 36.73295609717995, lng: 10.22729423971164 },\r\n         { lat: 36.732994312531474, lng: 10.227246557159972 },\r\n         { lat: 36.732994312531474, lng: 10.227198874608304 },\r\n         { lat: 36.732994312531474, lng: 10.227151189437294 },\r\n         { lat: 36.732994312531474, lng: 10.227103506885626 },\r\n         { lat: 36.73303252786394, lng: 10.22700813916295 },\r\n         { lat: 36.73303252786394, lng: 10.226960453991934 },\r\n         { lat: 36.73310895742226, lng: 10.22681740371759 },\r\n         { lat: 36.7331471726977, lng: 10.22676972116592 },\r\n         { lat: 36.7331471726977, lng: 10.22672203599491 },\r\n         { lat: 36.733185387954094, lng: 10.226626668272232 },\r\n         { lat: 36.733185387954094, lng: 10.226578985720563 },\r\n         { lat: 36.733223603191476, lng: 10.226531300549551 },\r\n         { lat: 36.733223603191476, lng: 10.226483617997886 },\r\n         { lat: 36.733223603191476, lng: 10.226435932826874 },\r\n         { lat: 36.73330003360914, lng: 10.22634056772354 },\r\n         { lat: 36.73330003360914, lng: 10.22624520000086 },\r\n         { lat: 36.73333824878948, lng: 10.226197514829849 },\r\n         { lat: 36.73337646395079, lng: 10.226149832278182 }\r\n     ]*/\r\n\r\n    path = [\r\n        {lat: 36.81477236601238, lng: 10.189578804217952},\r\n        {lat: 36.81477236601238, lng: 10.189650329355125},\r\n        {lat: 36.81477236601238, lng: 10.189674171940629},\r\n        {lat: 36.81477236601238, lng: 10.189698013216464},\r\n        {lat: 36.814810540600746, lng: 10.189817222214975},\r\n        {lat: 36.81482962841204, lng: 10.189841064800483},\r\n        {lat: 36.814848715170086, lng: 10.18988874866182},\r\n        {lat: 36.8148868897204, lng: 10.189960273798995},\r\n        {lat: 36.81490597751265, lng: 10.189984115074827},\r\n        {lat: 36.81492506425167, lng: 10.190007957660335},\r\n        {lat: 36.81494415098594, lng: 10.190031798936168},\r\n        {lat: 36.814963238763895, lng: 10.190055641521674},\r\n        {lat: 36.81498232548864, lng: 10.190079482797508},\r\n        {lat: 36.81500141325708, lng: 10.190103325383012},\r\n        {lat: 36.81502049997232, lng: 10.190103325383012},\r\n        {lat: 36.81507776218638, lng: 10.19015100793468},\r\n        {lat: 36.81511593557394, lng: 10.190174850520187},\r\n        {lat: 36.81513502330911, lng: 10.190174850520187},\r\n        {lat: 36.81515410999101, lng: 10.190198691796018},\r\n        {lat: 36.81523045876796, lng: 10.19024637565736},\r\n        {lat: 36.81524954647455, lng: 10.190270218242865},\r\n        {lat: 36.8152686331279, lng: 10.190294059518699},\r\n        {lat: 36.8153068074688, lng: 10.190317902104203},\r\n        {lat: 36.815344981790645, lng: 10.190389427241378},\r\n        {lat: 36.815383156093446, lng: 10.190437111102717},\r\n        {lat: 36.815421329852995, lng: 10.190460952378551},\r\n        {lat: 36.81545950411771, lng: 10.19050863623989},\r\n        {lat: 36.81547859124295, lng: 10.190532478825395},\r\n        {lat: 36.81549767836343, lng: 10.19055632010123},\r\n        {lat: 36.81549767836343, lng: 10.190604003962568},\r\n        {lat: 36.815516765479146, lng: 10.190627845238405},\r\n        {lat: 36.8155358525901, lng: 10.190651687823909},\r\n        {lat: 36.81557402627347, lng: 10.190699371685248},\r\n        {lat: 36.815593113370156, lng: 10.190723212961082},\r\n        {lat: 36.81561220046207, lng: 10.19074705554659},\r\n        {lat: 36.81563128754922, lng: 10.190770896822421},\r\n        {lat: 36.81563128754922, lng: 10.190794738098255},\r\n        {lat: 36.81566946170928, lng: 10.190890105820934},\r\n        {lat: 36.815707635850245, lng: 10.19091394840644},\r\n        {lat: 36.81572672238936, lng: 10.190937789682273},\r\n        {lat: 36.81578398355089, lng: 10.191009314819446},\r\n        {lat: 36.81580307059521, lng: 10.19103315740495},\r\n        {lat: 36.81582215763477, lng: 10.19103315740495},\r\n        {lat: 36.815841244669585, lng: 10.191056998680786},\r\n        {lat: 36.81586033169961, lng: 10.191056998680786},\r\n        {lat: 36.815898505221185, lng: 10.191104682542125},\r\n        {lat: 36.81591759223693, lng: 10.191128525127631},\r\n        {lat: 36.81597485325567, lng: 10.191152366403465},\r\n        {lat: 36.8159939402524, lng: 10.191152366403465},\r\n        {lat: 36.81607028766746, lng: 10.191176208988972},\r\n        {lat: 36.8161466355306, lng: 10.191176208988972},\r\n        {lat: 36.816203896378, lng: 10.191223891540638},\r\n        {lat: 36.816261156658314, lng: 10.191271575401977},\r\n        {lat: 36.81631841742005, lng: 10.191295417987483},\r\n        {lat: 36.816375678138925, lng: 10.191343101848823},\r\n        {lat: 36.81639476503571, lng: 10.191366943124656},\r\n        {lat: 36.81639476503571, lng: 10.191390785710162},\r\n        {lat: 36.81639476503571, lng: 10.191438469571501},\r\n        {lat: 36.81639476503571, lng: 10.191462310847333},\r\n        {lat: 36.81639476503571, lng: 10.191509994708674},\r\n        {lat: 36.816432938290745, lng: 10.191629203707185},\r\n        {lat: 36.81647111205095, lng: 10.191700728844358},\r\n        {lat: 36.816509285792165, lng: 10.191843780428377},\r\n        {lat: 36.8165283726556, lng: 10.191962989426889},\r\n        {lat: 36.81658563321743, lng: 10.192034515873734},\r\n        {lat: 36.816642893212176, lng: 10.192153724872249},\r\n        {lat: 36.816681066867716, lng: 10.192249092594926},\r\n        {lat: 36.816700153688316, lng: 10.1923206177321},\r\n        {lat: 36.816757414121625, lng: 10.19236830159344},\r\n        {lat: 36.81679558719581, lng: 10.19241598545478},\r\n        {lat: 36.816852847557755, lng: 10.192439826730613},\r\n        {lat: 36.816891021108546, lng: 10.192487510591953},\r\n        {lat: 36.81692919464032, lng: 10.192511353177457},\r\n        {lat: 36.816948280874826, lng: 10.192559035729124},\r\n        {lat: 36.81700554112254, lng: 10.192582878314632},\r\n        {lat: 36.81704371459719, lng: 10.192606719590465},\r\n        {lat: 36.81706280132738, lng: 10.192606719590465},\r\n        {lat: 36.817120060965195, lng: 10.192630562175971},\r\n        {lat: 36.817139147676315, lng: 10.192654403451805},\r\n        {lat: 36.81719640778121, lng: 10.192654403451805},\r\n        {lat: 36.81721549447333, lng: 10.192654403451805},\r\n        {lat: 36.81725366784332, lng: 10.192678246037309},\r\n        {lat: 36.81729184066997, lng: 10.192678246037309},\r\n        {lat: 36.81731092733828, lng: 10.192678246037309},\r\n        {lat: 36.817330014001854, lng: 10.192678246037309},\r\n        {lat: 36.817349100660635, lng: 10.192702087313144},\r\n        {lat: 36.817368187314685, lng: 10.192725929898648},\r\n        {lat: 36.8174063606085, lng: 10.192773612450315},\r\n        {lat: 36.81742544724824, lng: 10.192797455035823},\r\n        {lat: 36.81742544724824, lng: 10.192821296311656},\r\n        {lat: 36.81742544724824, lng: 10.192868980172996},\r\n        {lat: 36.81744453388325, lng: 10.192916664034335},\r\n        {lat: 36.81746361998927, lng: 10.192940506619841},\r\n        {lat: 36.817482706614754, lng: 10.193012031757014},\r\n        {lat: 36.817501793235465, lng: 10.193035873032848},\r\n        {lat: 36.81753996646263, lng: 10.193059715618354},\r\n        {lat: 36.81755905306906, lng: 10.193083556894187},\r\n        {lat: 36.81759722626768, lng: 10.193107399479691},\r\n        {lat: 36.817616312859826, lng: 10.193131240755527},\r\n        {lat: 36.817654485505656, lng: 10.193155083341033},\r\n        {lat: 36.822941269910814, lng: 10.198781761953349}\r\n\r\n    ]\r\n\r\n    velocity = 5\r\n    initialDate = new Date()\r\n    color = \"\";\r\n    polylineDrawGreen;\r\n    polylineDrawRed = [];\r\n    arr = [];\r\n    markerRed = [];\r\n    imageFlag = 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png';\r\n    image = 'https://img.icons8.com/flat_round/20/000000/error--v1.png';\r\n    imageCar = 'https://img.icons8.com/offices/30/000000/rv-campground.png';\r\n    imagex = 'https://img.icons8.com/doodle/16/000000/delete-sign.png'\r\n    get_address_lat_lng_start = [];\r\n    get_address_lat_lng_end = [];\r\n    polynedatabase;\r\n    plannig_state = true;\r\n    process_title = null;\r\n    start_reverse_address= [];\r\n    end_reverse_address= [];\r\n    start_address = null;\r\n    end_address = null;\r\n    constructor(props){\r\n        super(props);\r\n        this.HandleModalEval=this.HandleModalEval.bind(this);\r\n\r\n    }\r\n    HandleModal(item) {\r\n        this.setState({\r\n            show: !this.state.show,\r\n            DriveTest :item\r\n        });\r\n    }\r\n    HandleModalEval(item){\r\n        var state = Object.assign(this.state, {    DriveTestEval:item });\r\n        this.setState({\r\n                showEval: !this.state.showEval,\r\n                state\r\n            }\r\n        );\r\n    }\r\n    getDistance = () => {\r\n        // seconds between when the component loaded and now\r\n        const differentInTime = (new Date() - this.initialDate) / 1000 // pass to seconds\r\n        return differentInTime * this.velocity // d = v*t -- thanks Newton!\r\n    }\r\n    componentDidMount = () => {\r\n        console.log(window.location.href)\r\n        var str = window.location.href;\r\n        var res;\r\n        res = str.search(\"maps/\") + 5;\r\n        var re = str.substr(res, str.length - 1);\r\n        console.log(re)\r\n        this.interval = window.setInterval(this.moveObject, 1000)\r\n        axios.get(`http://localhost:4000/api/planning/get_address/` + re)\r\n            .then(response => {\r\n                this.setState({get_address: response.data});\r\n                console.log(response.data);\r\n                this.get_address_lat_lng_start.push({lat: response.data[0][0], lng: response.data[0][1]})\r\n                this.get_address_lat_lng_end.push({\r\n                    lat: response.data[response.data.length - 1][0],\r\n                    lng: response.data[response.data.length - 1][1]\r\n                })\r\n\r\n                for (var i = 0; i < response.data.length; i++) {\r\n                    this.state.pathFromDatabase.push({lat: response.data[i][0], lng: response.data[i][1]})\r\n                }\r\n\r\n                this.polynedatabase = <Polyline path={this.state.pathFromDatabase} options={{strokeColor: \"#FF0000\"}}/>\r\n                console.log(this.get_address_lat_lng_end);\r\n                console.log(this.get_address_lat_lng_start);\r\n\r\n                LocationIQ.init(\"d2eee4724fae22\"); // use a valid API key\r\n                 LocationIQ.reverse(this.get_address_lat_lng_start[0]['lat'], this.get_address_lat_lng_start[0]['lng'])\r\n                     .then(json => {\r\n                         this.start_reverse_address.push(json.address);\r\n                         this.start_address = this.start_reverse_address[0]['county'] +\" \"+ this.start_reverse_address[0]['state_district']+\" \"+this.start_reverse_address[0]['state'] +\", \"+ this.start_reverse_address[0]['country'];\r\n                     })\r\n                     .catch(error => console.warn(error));\r\n                 LocationIQ.reverse(this.get_address_lat_lng_end[0]['lat'], this.get_address_lat_lng_end[0]['lng'])\r\n                     .then(json => {\r\n                         this.end_reverse_address.push(json.address);\r\n                         this.end_address = this.end_reverse_address[0]['county'] +\" \"+ this.end_reverse_address[0]['state_district']+\" \"+this.end_reverse_address[0]['state'] +\", \"+ this.end_reverse_address[0]['country'];\r\n\r\n                         console.log(this.end_reverse_address[0]);\r\n                     })\r\n                     .catch(error => console.warn(error));\r\n\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n\r\n        axios.get('http://localhost:4000/api/planning/get_planning/' + re)\r\n            .then(res => {\r\n                this.plannig_state = res.data['DriveTest_State'];\r\n                this.process_title = res.data['DriveTest_Title'];\r\n\r\n            });\r\n       // lat: 36.822941269910814, lng: 10.198781761953349\r\n\r\n    }\r\n\r\n    start_rpa_process() {\r\n        var str = window.location.href;\r\n        var res;\r\n        res = str.search(\"maps/\") + 5;\r\n        var re = str.substr(res, str.length - 1);\r\n        console.log(re)\r\n        axios.get('http://localhost:4000/api/rpa/' + re)\r\n            .then(res => console.log(res.data));\r\n        alert('Hello!');\r\n    }\r\n\r\n    kill_rpa_process() {\r\n        var str = window.location.href;\r\n        var res;\r\n        res = str.search(\"maps/\") + 5;\r\n        var re = str.substr(res, str.length - 1);\r\n        console.log(re)\r\n        axios.get('http://localhost:4000/api/rpa/killProcess/' + re)\r\n            .then(res => console.log(res.data));\r\n        alert('Goodbye !');\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n        window.clearInterval(this.interval)\r\n    }\r\n\r\n    moveObject = () => {\r\n        const distance = this.getDistance()\r\n        if (!distance) {\r\n            return\r\n        }\r\n        /*function sleep(milliseconds) {\r\n            const date = Date.now();\r\n            let currentDate = null;\r\n            do {\r\n                currentDate = Date.now();\r\n            } while (currentDate - date < milliseconds);\r\n        }*/\r\n        let progress = this.path.filter(coordinates => coordinates.distance < distance)\r\n        const nextLine = this.path.find(coordinates => coordinates.distance > distance)\r\n        var random = 0;\r\n        var count = 0;\r\n        //var markerGreen;\r\n        if (!nextLine) {\r\n            this.setState({progress});\r\n            return // it's the end!\r\n        }\r\n        const lastLine = progress[progress.length - 1];\r\n        const lastLineLatLng = new window.google.maps.LatLng(\r\n            lastLine.lat,\r\n            lastLine.lng\r\n        );\r\n        const nextLineLatLng = new window.google.maps.LatLng(\r\n            nextLine.lat,\r\n            nextLine.lng\r\n        );\r\n        // distance of this line\r\n        const totalDistance = nextLine.distance - lastLine.distance\r\n        const percentage = (distance - lastLine.distance) / totalDistance\r\n        const position = window.google.maps.geometry.spherical.interpolate(\r\n            lastLineLatLng,\r\n            nextLineLatLng,\r\n            percentage\r\n        );\r\n\r\n        if (count % 5 === 0) {\r\n            random = Math.random();\r\n            if (random < 0.5) {\r\n                random = Math.floor(random)\r\n            } else {\r\n                random = Math.ceil(random)\r\n            }\r\n            if (random === 0) {\r\n                console.log(\"red\");\r\n                // this.polylineDrawRed =   <Polyline path={this.state.progress} options={{ strokeColor: \"#FF0000\"}} />\r\n                //console.log(position.lat()+\" , \"+ position.lng())\r\n                this.arr.push({lat: position.lat(), lng: position.lng()});\r\n                this.markerRed.push(<Marker position={this.arr[1]}/>);\r\n                progress = progress.concat(position);\r\n                this.setState({progress});\r\n            } else {\r\n                console.log(\"green\")\r\n                this.polylineDrawGreen = <Polyline path={this.state.progress} options={{strokeColor: \"#9efd38 \"}}/>\r\n                var prg = [];\r\n                var start = this.state.progress[0]\r\n                var end = this.state.progress[this.state.progress.length - 2]\r\n                prg.push(start);\r\n                prg.push(end);\r\n                console.log(this.state.progress[0])\r\n                console.log(this.state.progress[this.state.progress.length - 2])\r\n                console.log(prg)\r\n                this.polylineDrawRed.push({lat: position.lat(), lng: position.lng()});\r\n                // this.polylineDrawRed.push(prg)\r\n                // console.log(this.polylineDrawRed)\r\n                progress = progress.concat(position);\r\n                //  this.setState({progress});\r\n                console.log(!nextLine);\r\n\r\n            }\r\n            this.setState({progress});\r\n            console.log(random);\r\n            //sleep(1000)\r\n            // console.log(this.state.progress)\r\n        }\r\n        //this.setState({ progress });\r\n    }\r\n\r\n    componentWillMount = () => {\r\n        this.path = this.path.map((coordinates, i, array) => {\r\n                if (i === 0) {\r\n                    return {...coordinates, distance: 0} // it begins here!\r\n                }\r\n                const {lat: lat1, lng: lng1} = coordinates\r\n                const latLong1 = new window.google.maps.LatLng(lat1, lng1)\r\n\r\n                const {lat: lat2, lng: lng2} = array[0]\r\n                const latLong2 = new window.google.maps.LatLng(lat2, lng2)\r\n\r\n                // in meters:\r\n                const distance = window.google.maps.geometry.spherical.computeDistanceBetween(\r\n                    latLong1,\r\n                    latLong2\r\n                );\r\n                return {...coordinates, distance}\r\n            }\r\n        );\r\n\r\n    }\r\n    render = () => {\r\n        console.log(this.state.pathFromDatabase)\r\n        console.log(this.plannig_state)\r\n        console.log(this.start_reverse_address[0]);\r\n        return (\r\n            <Container>\r\n                <GoogleMap\r\n                    defaultZoom={8}\r\n                    defaultCenter={{\r\n                        lat: 36.822941269910814, lng: 10.198781761953349\r\n                    }}\r\n                >\r\n                    {\r\n                        this.state.progress && (\r\n                            <>\r\n                                <Marker position={this.get_address_lat_lng_start[0]} icon={this.imageFlag}>\r\n                                <InfoWindow\r\n                                    key={`infowindow-${this.get_address_lat_lng_start[0]}`}\r\n                                    visible={true}>\r\n                                    <div>{this.start_address}</div>\r\n                                </InfoWindow>\r\n                                </Marker>\r\n\r\n                                <Marker position={this.get_address_lat_lng_end[0]} icon={this.imageFlag}>\r\n                                <InfoWindow\r\n                                    key={`infowindow-${this.get_address_lat_lng_end[0]}`}\r\n                                    visible={true}>\r\n                                    <div>{this.end_address}</div>\r\n                                </InfoWindow>\r\n                                </Marker>\r\n                                {this.polylineDrawGreen}\r\n                                {this.polylineDrawRed}\r\n                                {this.polynedatabase}\r\n                                <Polyline path={this.path} options={{strokeColor: \"#fefaff\"}}/>\r\n                                <Marker position={this.state.progress[this.state.progress.length - 1]}\r\n                                        icon={this.imageCar}/>\r\n                                {this.arr.map((value, index) => {\r\n                                    return <Marker position={this.arr[index]}\r\n                                                   icon={this.image}\r\n                                    />\r\n                                })}\r\n                                {this.arr.map((valuePin, indexPin) => {\r\n                                    return <Marker position={this.polylineDrawRed[indexPin]}\r\n                                                   icon={this.imagex}\r\n                                    />\r\n                                })}\r\n                            </>\r\n                        )\r\n                    }\r\n                </GoogleMap>\r\n\r\n                <div className=\"row justify-content-md-center\">\r\n                <Card className=\"bg-secondary shadow border-0\">\r\n                    <CardHeader className=\"bg-transparent row justify-content-md-center\">\r\n                        <div className=\"text-muted text-center mt-2\">\r\n                           <big> {this.process_title}</big>\r\n                        </div>\r\n                    </CardHeader>\r\n                    <CardBody className=\"px-lg-5 py-lg-5\">\r\n                        <div className=\"text-center\">\r\n                            <Button\r\n                                className=\"btn-neutral btn-icon mr-4\"\r\n                                color=\"default\"\r\n                                disabled={this.plannig_state}\r\n                                onClick={this.start_rpa_process}>\r\n                  <span className=\"btn-inner--icon\">\r\n                    <img\r\n                        alt=\"...\"\r\n                        src={\"https://img.icons8.com/officel/40/000000/start.png\"}/>\r\n                  </span>\r\n                                <span className=\"btn-inner--text\">Run</span>\r\n                            </Button>\r\n                            <Button\r\n                                className=\"btn-neutral btn-icon\"\r\n                                color=\"default\"\r\n                                onClick={this.kill_rpa_process}>\r\n                  <span className=\"btn-inner--icon\">\r\n                    <img alt=\"...\"\r\n                        src=\"https://img.icons8.com/officel/40/000000/cancel.png\"/>\r\n                  </span>\r\n                                <span className=\"btn-inner--text\">Cancel</span>\r\n                            </Button>\r\n                        </div>\r\n                    </CardBody>\r\n                </Card></div>\r\n                <Modal show={this.state.show} onHide={()=>this.HandleModal()}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                            <h2>DELETE CONFIRMATION </h2>\r\n                        </Modal.Title >\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <h4> Are You sure You want to delete this drive test ? </h4>\r\n\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n\r\n                        <Button color=\"danger\" onClick={()=>this.HandleDelete(this.state.DriveTest)} >\r\n                            Confirm\r\n                        </Button>\r\n                        <Button color=\"default\"  onClick={()=>this.HandleModal()}>\r\n                            Close\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n\r\n\r\n            </Container>\r\n        )\r\n    }\r\n}\r\nconst MapComponent = withScriptjs(withGoogleMap(Map))\r\n\r\nexport default () => (\r\n    <MapComponent\r\n        googleMapURL=\"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\"\r\n        loadingElement={<div style={{height: `100%`}}/>}\r\n        containerElement={<div style={{height: `500px`, width: '100%'}}/>}\r\n        mapElement={<div style={{height: `120%`}}/>}\r\n    />\r\n)\r\n"]},"metadata":{},"sourceType":"module"}