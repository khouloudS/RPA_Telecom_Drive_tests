{"ast":null,"code":"'use strict';\n\nvar flatMap = require('./util').flatMap;\n\nvar guessBrowser = require('./util').guessBrowser;\n\nvar guessBrowserVersion = require('./util').guessBrowserVersion;\n\nvar getSdpFormat = require('./util/sdp').getSdpFormat;\n\nvar guess = guessBrowser();\nvar guessVersion = guessBrowserVersion();\nvar isChrome = guess === 'chrome';\nvar isFirefox = guess === 'firefox';\nvar isSafari = guess === 'safari';\nvar chromeMajorVersion = isChrome ? guessVersion.major : null;\nvar CHROME_LEGACY_MAX_AUDIO_LEVEL = 32767;\n/**\r\n * Get the standardized {@link RTCPeerConnection} statistics.\r\n * @param {RTCPeerConnection} peerConnection\r\n * @param {object} [options] - Used for testing\r\n * @returns {Promise.<StandardizedStatsResponse>}\r\n */\n\nfunction getStats(peerConnection, options) {\n  if (!(peerConnection && typeof peerConnection.getStats === 'function')) {\n    return Promise.reject(new Error('Given PeerConnection does not support getStats'));\n  }\n\n  return _getStats(peerConnection, options);\n}\n/**\r\n * getStats() implementation.\r\n * @param {RTCPeerConnection} peerConnection\r\n * @param {object} [options] - Used for testing\r\n * @returns {Promise.<StandardizedStatsResponse>}\r\n */\n\n\nfunction _getStats(peerConnection, options) {\n  var localAudioTracks = getTracks(peerConnection, 'audio', 'local');\n  var localVideoTracks = getTracks(peerConnection, 'video', 'local');\n  var remoteAudioTracks = getTracks(peerConnection, 'audio');\n  var remoteVideoTracks = getTracks(peerConnection, 'video');\n  var statsResponse = {\n    activeIceCandidatePair: null,\n    localAudioTrackStats: [],\n    localVideoTrackStats: [],\n    remoteAudioTrackStats: [],\n    remoteVideoTrackStats: []\n  };\n  var trackStatsPromises = flatMap([[localAudioTracks, 'localAudioTrackStats', false], [localVideoTracks, 'localVideoTrackStats', false], [remoteAudioTracks, 'remoteAudioTrackStats', true], [remoteVideoTracks, 'remoteVideoTrackStats', true]], function (triple) {\n    var tracks = triple[0];\n    var statsArrayName = triple[1];\n    var isRemote = triple[2];\n    return tracks.map(function (track) {\n      return getTrackStats(peerConnection, track, Object.assign({\n        isRemote: isRemote\n      }, options)).then(function (stats) {\n        stats.trackId = track.id;\n        statsResponse[statsArrayName].push(stats);\n      });\n    });\n  });\n  return Promise.all(trackStatsPromises).then(function () {\n    return getActiveIceCandidatePairStats(peerConnection, options);\n  }).then(function (activeIceCandidatePairStatsReport) {\n    statsResponse.activeIceCandidatePair = activeIceCandidatePairStatsReport;\n    return statsResponse;\n  });\n}\n/**\r\n * Generate the {@link StandardizedActiveIceCandidatePairStatsReport} for the\r\n * {@link RTCPeerConnection}.\r\n * @param {RTCPeerConnection} peerConnection\r\n * @param {object} [options]\r\n * @returns {Promise<StandardizedActiveIceCandidatePairStatsReport>}\r\n */\n\n\nfunction getActiveIceCandidatePairStats(peerConnection, options) {\n  options = options || {};\n\n  if (typeof options.testForChrome !== 'undefined' || isChrome || typeof options.testForSafari !== 'undefined' || isSafari) {\n    return peerConnection.getStats().then(standardizeChromeOrSafariActiveIceCandidatePairStats);\n  }\n\n  if (typeof options.testForFirefox !== 'undefined' || isFirefox) {\n    return peerConnection.getStats().then(standardizeFirefoxActiveIceCandidatePairStats);\n  }\n\n  return Promise.reject(new Error('RTCPeerConnection#getStats() not supported'));\n}\n/**\r\n * Standardize the active RTCIceCandidate pair's statistics in Chrome or Safari.\r\n * @param {RTCStatsReport} stats\r\n * @returns {?StandardizedActiveIceCandidatePairStatsReport}\r\n */\n\n\nfunction standardizeChromeOrSafariActiveIceCandidatePairStats(stats) {\n  var activeCandidatePairStats = Array.from(stats.values()).find(function (stat) {\n    return stat.type === 'candidate-pair' && stat.nominated;\n  });\n\n  if (!activeCandidatePairStats) {\n    return null;\n  }\n\n  var activeLocalCandidateStats = stats.get(activeCandidatePairStats.localCandidateId);\n  var activeRemoteCandidateStats = stats.get(activeCandidatePairStats.remoteCandidateId);\n  var standardizedCandidateStatsKeys = [{\n    key: 'candidateType',\n    type: 'string'\n  }, {\n    key: 'ip',\n    type: 'string'\n  }, {\n    key: 'port',\n    type: 'number'\n  }, {\n    key: 'priority',\n    type: 'number'\n  }, {\n    key: 'protocol',\n    type: 'string'\n  }, {\n    key: 'url',\n    type: 'string'\n  }];\n  var standardizedLocalCandidateStatsKeys = standardizedCandidateStatsKeys.concat([{\n    key: 'deleted',\n    type: 'boolean'\n  }, {\n    key: 'relayProtocol',\n    type: 'string'\n  }]);\n  var standatdizedLocalCandidateStatsReport = activeLocalCandidateStats ? standardizedLocalCandidateStatsKeys.reduce(function (report, keyInfo) {\n    report[keyInfo.key] = typeof activeLocalCandidateStats[keyInfo.key] === keyInfo.type ? activeLocalCandidateStats[keyInfo.key] : keyInfo.key === 'deleted' ? false : null;\n    return report;\n  }, {}) : null;\n  var standardizedRemoteCandidateStatsReport = activeRemoteCandidateStats ? standardizedCandidateStatsKeys.reduce(function (report, keyInfo) {\n    report[keyInfo.key] = typeof activeRemoteCandidateStats[keyInfo.key] === keyInfo.type ? activeRemoteCandidateStats[keyInfo.key] : null;\n    return report;\n  }, {}) : null;\n  return [{\n    key: 'availableIncomingBitrate',\n    type: 'number'\n  }, {\n    key: 'availableOutgoingBitrate',\n    type: 'number'\n  }, {\n    key: 'bytesReceived',\n    type: 'number'\n  }, {\n    key: 'bytesSent',\n    type: 'number'\n  }, {\n    key: 'consentRequestsSent',\n    type: 'number'\n  }, {\n    key: 'currentRoundTripTime',\n    type: 'number'\n  }, {\n    key: 'lastPacketReceivedTimestamp',\n    type: 'number'\n  }, {\n    key: 'lastPacketSentTimestamp',\n    type: 'number'\n  }, {\n    key: 'nominated',\n    type: 'boolean'\n  }, {\n    key: 'priority',\n    type: 'number'\n  }, {\n    key: 'readable',\n    type: 'boolean'\n  }, {\n    key: 'requestsReceived',\n    type: 'number'\n  }, {\n    key: 'requestsSent',\n    type: 'number'\n  }, {\n    key: 'responsesReceived',\n    type: 'number'\n  }, {\n    key: 'responsesSent',\n    type: 'number'\n  }, {\n    key: 'retransmissionsReceived',\n    type: 'number'\n  }, {\n    key: 'retransmissionsSent',\n    type: 'number'\n  }, {\n    key: 'state',\n    type: 'string'\n  }, {\n    key: 'totalRoundTripTime',\n    type: 'number'\n  }, {\n    key: 'transportId',\n    type: 'string'\n  }, {\n    key: 'writable',\n    type: 'boolean'\n  }].reduce(function (report, keyInfo) {\n    report[keyInfo.key] = typeof activeCandidatePairStats[keyInfo.key] === keyInfo.type ? activeCandidatePairStats[keyInfo.key] : null;\n    return report;\n  }, {\n    localCandidate: standatdizedLocalCandidateStatsReport,\n    remoteCandidate: standardizedRemoteCandidateStatsReport\n  });\n}\n/**\r\n * Standardize the active RTCIceCandidate pair's statistics in Firefox.\r\n * @param {RTCStatsReport} stats\r\n * @returns {?StandardizedActiveIceCandidatePairStatsReport}\r\n */\n\n\nfunction standardizeFirefoxActiveIceCandidatePairStats(stats) {\n  var activeCandidatePairStats = Array.from(stats.values()).find(function (stat) {\n    return stat.type === 'candidate-pair' && stat.nominated;\n  });\n\n  if (!activeCandidatePairStats) {\n    return null;\n  }\n\n  var activeLocalCandidateStats = stats.get(activeCandidatePairStats.localCandidateId);\n  var activeRemoteCandidateStats = stats.get(activeCandidatePairStats.remoteCandidateId);\n  var standardizedCandidateStatsKeys = [{\n    key: 'candidateType',\n    type: 'string'\n  }, {\n    key: 'ip',\n    ffKeys: ['address', 'ipAddress'],\n    type: 'string'\n  }, {\n    key: 'port',\n    ffKeys: ['portNumber'],\n    type: 'number'\n  }, {\n    key: 'priority',\n    type: 'number'\n  }, {\n    key: 'protocol',\n    ffKeys: ['transport'],\n    type: 'string'\n  }, {\n    key: 'url',\n    type: 'string'\n  }];\n  var standardizedLocalCandidateStatsKeys = standardizedCandidateStatsKeys.concat([{\n    key: 'deleted',\n    type: 'boolean'\n  }, {\n    key: 'relayProtocol',\n    type: 'string'\n  }]);\n  var candidateTypes = {\n    host: 'host',\n    peerreflexive: 'prflx',\n    relayed: 'relay',\n    serverreflexive: 'srflx'\n  };\n  var standatdizedLocalCandidateStatsReport = activeLocalCandidateStats ? standardizedLocalCandidateStatsKeys.reduce(function (report, keyInfo) {\n    var key = keyInfo.ffKeys && keyInfo.ffKeys.find(function (key) {\n      return key in activeLocalCandidateStats;\n    }) || keyInfo.key;\n    report[keyInfo.key] = typeof activeLocalCandidateStats[key] === keyInfo.type ? key === 'candidateType' ? candidateTypes[activeLocalCandidateStats[key]] || activeLocalCandidateStats[key] : activeLocalCandidateStats[key] : key === 'deleted' ? false : null;\n    return report;\n  }, {}) : null;\n  var standardizedRemoteCandidateStatsReport = activeRemoteCandidateStats ? standardizedCandidateStatsKeys.reduce(function (report, keyInfo) {\n    var key = keyInfo.ffKeys && keyInfo.ffKeys.find(function (key) {\n      return key in activeRemoteCandidateStats;\n    }) || keyInfo.key;\n    report[keyInfo.key] = typeof activeRemoteCandidateStats[key] === keyInfo.type ? key === 'candidateType' ? candidateTypes[activeRemoteCandidateStats[key]] || activeRemoteCandidateStats[key] : activeRemoteCandidateStats[key] : null;\n    return report;\n  }, {}) : null;\n  return [{\n    key: 'availableIncomingBitrate',\n    type: 'number'\n  }, {\n    key: 'availableOutgoingBitrate',\n    type: 'number'\n  }, {\n    key: 'bytesReceived',\n    type: 'number'\n  }, {\n    key: 'bytesSent',\n    type: 'number'\n  }, {\n    key: 'consentRequestsSent',\n    type: 'number'\n  }, {\n    key: 'currentRoundTripTime',\n    type: 'number'\n  }, {\n    key: 'lastPacketReceivedTimestamp',\n    type: 'number'\n  }, {\n    key: 'lastPacketSentTimestamp',\n    type: 'number'\n  }, {\n    key: 'nominated',\n    type: 'boolean'\n  }, {\n    key: 'priority',\n    type: 'number'\n  }, {\n    key: 'readable',\n    type: 'boolean'\n  }, {\n    key: 'requestsReceived',\n    type: 'number'\n  }, {\n    key: 'requestsSent',\n    type: 'number'\n  }, {\n    key: 'responsesReceived',\n    type: 'number'\n  }, {\n    key: 'responsesSent',\n    type: 'number'\n  }, {\n    key: 'retransmissionsReceived',\n    type: 'number'\n  }, {\n    key: 'retransmissionsSent',\n    type: 'number'\n  }, {\n    key: 'state',\n    type: 'string'\n  }, {\n    key: 'totalRoundTripTime',\n    type: 'number'\n  }, {\n    key: 'transportId',\n    type: 'string'\n  }, {\n    key: 'writable',\n    type: 'boolean'\n  }].reduce(function (report, keyInfo) {\n    report[keyInfo.key] = typeof activeCandidatePairStats[keyInfo.key] === keyInfo.type ? activeCandidatePairStats[keyInfo.key] : null;\n    return report;\n  }, {\n    localCandidate: standatdizedLocalCandidateStatsReport,\n    remoteCandidate: standardizedRemoteCandidateStatsReport\n  });\n}\n/**\r\n * Get local/remote audio/video MediaStreamTracks.\r\n * @param {RTCPeerConnection} peerConnection - The RTCPeerConnection\r\n * @param {string} kind - 'audio' or 'video'\r\n * @param {string} [localOrRemote] - 'local' or 'remote'\r\n * @returns {Array<MediaStreamTrack>}\r\n */\n\n\nfunction getTracks(peerConnection, kind, localOrRemote) {\n  var getSendersOrReceivers = localOrRemote === 'local' ? 'getSenders' : 'getReceivers';\n\n  if (peerConnection[getSendersOrReceivers]) {\n    return peerConnection[getSendersOrReceivers]().map(function (senderOrReceiver) {\n      return senderOrReceiver.track;\n    }).filter(function (track) {\n      return track && track.kind === kind;\n    });\n  }\n\n  var getStreams = localOrRemote === 'local' ? 'getLocalStreams' : 'getRemoteStreams';\n  return flatMap(peerConnection[getStreams](), function (stream) {\n    var getTracks = kind === 'audio' ? 'getAudioTracks' : 'getVideoTracks';\n    return stream[getTracks]();\n  });\n}\n/**\r\n * Get the standardized statistics for a particular MediaStreamTrack.\r\n * @param {RTCPeerConnection} peerConnection\r\n * @param {MediaStreamTrack} track\r\n * @param {object} [options] - Used for testing\r\n * @returns {Promise.<StandardizedTrackStatsReport>}\r\n */\n\n\nfunction getTrackStats(peerConnection, track, options) {\n  options = options || {};\n\n  if (typeof options.testForChrome !== 'undefined' || isChrome) {\n    return chromeOrSafariGetTrackStats(peerConnection, track);\n  }\n\n  if (typeof options.testForFirefox !== 'undefined' || isFirefox) {\n    return firefoxGetTrackStats(peerConnection, track, options.isRemote);\n  }\n\n  if (typeof options.testForSafari !== 'undefined' || isSafari) {\n    if (typeof options.testForSafari !== 'undefined' || getSdpFormat() === 'unified') {\n      return chromeOrSafariGetTrackStats(peerConnection, track);\n    } // NOTE(syerrapragada): getStats() is not supported on\n    // Safari versions where plan-b is the SDP format\n    // due to this bug: https://bugs.webkit.org/show_bug.cgi?id=192601\n\n\n    return Promise.reject(new Error(['getStats() is not supported on this version of Safari', 'due to this bug: https://bugs.webkit.org/show_bug.cgi?id=192601'].join(' ')));\n  }\n\n  return Promise.reject(new Error('RTCPeerConnection#getStats() not supported'));\n}\n/**\r\n * Get the standardized statistics for a particular MediaStreamTrack in Chrome or Safari.\r\n * @param {RTCPeerConnection} peerConnection\r\n * @param {MediaStreamTrack} track\r\n * @returns {Promise.<StandardizedTrackStatsReport>}\r\n */\n\n\nfunction chromeOrSafariGetTrackStats(peerConnection, track) {\n  return new Promise(function (resolve, reject) {\n    if (chromeMajorVersion && chromeMajorVersion < 67) {\n      peerConnection.getStats(function (response) {\n        resolve(standardizeChromeLegacyStats(response, track));\n      }, null, reject);\n      return;\n    }\n\n    peerConnection.getStats(track).then(function (response) {\n      resolve(standardizeChromeOrSafariStats(response));\n    }, reject);\n  });\n}\n/**\r\n * Get the standardized statistics for a particular MediaStreamTrack in Firefox.\r\n * @param {RTCPeerConnection} peerConnection\r\n * @param {MediaStreamTrack} track\r\n * @param {boolean} isRemote\r\n * @returns {Promise.<StandardizedTrackStatsReport>}\r\n */\n\n\nfunction firefoxGetTrackStats(peerConnection, track, isRemote) {\n  return new Promise(function (resolve, reject) {\n    peerConnection.getStats(track).then(function (response) {\n      resolve(standardizeFirefoxStats(response, isRemote));\n    }, reject);\n  });\n}\n/**\r\n * Standardize the MediaStreamTrack's legacy statistics in Chrome.\r\n * @param {RTCStatsResponse} response\r\n * @param {MediaStreamTrack} track\r\n * @returns {StandardizedTrackStatsReport}\r\n */\n\n\nfunction standardizeChromeLegacyStats(response, track) {\n  var ssrcReport = response.result().find(function (report) {\n    return report.type === 'ssrc' && report.stat('googTrackId') === track.id;\n  });\n  var standardizedStats = {};\n\n  if (ssrcReport) {\n    standardizedStats.timestamp = Math.round(Number(ssrcReport.timestamp));\n    standardizedStats = ssrcReport.names().reduce(function (stats, name) {\n      switch (name) {\n        case 'googCodecName':\n          stats.codecName = ssrcReport.stat(name);\n          break;\n\n        case 'googRtt':\n          stats.roundTripTime = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googJitterReceived':\n          stats.jitter = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameWidthInput':\n          stats.frameWidthInput = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameHeightInput':\n          stats.frameHeightInput = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameWidthSent':\n          stats.frameWidthSent = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameHeightSent':\n          stats.frameHeightSent = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameWidthReceived':\n          stats.frameWidthReceived = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameHeightReceived':\n          stats.frameHeightReceived = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameRateInput':\n          stats.frameRateInput = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameRateSent':\n          stats.frameRateSent = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameRateReceived':\n          stats.frameRateReceived = Number(ssrcReport.stat(name));\n          break;\n\n        case 'ssrc':\n          stats[name] = ssrcReport.stat(name);\n          break;\n\n        case 'bytesReceived':\n        case 'bytesSent':\n        case 'packetsLost':\n        case 'packetsReceived':\n        case 'packetsSent':\n        case 'audioInputLevel':\n        case 'audioOutputLevel':\n          stats[name] = Number(ssrcReport.stat(name));\n          break;\n      }\n\n      return stats;\n    }, standardizedStats);\n  }\n\n  return standardizedStats;\n}\n/**\r\n * Standardize the MediaStreamTrack's statistics in Chrome or Safari.\r\n * @param {RTCStatsResponse} response\r\n * @returns {StandardizedTrackStatsReport}\r\n */\n\n\nfunction standardizeChromeOrSafariStats(response) {\n  var inbound = null;\n  var outbound = null;\n  var track = null;\n  var codec = null;\n  response.forEach(function (stat) {\n    switch (stat.type) {\n      case 'inbound-rtp':\n        inbound = stat;\n        break;\n\n      case 'outbound-rtp':\n        outbound = stat;\n        break;\n\n      case 'track':\n        track = stat;\n        break;\n\n      case 'codec':\n        codec = stat;\n        break;\n    }\n  });\n  var isRemote = track && track.remoteSource;\n  var standardizedStats = {};\n  var first = isRemote ? inbound : outbound;\n  var second = track;\n  var third = codec;\n\n  function getStatValue(name) {\n    if (first && typeof first[name] !== 'undefined') {\n      return first[name];\n    }\n\n    if (second && typeof second[name] !== 'undefined') {\n      return second[name];\n    }\n\n    if (third && typeof third[name] !== 'undefined') {\n      return third[name];\n    }\n\n    return null;\n  }\n\n  var ssrc = getStatValue('ssrc');\n\n  if (typeof ssrc === 'number') {\n    standardizedStats.ssrc = String(ssrc);\n  }\n\n  var timestamp = getStatValue('timestamp');\n  standardizedStats.timestamp = Math.round(timestamp);\n  var mimeType = getStatValue('mimeType');\n\n  if (typeof mimeType === 'string') {\n    mimeType = mimeType.split('/');\n    standardizedStats.codecName = mimeType[mimeType.length - 1];\n  }\n\n  var roundTripTime = getStatValue('roundTripTime');\n\n  if (typeof roundTripTime === 'number') {\n    standardizedStats.roundTripTime = roundTripTime;\n  }\n\n  var jitter = getStatValue('jitter');\n\n  if (typeof jitter === 'number') {\n    standardizedStats.jitter = Math.round(jitter * 1000);\n  }\n\n  var frameWidth = getStatValue('frameWidth');\n\n  if (typeof frameWidth === 'number') {\n    if (isRemote) {\n      standardizedStats.frameWidthReceived = frameWidth;\n    } else {\n      standardizedStats.frameWidthSent = frameWidth;\n    }\n  }\n\n  var frameHeight = getStatValue('frameHeight');\n\n  if (typeof frameHeight === 'number') {\n    if (isRemote) {\n      standardizedStats.frameHeightReceived = frameHeight;\n    } else {\n      standardizedStats.frameHeightSent = frameHeight;\n    }\n  }\n\n  var framesPerSecond = getStatValue('framesPerSecond');\n\n  if (typeof framesPerSecond === 'number') {\n    standardizedStats.frameRateSent = framesPerSecond;\n  }\n\n  var bytesReceived = getStatValue('bytesReceived');\n\n  if (typeof bytesReceived === 'number') {\n    standardizedStats.bytesReceived = bytesReceived;\n  }\n\n  var bytesSent = getStatValue('bytesSent');\n\n  if (typeof bytesSent === 'number') {\n    standardizedStats.bytesSent = bytesSent;\n  }\n\n  var packetsLost = getStatValue('packetsLost');\n\n  if (typeof packetsLost === 'number') {\n    standardizedStats.packetsLost = packetsLost;\n  }\n\n  var packetsReceived = getStatValue('packetsReceived');\n\n  if (typeof packetsReceived === 'number') {\n    standardizedStats.packetsReceived = packetsReceived;\n  }\n\n  var packetsSent = getStatValue('packetsSent');\n\n  if (typeof packetsSent === 'number') {\n    standardizedStats.packetsSent = packetsSent;\n  }\n\n  var audioLevel = getStatValue('audioLevel');\n\n  if (typeof audioLevel === 'number') {\n    audioLevel = Math.round(audioLevel * CHROME_LEGACY_MAX_AUDIO_LEVEL);\n\n    if (isRemote) {\n      standardizedStats.audioOutputLevel = audioLevel;\n    } else {\n      standardizedStats.audioInputLevel = audioLevel;\n    }\n  }\n\n  return standardizedStats;\n}\n/**\r\n * Standardize the MediaStreamTrack's statistics in Firefox.\r\n * @param {RTCStatsReport} response\r\n * @param {boolean} isRemote\r\n * @returns {StandardizedTrackStatsReport}\r\n */\n\n\nfunction standardizeFirefoxStats(response, isRemote) {\n  // NOTE(mroberts): If getStats is called on a closed RTCPeerConnection,\n  // Firefox returns undefined instead of an RTCStatsReport. We workaround this\n  // here. See the following bug for more details:\n  //\n  //   https://bugzilla.mozilla.org/show_bug.cgi?id=1377225\n  //\n  response = response || new Map();\n  var inbound = null;\n  var outbound = null; // NOTE(mmalavalli): Starting from Firefox 63, RTC{Inbound, Outbound}RTPStreamStats.isRemote\n  // will be deprecated, followed by its removal in Firefox 66. Also, trying to\n  // access members of the remote RTC{Inbound, Outbound}RTPStreamStats without\n  // using RTCStatsReport.get(remoteId) will trigger console warnings. So, we\n  // no longer depend on \"isRemote\", and we call RTCStatsReport.get(remoteId)\n  // to access the remote RTC{Inbound, Outbound}RTPStreamStats.\n  //\n  // Source: https://blog.mozilla.org/webrtc/getstats-isremote-65/\n  //\n\n  response.forEach(function (stat) {\n    if (stat.isRemote) {\n      return;\n    }\n\n    switch (stat.type) {\n      case 'inbound-rtp':\n        inbound = stat;\n        outbound = response.get(stat.remoteId);\n        break;\n\n      case 'outbound-rtp':\n        outbound = stat;\n        inbound = response.get(stat.remoteId);\n        break;\n    }\n  });\n  var first = isRemote ? inbound : outbound;\n  var second = isRemote ? outbound : inbound;\n\n  function getStatValue(name) {\n    if (first && typeof first[name] !== 'undefined') {\n      return first[name];\n    }\n\n    if (second && typeof second[name] !== 'undefined') {\n      return second[name];\n    }\n\n    return null;\n  }\n\n  var standardizedStats = {};\n  var timestamp = getStatValue('timestamp');\n  standardizedStats.timestamp = Math.round(timestamp);\n  var ssrc = getStatValue('ssrc');\n\n  if (typeof ssrc === 'number') {\n    standardizedStats.ssrc = String(ssrc);\n  }\n\n  var bytesSent = getStatValue('bytesSent');\n\n  if (typeof bytesSent === 'number') {\n    standardizedStats.bytesSent = bytesSent;\n  }\n\n  var packetsLost = getStatValue('packetsLost');\n\n  if (typeof packetsLost === 'number') {\n    standardizedStats.packetsLost = packetsLost;\n  }\n\n  var packetsSent = getStatValue('packetsSent');\n\n  if (typeof packetsSent === 'number') {\n    standardizedStats.packetsSent = packetsSent;\n  }\n\n  var roundTripTime = getStatValue('roundTripTime');\n\n  if (typeof roundTripTime === 'number') {\n    standardizedStats.roundTripTime = roundTripTime;\n  }\n\n  var jitter = getStatValue('jitter');\n\n  if (typeof jitter === 'number') {\n    standardizedStats.jitter = Math.round(jitter * 1000);\n  }\n\n  var frameRateSent = getStatValue('framerateMean');\n\n  if (typeof frameRateSent === 'number') {\n    standardizedStats.frameRateSent = Math.round(frameRateSent);\n  }\n\n  var bytesReceived = getStatValue('bytesReceived');\n\n  if (typeof bytesReceived === 'number') {\n    standardizedStats.bytesReceived = bytesReceived;\n  }\n\n  var packetsReceived = getStatValue('packetsReceived');\n\n  if (typeof packetsReceived === 'number') {\n    standardizedStats.packetsReceived = packetsReceived;\n  }\n\n  var frameRateReceived = getStatValue('framerateMean');\n\n  if (typeof frameRateReceived === 'number') {\n    standardizedStats.frameRateReceived = Math.round(frameRateReceived);\n  }\n\n  return standardizedStats;\n}\n/**\r\n * Standardized RTCIceCandidate statistics.\r\n * @typedef {object} StandardizedIceCandidateStatsReport\r\n * @property {'host'|'prflx'|'relay'|'srflx'} candidateType\r\n * @property {string} ip\r\n * @property {number} port\r\n * @property {number} priority\r\n * @property {'tcp'|'udp'} protocol\r\n * @property {string} url\r\n */\n\n/**\r\n * Standardized local RTCIceCandidate statistics.\r\n * @typedef {StandardizedIceCandidateStatsReport} StandardizedLocalIceCandidateStatsReport\r\n * @property {boolean} [deleted=false]\r\n * @property {'tcp'|'tls'|'udp'} relayProtocol\r\n */\n\n/**\r\n * Standardized active RTCIceCandidate pair statistics.\r\n * @typedef {object} StandardizedActiveIceCandidatePairStatsReport\r\n * @property {number} availableIncomingBitrate\r\n * @property {number} availableOutgoingBitrate\r\n * @property {number} bytesReceived\r\n * @property {number} bytesSent\r\n * @property {number} consentRequestsSent\r\n * @property {number} currentRoundTripTime\r\n * @property {number} lastPacketReceivedTimestamp\r\n * @property {number} lastPacketSentTimestamp\r\n * @property {StandardizedLocalIceCandidateStatsReport} localCandidate\r\n * @property {boolean} nominated\r\n * @property {number} priority\r\n * @property {boolean} readable\r\n * @property {StandardizedIceCandidateStatsReport} remoteCandidate\r\n * @property {number} requestsReceived\r\n * @property {number} requestsSent\r\n * @property {number} responsesReceived\r\n * @property {number} responsesSent\r\n * @property {number} retransmissionsReceived\r\n * @property {number} retransmissionsSent\r\n * @property {'frozen'|'waiting'|'in-progress'|'failed'|'succeeded'} state\r\n * @property {number} totalRoundTripTime\r\n * @property {string} transportId\r\n * @property {boolean} writable\r\n */\n\n/**\r\n * Standardized {@link RTCPeerConnection} statistics.\r\n * @typedef {Object} StandardizedStatsResponse\r\n * @property {StandardizedActiveIceCandidatePairStatsReport} activeIceCandidatePair - Stats for active ICE candidate pair\r\n * @property Array<StandardizedTrackStatsReport> localAudioTrackStats - Stats for local audio MediaStreamTracks\r\n * @property Array<StandardizedTrackStatsReport> localVideoTrackStats - Stats for local video MediaStreamTracks\r\n * @property Array<StandardizedTrackStatsReport> remoteAudioTrackStats - Stats for remote audio MediaStreamTracks\r\n * @property Array<StandardizedTrackStatsReport> remoteVideoTrackStats - Stats for remote video MediaStreamTracks\r\n */\n\n/**\r\n * Standardized MediaStreamTrack statistics.\r\n * @typedef {Object} StandardizedTrackStatsReport\r\n * @property {string} trackId - MediaStreamTrack ID\r\n * @property {string} ssrc - SSRC of the MediaStreamTrack\r\n * @property {number} timestamp - The Unix timestamp in milliseconds\r\n * @property {string} [codecName] - Name of the codec used to encode the MediaStreamTrack's media\r\n * @property {number} [roundTripTime] - Round trip time in milliseconds\r\n * @property {number} [jitter] - Jitter in milliseconds\r\n * @property {number} [frameWidthInput] - Width in pixels of the local video MediaStreamTrack's captured frame\r\n * @property {number} [frameHeightInput] - Height in pixels of the local video MediaStreamTrack's captured frame\r\n * @property {number} [frameWidthSent] - Width in pixels of the local video MediaStreamTrack's encoded frame\r\n * @property {number} [frameHeightSent] - Height in pixels of the local video MediaStreamTrack's encoded frame\r\n * @property {number} [frameWidthReceived] - Width in pixels of the remote video MediaStreamTrack's received frame\r\n * @property {number} [frameHeightReceived] - Height in pixels of the remote video MediaStreamTrack's received frame\r\n * @property {number} [frameRateInput] - Captured frames per second of the local video MediaStreamTrack\r\n * @property {number} [frameRateSent] - Frames per second of the local video MediaStreamTrack's encoded video\r\n * @property {number} [frameRateReceived] - Frames per second of the remote video MediaStreamTrack's received video\r\n * @property {number} [bytesReceived] - Number of bytes of the remote MediaStreamTrack's media received\r\n * @property {number} [bytesSent] - Number of bytes of the local MediaStreamTrack's media sent\r\n * @property {number} [packetsLost] - Number of packets of the MediaStreamTrack's media lost\r\n * @property {number} [packetsReceived] - Number of packets of the remote MediaStreamTrack's media received\r\n * @property {number} [packetsSent] - Number of packets of the local MediaStreamTrack's media sent\r\n * @property {AudioLevel} [audioInputLevel] - The {@link AudioLevel} of the local audio MediaStreamTrack\r\n * @property {AudioLevel} [audioOutputLevel] - The {@link AudioLevel} of the remote video MediaStreamTrack\r\n */\n\n\nmodule.exports = getStats;","map":{"version":3,"sources":["C:/Users/khouloud/Documents/PI/MERN_Stack_PI/node_modules/@twilio/webrtc/lib/getstats.js"],"names":["flatMap","require","guessBrowser","guessBrowserVersion","getSdpFormat","guess","guessVersion","isChrome","isFirefox","isSafari","chromeMajorVersion","major","CHROME_LEGACY_MAX_AUDIO_LEVEL","getStats","peerConnection","options","Promise","reject","Error","_getStats","localAudioTracks","getTracks","localVideoTracks","remoteAudioTracks","remoteVideoTracks","statsResponse","activeIceCandidatePair","localAudioTrackStats","localVideoTrackStats","remoteAudioTrackStats","remoteVideoTrackStats","trackStatsPromises","triple","tracks","statsArrayName","isRemote","map","track","getTrackStats","Object","assign","then","stats","trackId","id","push","all","getActiveIceCandidatePairStats","activeIceCandidatePairStatsReport","testForChrome","testForSafari","standardizeChromeOrSafariActiveIceCandidatePairStats","testForFirefox","standardizeFirefoxActiveIceCandidatePairStats","activeCandidatePairStats","Array","from","values","find","stat","type","nominated","activeLocalCandidateStats","get","localCandidateId","activeRemoteCandidateStats","remoteCandidateId","standardizedCandidateStatsKeys","key","standardizedLocalCandidateStatsKeys","concat","standatdizedLocalCandidateStatsReport","reduce","report","keyInfo","standardizedRemoteCandidateStatsReport","localCandidate","remoteCandidate","ffKeys","candidateTypes","host","peerreflexive","relayed","serverreflexive","kind","localOrRemote","getSendersOrReceivers","senderOrReceiver","filter","getStreams","stream","chromeOrSafariGetTrackStats","firefoxGetTrackStats","join","resolve","response","standardizeChromeLegacyStats","standardizeChromeOrSafariStats","standardizeFirefoxStats","ssrcReport","result","standardizedStats","timestamp","Math","round","Number","names","name","codecName","roundTripTime","jitter","frameWidthInput","frameHeightInput","frameWidthSent","frameHeightSent","frameWidthReceived","frameHeightReceived","frameRateInput","frameRateSent","frameRateReceived","inbound","outbound","codec","forEach","remoteSource","first","second","third","getStatValue","ssrc","String","mimeType","split","length","frameWidth","frameHeight","framesPerSecond","bytesReceived","bytesSent","packetsLost","packetsReceived","packetsSent","audioLevel","audioOutputLevel","audioInputLevel","Map","remoteId","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar flatMap = require('./util').flatMap;\r\nvar guessBrowser = require('./util').guessBrowser;\r\nvar guessBrowserVersion = require('./util').guessBrowserVersion;\r\nvar getSdpFormat = require('./util/sdp').getSdpFormat;\r\n\r\nvar guess = guessBrowser();\r\nvar guessVersion = guessBrowserVersion();\r\nvar isChrome = guess === 'chrome';\r\nvar isFirefox = guess === 'firefox';\r\nvar isSafari = guess === 'safari';\r\n\r\nvar chromeMajorVersion = isChrome ? guessVersion.major : null;\r\n\r\nvar CHROME_LEGACY_MAX_AUDIO_LEVEL = 32767;\r\n\r\n/**\r\n * Get the standardized {@link RTCPeerConnection} statistics.\r\n * @param {RTCPeerConnection} peerConnection\r\n * @param {object} [options] - Used for testing\r\n * @returns {Promise.<StandardizedStatsResponse>}\r\n */\r\nfunction getStats(peerConnection, options) {\r\n  if (!(peerConnection && typeof peerConnection.getStats === 'function')) {\r\n    return Promise.reject(new Error('Given PeerConnection does not support getStats'));\r\n  }\r\n  return _getStats(peerConnection, options);\r\n}\r\n\r\n/**\r\n * getStats() implementation.\r\n * @param {RTCPeerConnection} peerConnection\r\n * @param {object} [options] - Used for testing\r\n * @returns {Promise.<StandardizedStatsResponse>}\r\n */\r\nfunction _getStats(peerConnection, options) {\r\n  var localAudioTracks = getTracks(peerConnection, 'audio', 'local');\r\n  var localVideoTracks = getTracks(peerConnection, 'video', 'local');\r\n  var remoteAudioTracks = getTracks(peerConnection, 'audio');\r\n  var remoteVideoTracks = getTracks(peerConnection, 'video');\r\n\r\n  var statsResponse = {\r\n    activeIceCandidatePair: null,\r\n    localAudioTrackStats: [],\r\n    localVideoTrackStats: [],\r\n    remoteAudioTrackStats: [],\r\n    remoteVideoTrackStats: []\r\n  };\r\n\r\n  var trackStatsPromises = flatMap([\r\n    [localAudioTracks, 'localAudioTrackStats', false],\r\n    [localVideoTracks, 'localVideoTrackStats', false],\r\n    [remoteAudioTracks, 'remoteAudioTrackStats', true],\r\n    [remoteVideoTracks, 'remoteVideoTrackStats', true]\r\n  ], function(triple) {\r\n    var tracks = triple[0];\r\n    var statsArrayName = triple[1];\r\n    var isRemote = triple[2];\r\n    return tracks.map(function(track) {\r\n      return getTrackStats(peerConnection, track, Object.assign({\r\n        isRemote: isRemote\r\n      }, options)).then(function(stats) {\r\n        stats.trackId = track.id;\r\n        statsResponse[statsArrayName].push(stats);\r\n      });\r\n    });\r\n  });\r\n\r\n  return Promise.all(trackStatsPromises).then(function() {\r\n    return getActiveIceCandidatePairStats(peerConnection, options);\r\n  }).then(function(activeIceCandidatePairStatsReport) {\r\n    statsResponse.activeIceCandidatePair = activeIceCandidatePairStatsReport;\r\n    return statsResponse;\r\n  });\r\n}\r\n\r\n/**\r\n * Generate the {@link StandardizedActiveIceCandidatePairStatsReport} for the\r\n * {@link RTCPeerConnection}.\r\n * @param {RTCPeerConnection} peerConnection\r\n * @param {object} [options]\r\n * @returns {Promise<StandardizedActiveIceCandidatePairStatsReport>}\r\n */\r\nfunction getActiveIceCandidatePairStats(peerConnection, options) {\r\n  options = options || {};\r\n\r\n  if (typeof options.testForChrome !== 'undefined' || isChrome\r\n    || typeof options.testForSafari  !== 'undefined' || isSafari) {\r\n    return peerConnection.getStats().then(\r\n      standardizeChromeOrSafariActiveIceCandidatePairStats);\r\n  }\r\n  if (typeof options.testForFirefox !== 'undefined' || isFirefox) {\r\n    return peerConnection.getStats().then(standardizeFirefoxActiveIceCandidatePairStats);\r\n  }\r\n  return Promise.reject(new Error('RTCPeerConnection#getStats() not supported'));\r\n}\r\n\r\n/**\r\n * Standardize the active RTCIceCandidate pair's statistics in Chrome or Safari.\r\n * @param {RTCStatsReport} stats\r\n * @returns {?StandardizedActiveIceCandidatePairStatsReport}\r\n */\r\nfunction standardizeChromeOrSafariActiveIceCandidatePairStats(stats) {\r\n  var activeCandidatePairStats = Array.from(stats.values()).find(function(stat) {\r\n    return stat.type === 'candidate-pair' && stat.nominated;\r\n  });\r\n\r\n  if (!activeCandidatePairStats) {\r\n    return null;\r\n  }\r\n\r\n  var activeLocalCandidateStats = stats.get(activeCandidatePairStats.localCandidateId);\r\n  var activeRemoteCandidateStats = stats.get(activeCandidatePairStats.remoteCandidateId);\r\n\r\n  var standardizedCandidateStatsKeys = [\r\n    { key: 'candidateType', type: 'string' },\r\n    { key: 'ip', type: 'string' },\r\n    { key: 'port', type: 'number' },\r\n    { key: 'priority', type: 'number' },\r\n    { key: 'protocol', type: 'string' },\r\n    { key: 'url', type: 'string' }\r\n  ];\r\n\r\n  var standardizedLocalCandidateStatsKeys = standardizedCandidateStatsKeys.concat([\r\n    { key: 'deleted', type: 'boolean' },\r\n    { key: 'relayProtocol', type: 'string' }\r\n  ]);\r\n\r\n  var standatdizedLocalCandidateStatsReport = activeLocalCandidateStats\r\n    ? standardizedLocalCandidateStatsKeys.reduce(function(report, keyInfo) {\r\n      report[keyInfo.key] = typeof activeLocalCandidateStats[keyInfo.key] === keyInfo.type\r\n        ? activeLocalCandidateStats[keyInfo.key]\r\n        : keyInfo.key === 'deleted' ? false : null;\r\n      return report;\r\n    }, {})\r\n    : null;\r\n\r\n  var standardizedRemoteCandidateStatsReport = activeRemoteCandidateStats\r\n    ? standardizedCandidateStatsKeys.reduce(function(report, keyInfo) {\r\n      report[keyInfo.key] = typeof activeRemoteCandidateStats[keyInfo.key] === keyInfo.type\r\n        ? activeRemoteCandidateStats[keyInfo.key]\r\n        : null;\r\n      return report;\r\n    }, {})\r\n    : null;\r\n\r\n  return [\r\n    { key: 'availableIncomingBitrate', type: 'number' },\r\n    { key: 'availableOutgoingBitrate', type: 'number' },\r\n    { key: 'bytesReceived', type: 'number' },\r\n    { key: 'bytesSent', type: 'number' },\r\n    { key: 'consentRequestsSent', type: 'number' },\r\n    { key: 'currentRoundTripTime', type: 'number' },\r\n    { key: 'lastPacketReceivedTimestamp', type: 'number' },\r\n    { key: 'lastPacketSentTimestamp', type: 'number' },\r\n    { key: 'nominated', type: 'boolean' },\r\n    { key: 'priority', type: 'number' },\r\n    { key: 'readable', type: 'boolean' },\r\n    { key: 'requestsReceived', type: 'number' },\r\n    { key: 'requestsSent', type: 'number' },\r\n    { key: 'responsesReceived', type: 'number' },\r\n    { key: 'responsesSent', type: 'number' },\r\n    { key: 'retransmissionsReceived', type: 'number' },\r\n    { key: 'retransmissionsSent', type: 'number' },\r\n    { key: 'state', type: 'string' },\r\n    { key: 'totalRoundTripTime', type: 'number' },\r\n    { key: 'transportId', type: 'string' },\r\n    { key: 'writable', type: 'boolean' }\r\n  ].reduce(function(report, keyInfo) {\r\n    report[keyInfo.key] = typeof activeCandidatePairStats[keyInfo.key] === keyInfo.type\r\n      ? activeCandidatePairStats[keyInfo.key]\r\n      : null;\r\n    return report;\r\n  }, {\r\n    localCandidate: standatdizedLocalCandidateStatsReport,\r\n    remoteCandidate: standardizedRemoteCandidateStatsReport\r\n  });\r\n}\r\n\r\n/**\r\n * Standardize the active RTCIceCandidate pair's statistics in Firefox.\r\n * @param {RTCStatsReport} stats\r\n * @returns {?StandardizedActiveIceCandidatePairStatsReport}\r\n */\r\nfunction standardizeFirefoxActiveIceCandidatePairStats(stats) {\r\n  var activeCandidatePairStats = Array.from(stats.values()).find(function(stat) {\r\n    return stat.type === 'candidate-pair' && stat.nominated;\r\n  });\r\n\r\n  if (!activeCandidatePairStats) {\r\n    return null;\r\n  }\r\n\r\n  var activeLocalCandidateStats = stats.get(activeCandidatePairStats.localCandidateId);\r\n  var activeRemoteCandidateStats = stats.get(activeCandidatePairStats.remoteCandidateId);\r\n\r\n  var standardizedCandidateStatsKeys = [\r\n    { key: 'candidateType', type: 'string' },\r\n    { key: 'ip', ffKeys: ['address', 'ipAddress'], type: 'string' },\r\n    { key: 'port', ffKeys: ['portNumber'], type: 'number' },\r\n    { key: 'priority', type: 'number' },\r\n    { key: 'protocol', ffKeys: ['transport'], type: 'string' },\r\n    { key: 'url', type: 'string' }\r\n  ];\r\n\r\n  var standardizedLocalCandidateStatsKeys = standardizedCandidateStatsKeys.concat([\r\n    { key: 'deleted', type: 'boolean' },\r\n    { key: 'relayProtocol', type: 'string' }\r\n  ]);\r\n\r\n  var candidateTypes = {\r\n    host: 'host',\r\n    peerreflexive: 'prflx',\r\n    relayed: 'relay',\r\n    serverreflexive: 'srflx'\r\n  };\r\n\r\n  var standatdizedLocalCandidateStatsReport = activeLocalCandidateStats\r\n    ? standardizedLocalCandidateStatsKeys.reduce(function(report, keyInfo) {\r\n      var key = keyInfo.ffKeys && keyInfo.ffKeys.find(function(key) {\r\n        return key in activeLocalCandidateStats;\r\n      }) || keyInfo.key;\r\n      report[keyInfo.key] = typeof activeLocalCandidateStats[key] === keyInfo.type\r\n        ? key === 'candidateType'\r\n          ? candidateTypes[activeLocalCandidateStats[key]] || activeLocalCandidateStats[key]\r\n          : activeLocalCandidateStats[key]\r\n        : key === 'deleted' ? false : null;\r\n      return report;\r\n    }, {})\r\n    : null;\r\n\r\n  var standardizedRemoteCandidateStatsReport = activeRemoteCandidateStats\r\n    ? standardizedCandidateStatsKeys.reduce(function(report, keyInfo) {\r\n      var key = keyInfo.ffKeys && keyInfo.ffKeys.find(function(key) {\r\n        return key in activeRemoteCandidateStats;\r\n      }) || keyInfo.key;\r\n      report[keyInfo.key] = typeof activeRemoteCandidateStats[key] === keyInfo.type\r\n        ? key === 'candidateType'\r\n          ? candidateTypes[activeRemoteCandidateStats[key]] || activeRemoteCandidateStats[key]\r\n          : activeRemoteCandidateStats[key]\r\n        : null;\r\n      return report;\r\n    }, {})\r\n    : null;\r\n\r\n  return [\r\n    { key: 'availableIncomingBitrate', type: 'number' },\r\n    { key: 'availableOutgoingBitrate', type: 'number' },\r\n    { key: 'bytesReceived', type: 'number' },\r\n    { key: 'bytesSent', type: 'number' },\r\n    { key: 'consentRequestsSent', type: 'number' },\r\n    { key: 'currentRoundTripTime', type: 'number' },\r\n    { key: 'lastPacketReceivedTimestamp', type: 'number' },\r\n    { key: 'lastPacketSentTimestamp', type: 'number' },\r\n    { key: 'nominated', type: 'boolean' },\r\n    { key: 'priority', type: 'number' },\r\n    { key: 'readable', type: 'boolean' },\r\n    { key: 'requestsReceived', type: 'number' },\r\n    { key: 'requestsSent', type: 'number' },\r\n    { key: 'responsesReceived', type: 'number' },\r\n    { key: 'responsesSent', type: 'number' },\r\n    { key: 'retransmissionsReceived', type: 'number' },\r\n    { key: 'retransmissionsSent', type: 'number' },\r\n    { key: 'state', type: 'string' },\r\n    { key: 'totalRoundTripTime', type: 'number' },\r\n    { key: 'transportId', type: 'string' },\r\n    { key: 'writable', type: 'boolean' }\r\n  ].reduce(function(report, keyInfo) {\r\n    report[keyInfo.key] = typeof activeCandidatePairStats[keyInfo.key] === keyInfo.type\r\n      ? activeCandidatePairStats[keyInfo.key]\r\n      : null;\r\n    return report;\r\n  }, {\r\n    localCandidate: standatdizedLocalCandidateStatsReport,\r\n    remoteCandidate: standardizedRemoteCandidateStatsReport\r\n  });\r\n}\r\n\r\n/**\r\n * Get local/remote audio/video MediaStreamTracks.\r\n * @param {RTCPeerConnection} peerConnection - The RTCPeerConnection\r\n * @param {string} kind - 'audio' or 'video'\r\n * @param {string} [localOrRemote] - 'local' or 'remote'\r\n * @returns {Array<MediaStreamTrack>}\r\n */\r\nfunction getTracks(peerConnection, kind, localOrRemote) {\r\n  var getSendersOrReceivers = localOrRemote === 'local' ? 'getSenders' : 'getReceivers';\r\n  if (peerConnection[getSendersOrReceivers]) {\r\n    return peerConnection[getSendersOrReceivers]().map(function(senderOrReceiver) {\r\n      return senderOrReceiver.track;\r\n    }).filter(function(track) {\r\n      return track && track.kind === kind;\r\n    });\r\n  }\r\n  var getStreams = localOrRemote === 'local' ? 'getLocalStreams' : 'getRemoteStreams';\r\n  return flatMap(peerConnection[getStreams](), function(stream) {\r\n    var getTracks = kind === 'audio' ? 'getAudioTracks' : 'getVideoTracks';\r\n    return stream[getTracks]();\r\n  });\r\n}\r\n\r\n/**\r\n * Get the standardized statistics for a particular MediaStreamTrack.\r\n * @param {RTCPeerConnection} peerConnection\r\n * @param {MediaStreamTrack} track\r\n * @param {object} [options] - Used for testing\r\n * @returns {Promise.<StandardizedTrackStatsReport>}\r\n */\r\nfunction getTrackStats(peerConnection, track, options) {\r\n  options = options || {};\r\n\r\n  if (typeof options.testForChrome !== 'undefined' || isChrome) {\r\n    return chromeOrSafariGetTrackStats(peerConnection, track);\r\n  }\r\n  if (typeof options.testForFirefox  !== 'undefined' || isFirefox) {\r\n    return firefoxGetTrackStats(peerConnection, track, options.isRemote);\r\n  }\r\n  if (typeof options.testForSafari  !== 'undefined' || isSafari) {\r\n    if (typeof options.testForSafari  !== 'undefined' || getSdpFormat() === 'unified') {\r\n      return chromeOrSafariGetTrackStats(peerConnection, track);\r\n    }\r\n    // NOTE(syerrapragada): getStats() is not supported on\r\n    // Safari versions where plan-b is the SDP format\r\n    // due to this bug: https://bugs.webkit.org/show_bug.cgi?id=192601\r\n    return Promise.reject(new Error([\r\n      'getStats() is not supported on this version of Safari',\r\n      'due to this bug: https://bugs.webkit.org/show_bug.cgi?id=192601'\r\n    ].join(' ')));\r\n  }\r\n  return Promise.reject(new Error('RTCPeerConnection#getStats() not supported'));\r\n}\r\n\r\n/**\r\n * Get the standardized statistics for a particular MediaStreamTrack in Chrome or Safari.\r\n * @param {RTCPeerConnection} peerConnection\r\n * @param {MediaStreamTrack} track\r\n * @returns {Promise.<StandardizedTrackStatsReport>}\r\n */\r\nfunction chromeOrSafariGetTrackStats(peerConnection, track) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (chromeMajorVersion && chromeMajorVersion < 67) {\r\n      peerConnection.getStats(function(response) {\r\n        resolve(standardizeChromeLegacyStats(response, track));\r\n      }, null, reject);\r\n      return;\r\n    }\r\n    peerConnection.getStats(track).then(function(response) {\r\n      resolve(standardizeChromeOrSafariStats(response));\r\n    }, reject);\r\n  });\r\n}\r\n\r\n/**\r\n * Get the standardized statistics for a particular MediaStreamTrack in Firefox.\r\n * @param {RTCPeerConnection} peerConnection\r\n * @param {MediaStreamTrack} track\r\n * @param {boolean} isRemote\r\n * @returns {Promise.<StandardizedTrackStatsReport>}\r\n */\r\nfunction firefoxGetTrackStats(peerConnection, track, isRemote) {\r\n  return new Promise(function(resolve, reject) {\r\n    peerConnection.getStats(track).then(function(response) {\r\n      resolve(standardizeFirefoxStats(response, isRemote));\r\n    }, reject);\r\n  });\r\n}\r\n\r\n/**\r\n * Standardize the MediaStreamTrack's legacy statistics in Chrome.\r\n * @param {RTCStatsResponse} response\r\n * @param {MediaStreamTrack} track\r\n * @returns {StandardizedTrackStatsReport}\r\n */\r\nfunction standardizeChromeLegacyStats(response, track) {\r\n  var ssrcReport = response.result().find(function(report) {\r\n    return report.type === 'ssrc' && report.stat('googTrackId') === track.id;\r\n  });\r\n\r\n  var standardizedStats = {};\r\n\r\n  if (ssrcReport) {\r\n    standardizedStats.timestamp = Math.round(Number(ssrcReport.timestamp));\r\n    standardizedStats = ssrcReport.names().reduce(function(stats, name) {\r\n      switch (name) {\r\n        case 'googCodecName':\r\n          stats.codecName = ssrcReport.stat(name);\r\n          break;\r\n        case 'googRtt':\r\n          stats.roundTripTime = Number(ssrcReport.stat(name));\r\n          break;\r\n        case 'googJitterReceived':\r\n          stats.jitter = Number(ssrcReport.stat(name));\r\n          break;\r\n        case 'googFrameWidthInput':\r\n          stats.frameWidthInput = Number(ssrcReport.stat(name));\r\n          break;\r\n        case 'googFrameHeightInput':\r\n          stats.frameHeightInput = Number(ssrcReport.stat(name));\r\n          break;\r\n        case 'googFrameWidthSent':\r\n          stats.frameWidthSent = Number(ssrcReport.stat(name));\r\n          break;\r\n        case 'googFrameHeightSent':\r\n          stats.frameHeightSent = Number(ssrcReport.stat(name));\r\n          break;\r\n        case 'googFrameWidthReceived':\r\n          stats.frameWidthReceived = Number(ssrcReport.stat(name));\r\n          break;\r\n        case 'googFrameHeightReceived':\r\n          stats.frameHeightReceived = Number(ssrcReport.stat(name));\r\n          break;\r\n        case 'googFrameRateInput':\r\n          stats.frameRateInput = Number(ssrcReport.stat(name));\r\n          break;\r\n        case 'googFrameRateSent':\r\n          stats.frameRateSent = Number(ssrcReport.stat(name));\r\n          break;\r\n        case 'googFrameRateReceived':\r\n          stats.frameRateReceived = Number(ssrcReport.stat(name));\r\n          break;\r\n        case 'ssrc':\r\n          stats[name] = ssrcReport.stat(name);\r\n          break;\r\n        case 'bytesReceived':\r\n        case 'bytesSent':\r\n        case 'packetsLost':\r\n        case 'packetsReceived':\r\n        case 'packetsSent':\r\n        case 'audioInputLevel':\r\n        case 'audioOutputLevel':\r\n          stats[name] = Number(ssrcReport.stat(name));\r\n          break;\r\n      }\r\n\r\n      return stats;\r\n    }, standardizedStats);\r\n  }\r\n\r\n  return standardizedStats;\r\n}\r\n\r\n/**\r\n * Standardize the MediaStreamTrack's statistics in Chrome or Safari.\r\n * @param {RTCStatsResponse} response\r\n * @returns {StandardizedTrackStatsReport}\r\n */\r\nfunction standardizeChromeOrSafariStats(response) {\r\n  var inbound = null;\r\n  var outbound = null;\r\n  var track = null;\r\n  var codec = null;\r\n\r\n  response.forEach(function(stat) {\r\n    switch (stat.type) {\r\n      case 'inbound-rtp':\r\n        inbound = stat;\r\n        break;\r\n      case 'outbound-rtp':\r\n        outbound = stat;\r\n        break;\r\n      case 'track':\r\n        track = stat;\r\n        break;\r\n      case 'codec':\r\n        codec = stat;\r\n        break;\r\n    }\r\n  });\r\n\r\n  var isRemote = track && track.remoteSource;\r\n  var standardizedStats = {};\r\n\r\n  var first = isRemote ? inbound : outbound;\r\n  var second = track;\r\n  var third = codec;\r\n\r\n  function getStatValue(name) {\r\n    if (first && typeof first[name] !== 'undefined') {\r\n      return first[name];\r\n    }\r\n\r\n    if (second && typeof second[name] !== 'undefined') {\r\n      return second[name];\r\n    }\r\n\r\n    if (third && typeof third[name] !== 'undefined') {\r\n      return third[name];\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  var ssrc = getStatValue('ssrc');\r\n  if (typeof ssrc === 'number') {\r\n    standardizedStats.ssrc = String(ssrc);\r\n  }\r\n\r\n  var timestamp = getStatValue('timestamp');\r\n  standardizedStats.timestamp = Math.round(timestamp);\r\n\r\n  var mimeType = getStatValue('mimeType');\r\n  if (typeof mimeType === 'string') {\r\n    mimeType = mimeType.split('/');\r\n    standardizedStats.codecName = mimeType[mimeType.length - 1];\r\n  }\r\n\r\n  var roundTripTime = getStatValue('roundTripTime');\r\n  if (typeof roundTripTime === 'number') {\r\n    standardizedStats.roundTripTime = roundTripTime;\r\n  }\r\n\r\n  var jitter = getStatValue('jitter');\r\n  if (typeof jitter === 'number') {\r\n    standardizedStats.jitter = Math.round(jitter * 1000);\r\n  }\r\n\r\n  var frameWidth = getStatValue('frameWidth');\r\n  if (typeof frameWidth === 'number') {\r\n    if (isRemote) {\r\n      standardizedStats.frameWidthReceived = frameWidth;\r\n    } else {\r\n      standardizedStats.frameWidthSent = frameWidth;\r\n    }\r\n  }\r\n\r\n  var frameHeight = getStatValue('frameHeight');\r\n  if (typeof frameHeight === 'number') {\r\n    if (isRemote) {\r\n      standardizedStats.frameHeightReceived = frameHeight;\r\n    } else {\r\n      standardizedStats.frameHeightSent = frameHeight;\r\n    }\r\n  }\r\n\r\n  var framesPerSecond = getStatValue('framesPerSecond');\r\n  if (typeof framesPerSecond === 'number') {\r\n    standardizedStats.frameRateSent = framesPerSecond;\r\n  }\r\n\r\n  var bytesReceived = getStatValue('bytesReceived');\r\n  if (typeof bytesReceived === 'number') {\r\n    standardizedStats.bytesReceived = bytesReceived;\r\n  }\r\n\r\n  var bytesSent = getStatValue('bytesSent');\r\n  if (typeof bytesSent === 'number') {\r\n    standardizedStats.bytesSent = bytesSent;\r\n  }\r\n\r\n  var packetsLost = getStatValue('packetsLost');\r\n  if (typeof packetsLost === 'number') {\r\n    standardizedStats.packetsLost = packetsLost;\r\n  }\r\n\r\n  var packetsReceived = getStatValue('packetsReceived');\r\n  if (typeof packetsReceived === 'number') {\r\n    standardizedStats.packetsReceived = packetsReceived;\r\n  }\r\n\r\n  var packetsSent = getStatValue('packetsSent');\r\n  if (typeof packetsSent === 'number') {\r\n    standardizedStats.packetsSent = packetsSent;\r\n  }\r\n\r\n  var audioLevel = getStatValue('audioLevel');\r\n  if (typeof audioLevel === 'number') {\r\n    audioLevel = Math.round(audioLevel * CHROME_LEGACY_MAX_AUDIO_LEVEL);\r\n    if (isRemote) {\r\n      standardizedStats.audioOutputLevel = audioLevel;\r\n    } else {\r\n      standardizedStats.audioInputLevel = audioLevel;\r\n    }\r\n  }\r\n\r\n  return standardizedStats;\r\n}\r\n\r\n/**\r\n * Standardize the MediaStreamTrack's statistics in Firefox.\r\n * @param {RTCStatsReport} response\r\n * @param {boolean} isRemote\r\n * @returns {StandardizedTrackStatsReport}\r\n */\r\nfunction standardizeFirefoxStats(response, isRemote) {\r\n  // NOTE(mroberts): If getStats is called on a closed RTCPeerConnection,\r\n  // Firefox returns undefined instead of an RTCStatsReport. We workaround this\r\n  // here. See the following bug for more details:\r\n  //\r\n  //   https://bugzilla.mozilla.org/show_bug.cgi?id=1377225\r\n  //\r\n  response = response || new Map();\r\n\r\n  var inbound = null;\r\n  var outbound = null;\r\n\r\n  // NOTE(mmalavalli): Starting from Firefox 63, RTC{Inbound, Outbound}RTPStreamStats.isRemote\r\n  // will be deprecated, followed by its removal in Firefox 66. Also, trying to\r\n  // access members of the remote RTC{Inbound, Outbound}RTPStreamStats without\r\n  // using RTCStatsReport.get(remoteId) will trigger console warnings. So, we\r\n  // no longer depend on \"isRemote\", and we call RTCStatsReport.get(remoteId)\r\n  // to access the remote RTC{Inbound, Outbound}RTPStreamStats.\r\n  //\r\n  // Source: https://blog.mozilla.org/webrtc/getstats-isremote-65/\r\n  //\r\n  response.forEach(function(stat) {\r\n    if (stat.isRemote) {\r\n      return;\r\n    }\r\n    switch (stat.type) {\r\n      case 'inbound-rtp':\r\n        inbound = stat;\r\n        outbound = response.get(stat.remoteId);\r\n        break;\r\n      case 'outbound-rtp':\r\n        outbound = stat;\r\n        inbound = response.get(stat.remoteId);\r\n        break;\r\n    }\r\n  });\r\n\r\n  var first = isRemote ? inbound : outbound;\r\n  var second = isRemote ? outbound : inbound;\r\n\r\n  function getStatValue(name) {\r\n    if (first && typeof first[name] !== 'undefined') {\r\n      return first[name];\r\n    }\r\n    if (second && typeof second[name] !== 'undefined') {\r\n      return second[name];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  var standardizedStats = {};\r\n  var timestamp = getStatValue('timestamp');\r\n  standardizedStats.timestamp = Math.round(timestamp);\r\n\r\n  var ssrc = getStatValue('ssrc');\r\n  if (typeof ssrc === 'number') {\r\n    standardizedStats.ssrc = String(ssrc);\r\n  }\r\n\r\n  var bytesSent = getStatValue('bytesSent');\r\n  if (typeof bytesSent === 'number') {\r\n    standardizedStats.bytesSent = bytesSent;\r\n  }\r\n\r\n  var packetsLost = getStatValue('packetsLost');\r\n  if (typeof packetsLost === 'number') {\r\n    standardizedStats.packetsLost = packetsLost;\r\n  }\r\n\r\n  var packetsSent = getStatValue('packetsSent');\r\n  if (typeof packetsSent === 'number') {\r\n    standardizedStats.packetsSent = packetsSent;\r\n  }\r\n\r\n  var roundTripTime = getStatValue('roundTripTime');\r\n  if (typeof roundTripTime === 'number') {\r\n    standardizedStats.roundTripTime = roundTripTime;\r\n  }\r\n\r\n  var jitter = getStatValue('jitter');\r\n  if (typeof jitter === 'number') {\r\n    standardizedStats.jitter = Math.round(jitter * 1000);\r\n  }\r\n\r\n  var frameRateSent = getStatValue('framerateMean');\r\n  if (typeof frameRateSent === 'number') {\r\n    standardizedStats.frameRateSent = Math.round(frameRateSent);\r\n  }\r\n\r\n  var bytesReceived = getStatValue('bytesReceived');\r\n  if (typeof bytesReceived === 'number') {\r\n    standardizedStats.bytesReceived = bytesReceived;\r\n  }\r\n\r\n  var packetsReceived = getStatValue('packetsReceived');\r\n  if (typeof packetsReceived === 'number') {\r\n    standardizedStats.packetsReceived = packetsReceived;\r\n  }\r\n\r\n  var frameRateReceived = getStatValue('framerateMean');\r\n  if (typeof frameRateReceived === 'number') {\r\n    standardizedStats.frameRateReceived = Math.round(frameRateReceived);\r\n  }\r\n\r\n  return standardizedStats;\r\n}\r\n\r\n/**\r\n * Standardized RTCIceCandidate statistics.\r\n * @typedef {object} StandardizedIceCandidateStatsReport\r\n * @property {'host'|'prflx'|'relay'|'srflx'} candidateType\r\n * @property {string} ip\r\n * @property {number} port\r\n * @property {number} priority\r\n * @property {'tcp'|'udp'} protocol\r\n * @property {string} url\r\n */\r\n\r\n/**\r\n * Standardized local RTCIceCandidate statistics.\r\n * @typedef {StandardizedIceCandidateStatsReport} StandardizedLocalIceCandidateStatsReport\r\n * @property {boolean} [deleted=false]\r\n * @property {'tcp'|'tls'|'udp'} relayProtocol\r\n */\r\n\r\n/**\r\n * Standardized active RTCIceCandidate pair statistics.\r\n * @typedef {object} StandardizedActiveIceCandidatePairStatsReport\r\n * @property {number} availableIncomingBitrate\r\n * @property {number} availableOutgoingBitrate\r\n * @property {number} bytesReceived\r\n * @property {number} bytesSent\r\n * @property {number} consentRequestsSent\r\n * @property {number} currentRoundTripTime\r\n * @property {number} lastPacketReceivedTimestamp\r\n * @property {number} lastPacketSentTimestamp\r\n * @property {StandardizedLocalIceCandidateStatsReport} localCandidate\r\n * @property {boolean} nominated\r\n * @property {number} priority\r\n * @property {boolean} readable\r\n * @property {StandardizedIceCandidateStatsReport} remoteCandidate\r\n * @property {number} requestsReceived\r\n * @property {number} requestsSent\r\n * @property {number} responsesReceived\r\n * @property {number} responsesSent\r\n * @property {number} retransmissionsReceived\r\n * @property {number} retransmissionsSent\r\n * @property {'frozen'|'waiting'|'in-progress'|'failed'|'succeeded'} state\r\n * @property {number} totalRoundTripTime\r\n * @property {string} transportId\r\n * @property {boolean} writable\r\n */\r\n\r\n/**\r\n * Standardized {@link RTCPeerConnection} statistics.\r\n * @typedef {Object} StandardizedStatsResponse\r\n * @property {StandardizedActiveIceCandidatePairStatsReport} activeIceCandidatePair - Stats for active ICE candidate pair\r\n * @property Array<StandardizedTrackStatsReport> localAudioTrackStats - Stats for local audio MediaStreamTracks\r\n * @property Array<StandardizedTrackStatsReport> localVideoTrackStats - Stats for local video MediaStreamTracks\r\n * @property Array<StandardizedTrackStatsReport> remoteAudioTrackStats - Stats for remote audio MediaStreamTracks\r\n * @property Array<StandardizedTrackStatsReport> remoteVideoTrackStats - Stats for remote video MediaStreamTracks\r\n */\r\n\r\n/**\r\n * Standardized MediaStreamTrack statistics.\r\n * @typedef {Object} StandardizedTrackStatsReport\r\n * @property {string} trackId - MediaStreamTrack ID\r\n * @property {string} ssrc - SSRC of the MediaStreamTrack\r\n * @property {number} timestamp - The Unix timestamp in milliseconds\r\n * @property {string} [codecName] - Name of the codec used to encode the MediaStreamTrack's media\r\n * @property {number} [roundTripTime] - Round trip time in milliseconds\r\n * @property {number} [jitter] - Jitter in milliseconds\r\n * @property {number} [frameWidthInput] - Width in pixels of the local video MediaStreamTrack's captured frame\r\n * @property {number} [frameHeightInput] - Height in pixels of the local video MediaStreamTrack's captured frame\r\n * @property {number} [frameWidthSent] - Width in pixels of the local video MediaStreamTrack's encoded frame\r\n * @property {number} [frameHeightSent] - Height in pixels of the local video MediaStreamTrack's encoded frame\r\n * @property {number} [frameWidthReceived] - Width in pixels of the remote video MediaStreamTrack's received frame\r\n * @property {number} [frameHeightReceived] - Height in pixels of the remote video MediaStreamTrack's received frame\r\n * @property {number} [frameRateInput] - Captured frames per second of the local video MediaStreamTrack\r\n * @property {number} [frameRateSent] - Frames per second of the local video MediaStreamTrack's encoded video\r\n * @property {number} [frameRateReceived] - Frames per second of the remote video MediaStreamTrack's received video\r\n * @property {number} [bytesReceived] - Number of bytes of the remote MediaStreamTrack's media received\r\n * @property {number} [bytesSent] - Number of bytes of the local MediaStreamTrack's media sent\r\n * @property {number} [packetsLost] - Number of packets of the MediaStreamTrack's media lost\r\n * @property {number} [packetsReceived] - Number of packets of the remote MediaStreamTrack's media received\r\n * @property {number} [packetsSent] - Number of packets of the local MediaStreamTrack's media sent\r\n * @property {AudioLevel} [audioInputLevel] - The {@link AudioLevel} of the local audio MediaStreamTrack\r\n * @property {AudioLevel} [audioOutputLevel] - The {@link AudioLevel} of the remote video MediaStreamTrack\r\n */\r\n\r\nmodule.exports = getStats;\r\n"]},"metadata":{},"sourceType":"script"}