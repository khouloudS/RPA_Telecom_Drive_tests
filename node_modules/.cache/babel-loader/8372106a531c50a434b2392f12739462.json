{"ast":null,"code":"\"use strict\";\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _assign = require(\"babel-runtime/core-js/object/assign\");\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _asyncToGenerator2 = require(\"babel-runtime/helpers/asyncToGenerator\");\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar events_1 = require(\"events\");\n\nvar logger_1 = require(\"./logger\");\n\nvar configuration_1 = require(\"./configuration\");\n\nvar user_1 = require(\"./user\");\n\nexports.User = user_1.User;\n\nvar publicchannels_1 = require(\"./data/publicchannels\");\n\nvar network_1 = require(\"./services/network\");\n\nvar notificationtypes_1 = require(\"./interfaces/notificationtypes\");\n\nvar synclist_1 = require(\"./synclist\");\n\nvar twilsock_1 = require(\"twilsock\");\n\nvar twilio_notifications_1 = require(\"twilio-notifications\");\n\nvar twilio_sync_1 = require(\"twilio-sync\");\n\nvar twilio_mcs_client_1 = require(\"twilio-mcs-client\");\n\nvar session_1 = require(\"./session\");\n\nvar channels_1 = require(\"./data/channels\");\n\nvar users_1 = require(\"./data/users\");\n\nvar typingindicator_1 = require(\"./services/typingindicator\");\n\nvar consumptionhorizon_1 = require(\"./services/consumptionhorizon\");\n\nvar userchannels_1 = require(\"./data/userchannels\");\n\nvar pushnotification_1 = require(\"./pushnotification\");\n\nexports.PushNotification = pushnotification_1.PushNotification;\n\nvar util_1 = require(\"./util\");\n\nvar log = logger_1.Logger.scope('Client');\n\nvar SDK_VERSION = require('./../package.json').version;\n\nvar MSG_NO_TOKEN = 'A valid Twilio token should be provided';\n\nvar ClientServices = function ClientServices() {\n  (0, _classCallCheck3.default)(this, ClientServices);\n};\n/**\n * A Client is a starting point to access Twilio Programmable Chat functionality.\n *\n * @property {Client#ConnectionState} connectionState - Client connection state\n * @property {Boolean} reachabilityEnabled - Client reachability state\n * @property {User} user - Information for logged in user\n * @property {String} version - Current version of Chat client\n *\n * @fires Client#connectionError\n * @fires Client#connectionStateChanged\n * @fires Client#channelAdded\n * @fires Client#channelInvited\n * @fires Client#channelJoined\n * @fires Client#channelLeft\n * @fires Client#channelRemoved\n * @fires Client#channelUpdated\n * @fires Client#memberJoined\n * @fires Client#memberLeft\n * @fires Client#memberUpdated\n * @fires Client#messageAdded\n * @fires Client#messageRemoved\n * @fires Client#messageUpdated\n * @fires Client#pushNotification\n * @fires Client#tokenAboutToExpire\n * @fires Client#tokenExpired\n * @fires Client#typingEnded\n * @fires Client#typingStarted\n * @fires Client#userSubscribed\n * @fires Client#userUnsubscribed\n * @fires Client#userUpdated\n */\n\n\nvar Client = function (_events_1$EventEmitte) {\n  (0, _inherits3.default)(Client, _events_1$EventEmitte);\n  /**\n   * These options can be passed to Client constructor.\n   * @typedef {Object} Client#ClientOptions\n   * @property {String} [logLevel='error'] - The level of logging to enable. Valid options\n   *   (from strictest to broadest): ['silent', 'error', 'warn', 'info', 'debug', 'trace']\n   */\n\n  /**\n   * These options can be passed to {@link Client#createChannel}.\n   * @typedef {Object} Client#CreateChannelOptions\n   * @property {Object} [attributes] - Any custom attributes to attach to the Channel\n   * @property {String} [friendlyName] - The non-unique display name of the Channel\n   * @property {Boolean} [isPrivate] - Whether or not this Channel should be visible to uninvited Clients\n   * @property {String} [uniqueName] - The unique identity name of the Channel\n   */\n\n  /**\n   * Connection state of Client.\n   * @typedef {('connecting'|'connected'|'disconnecting'|'disconnected'|'denied')} Client#ConnectionState\n   */\n\n  /**\n   * Notifications channel type.\n   * @typedef {('gcm'|'fcm'|'apn')} Client#NotificationsChannelType\n   */\n\n  /**\n   * These options can be passed to {@link Client#getLocalChannels}.\n   * @typedef {Object} Client#ChannelSortingOptions\n   * @property {('lastMessage'|'friendlyName'|'uniqueName')} criteria - Sorting criteria for Channels array\n   * @property {('ascending'|'descending')} [order] - Sorting order. If not present, then default is <code>ascending</code>\n   */\n\n  function Client(token, options) {\n    (0, _classCallCheck3.default)(this, Client);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Client.__proto__ || (0, _getPrototypeOf2.default)(Client)).call(this));\n\n    _this.connectionState = 'connecting';\n    _this.sessionPromise = null;\n    _this.channelsPromise = null;\n    _this.version = SDK_VERSION;\n    _this.parsePushNotification = Client.parsePushNotification;\n    _this.options = options || {};\n\n    if (!_this.options.disableDeepClone) {\n      _this.options = util_1.deepClone(_this.options);\n    }\n\n    _this.options.logLevel = _this.options.logLevel || 'silent';\n    log.setLevel(_this.options.logLevel);\n    var productId = _this.options.productId = 'ip_messaging'; // Enable session local storage for Sync\n\n    _this.options.Sync = _this.options.Sync || {};\n\n    if (typeof _this.options.Sync.enableSessionStorage === 'undefined') {\n      _this.options.Sync.enableSessionStorage = true;\n    }\n\n    if (_this.options.region) {\n      _this.options.Sync.region = _this.options.region;\n    }\n\n    if (!token) {\n      throw new Error(MSG_NO_TOKEN);\n    }\n\n    _this.services = new ClientServices();\n    _this.config = new configuration_1.Configuration(_this.options);\n    _this.options.twilsockClient = _this.options.twilsockClient || new twilsock_1.Twilsock(token, productId, _this.options);\n    _this.options.transport = _this.options.transport || _this.options.twilsockClient;\n    _this.options.notificationsClient = _this.options.notificationsClient || new twilio_notifications_1.Notifications(token, _this.options);\n    _this.options.syncClient = _this.options.syncClient || new twilio_sync_1.SyncClient(token, _this.options);\n    _this.services.syncClient = _this.options.syncClient;\n    _this.services.transport = _this.options.transport;\n    _this.services.twilsockClient = _this.options.twilsockClient;\n    _this.services.notificationClient = _this.options.notificationsClient;\n    _this.services.session = new session_1.Session(_this.services, _this.config);\n    _this.sessionPromise = _this.services.session.initialize();\n    _this.services.network = new network_1.Network(_this.config, _this.services);\n    _this.services.users = new users_1.Users({\n      session: _this.services.session,\n      network: _this.services.network,\n      syncClient: _this.services.syncClient\n    });\n\n    _this.services.users.on('userSubscribed', _this.emit.bind(_this, 'userSubscribed'));\n\n    _this.services.users.on('userUpdated', function (args) {\n      return _this.emit('userUpdated', args);\n    });\n\n    _this.services.users.on('userUnsubscribed', _this.emit.bind(_this, 'userUnsubscribed'));\n\n    _this.services.twilsockClient.on('tokenAboutToExpire', function (ttl) {\n      return _this.emit('tokenAboutToExpire', ttl);\n    });\n\n    _this.services.twilsockClient.on('tokenExpired', function () {\n      return _this.emit('tokenExpired');\n    });\n\n    _this.services.twilsockClient.on('connectionError', function (error) {\n      return _this.emit('connectionError', error);\n    });\n\n    _this.services.consumptionHorizon = new consumptionhorizon_1.ConsumptionHorizon(_this.services);\n    _this.services.typingIndicator = new typingindicator_1.TypingIndicator(_this.config, {\n      transport: _this.services.twilsockClient,\n      notificationClient: _this.services.notificationClient\n    }, _this.getChannelBySid.bind(_this));\n    _this.services.syncList = new synclist_1.SyncList(_this.services);\n    _this.channels = new channels_1.Channels(_this.services);\n    _this.channelsPromise = _this.sessionPromise.then(function () {\n      _this.channels.on('channelAdded', _this.emit.bind(_this, 'channelAdded'));\n\n      _this.channels.on('channelRemoved', _this.emit.bind(_this, 'channelRemoved'));\n\n      _this.channels.on('channelInvited', _this.emit.bind(_this, 'channelInvited'));\n\n      _this.channels.on('channelJoined', _this.emit.bind(_this, 'channelJoined'));\n\n      _this.channels.on('channelLeft', _this.emit.bind(_this, 'channelLeft'));\n\n      _this.channels.on('channelUpdated', function (args) {\n        return _this.emit('channelUpdated', args);\n      });\n\n      _this.channels.on('memberJoined', _this.emit.bind(_this, 'memberJoined'));\n\n      _this.channels.on('memberLeft', _this.emit.bind(_this, 'memberLeft'));\n\n      _this.channels.on('memberUpdated', function (args) {\n        return _this.emit('memberUpdated', args);\n      });\n\n      _this.channels.on('messageAdded', _this.emit.bind(_this, 'messageAdded'));\n\n      _this.channels.on('messageUpdated', function (args) {\n        return _this.emit('messageUpdated', args);\n      });\n\n      _this.channels.on('messageRemoved', _this.emit.bind(_this, 'messageRemoved'));\n\n      _this.channels.on('typingStarted', _this.emit.bind(_this, 'typingStarted'));\n\n      _this.channels.on('typingEnded', _this.emit.bind(_this, 'typingEnded'));\n\n      return _this.channels.fetchChannels();\n    }).then(function () {\n      return _this.channels;\n    });\n\n    _this.services.notificationClient.on('connectionStateChanged', function (state) {\n      var changedConnectionState = null;\n\n      switch (state) {\n        case 'connected':\n          changedConnectionState = 'connected';\n          break;\n\n        case 'denied':\n          changedConnectionState = 'denied';\n          break;\n\n        case 'disconnecting':\n          changedConnectionState = 'disconnecting';\n          break;\n\n        case 'disconnected':\n          changedConnectionState = 'disconnected';\n          break;\n\n        default:\n          changedConnectionState = 'connecting';\n      }\n\n      if (changedConnectionState !== _this.connectionState) {\n        _this.connectionState = changedConnectionState;\n\n        _this.emit('connectionStateChanged', _this.connectionState);\n      }\n    });\n\n    _this.fpaToken = token;\n    return _this;\n  }\n  /**\n   * Factory method to create Chat client instance.\n   *\n   * @param {String} token - Access token\n   * @param {Client#ClientOptions} options - Options to customize the Client\n   * @returns {Promise<Client>}\n   */\n\n\n  (0, _createClass3.default)(Client, [{\n    key: \"subscribeToPushNotifications\",\n    value: function subscribeToPushNotifications(channelType) {\n      var _this2 = this;\n\n      var subscriptions = [];\n      [notificationtypes_1.NotificationTypes.NEW_MESSAGE, notificationtypes_1.NotificationTypes.ADDED_TO_CHANNEL, notificationtypes_1.NotificationTypes.INVITED_TO_CHANNEL, notificationtypes_1.NotificationTypes.REMOVED_FROM_CHANNEL, notificationtypes_1.NotificationTypes.TYPING_INDICATOR, notificationtypes_1.NotificationTypes.CONSUMPTION_UPDATE].forEach(function (messageType) {\n        subscriptions.push(_this2.services.notificationClient.subscribe(messageType, channelType));\n      });\n      return _promise2.default.all(subscriptions);\n    }\n  }, {\n    key: \"unsubscribeFromPushNotifications\",\n    value: function unsubscribeFromPushNotifications(channelType) {\n      var _this3 = this;\n\n      var subscriptions = [];\n      [notificationtypes_1.NotificationTypes.NEW_MESSAGE, notificationtypes_1.NotificationTypes.ADDED_TO_CHANNEL, notificationtypes_1.NotificationTypes.INVITED_TO_CHANNEL, notificationtypes_1.NotificationTypes.REMOVED_FROM_CHANNEL, notificationtypes_1.NotificationTypes.TYPING_INDICATOR, notificationtypes_1.NotificationTypes.CONSUMPTION_UPDATE].forEach(function (messageType) {\n        subscriptions.push(_this3.services.notificationClient.unsubscribe(messageType, channelType));\n      });\n      return _promise2.default.all(subscriptions);\n    }\n  }, {\n    key: \"initialize\",\n    value: function () {\n      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {\n        var _this4 = this;\n\n        var links, options;\n        return _regenerator2.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.sessionPromise;\n\n              case 2:\n                Client.supportedPushChannels.forEach(function (channelType) {\n                  return _this4.subscribeToPushNotifications(channelType);\n                });\n                _context.next = 5;\n                return this.services.session.getSessionLinks();\n\n              case 5:\n                links = _context.sent;\n                this.services.publicChannels = new publicchannels_1.PublicChannels(this, this.services, links.publicChannelsUrl);\n                this.services.userChannels = new userchannels_1.UserChannels(this, this.services, links.myChannelsUrl);\n                options = (0, _assign2.default)(this.options);\n                options.transport = null;\n                this.services.mcsClient = new twilio_mcs_client_1.McsClient(this.fpaToken, links.mediaServiceUrl, options);\n                _context.next = 13;\n                return this.services.typingIndicator.initialize();\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function initialize() {\n        return _ref.apply(this, arguments);\n      }\n\n      return initialize;\n    }()\n    /**\n     * Gracefully shutting down library instance.\n     * @public\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"shutdown\",\n    value: function () {\n      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {\n        return _regenerator2.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.services.twilsockClient.disconnect();\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function shutdown() {\n        return _ref2.apply(this, arguments);\n      }\n\n      return shutdown;\n    }()\n    /**\n     * Update the token used by the Client and re-register with Programmable Chat services.\n     * @param {String} token - Access token\n     * @public\n     * @returns {Promise<Client>}\n     */\n\n  }, {\n    key: \"updateToken\",\n    value: function () {\n      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(token) {\n        var _this5 = this;\n\n        return _regenerator2.default.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                log.info('updateToken');\n\n                if (token) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                throw new Error(MSG_NO_TOKEN);\n\n              case 3:\n                if (!(this.fpaToken === token)) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", this);\n\n              case 5:\n                _context3.next = 7;\n                return this.services.twilsockClient.updateToken(token).then(function () {\n                  return _this5.fpaToken = token;\n                }).then(function () {\n                  return _this5.services.mcsClient.updateToken(token);\n                }).then(function () {\n                  return _this5.sessionPromise;\n                });\n\n              case 7:\n                return _context3.abrupt(\"return\", this);\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function updateToken(_x) {\n        return _ref3.apply(this, arguments);\n      }\n\n      return updateToken;\n    }()\n    /**\n     * Get a known Channel by its SID.\n     * @param {String} channelSid - Channel sid\n     * @returns {Promise<Channel>}\n     */\n\n  }, {\n    key: \"getChannelBySid\",\n    value: function () {\n      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(channelSid) {\n        var _this6 = this;\n\n        return _regenerator2.default.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(!channelSid || typeof channelSid !== 'string')) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw new Error('Client.getChannelBySid requires a <String>channelSid parameter');\n\n              case 2:\n                return _context4.abrupt(\"return\", this.channels.syncListRead.promise.then(function () {\n                  return _this6.channels.getChannel(channelSid).then(function (channel) {\n                    return channel || _this6.services.publicChannels.getChannelBySid(channelSid).then(function (x) {\n                      return _this6.channels.pushChannel(x);\n                    });\n                  });\n                }));\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getChannelBySid(_x2) {\n        return _ref4.apply(this, arguments);\n      }\n\n      return getChannelBySid;\n    }()\n    /**\n     * Get a known Channel by its unique identifier name.\n     * @param {String} uniqueName - The unique identifier name of the Channel to get\n     * @returns {Promise<Channel>}\n     */\n\n  }, {\n    key: \"getChannelByUniqueName\",\n    value: function () {\n      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(uniqueName) {\n        var _this7 = this;\n\n        return _regenerator2.default.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(!uniqueName || typeof uniqueName !== 'string')) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                throw new Error('Client.getChannelByUniqueName requires a <String>uniqueName parameter');\n\n              case 2:\n                return _context5.abrupt(\"return\", this.channels.syncListRead.promise.then(function () {\n                  return _this7.services.publicChannels.getChannelByUniqueName(uniqueName).then(function (x) {\n                    return _this7.channels.pushChannel(x);\n                  });\n                }));\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getChannelByUniqueName(_x3) {\n        return _ref5.apply(this, arguments);\n      }\n\n      return getChannelByUniqueName;\n    }()\n    /**\n     * Get the current list of all subscribed Channels.\n     * @returns {Promise<Paginator<Channel>>}\n     */\n\n  }, {\n    key: \"getSubscribedChannels\",\n    value: function getSubscribedChannels(args) {\n      return this.channelsPromise.then(function (channels) {\n        return channels.getChannels(args);\n      });\n    }\n    /**\n     * Get array of Channels locally known to Client in provided sorting order.\n     * Locally known channels are the ones created and/or joined during client runtime and currently logged in User subscribed Channels.\n     * To ensure full list of subscribed Channels fetched - call the {@link Client#getSubscribedChannels} method\n     * and fetch all pages with help of {@link Paginator#nextPage} method.\n     * @param {Client#ChannelSortingOptions} [sortingOptions] - Options for the Channel sorting\n     * @returns {Promise<Array<Channel>>}\n     */\n\n  }, {\n    key: \"getLocalChannels\",\n    value: function getLocalChannels(sortingOptions) {\n      return this.channelsPromise.then(function (channels) {\n        var result = [];\n        channels.channels.forEach(function (value) {\n          result.push(value);\n        });\n        var sortingOrder = 'ascending';\n\n        if (sortingOptions && sortingOptions.order) {\n          if (sortingOptions.order === 'descending') {\n            sortingOrder = 'descending';\n          } else if (sortingOptions.order !== 'ascending') {\n            throw new Error('Sorting order should be `ascending` or `descending`');\n          }\n        }\n\n        if (sortingOptions && sortingOptions.criteria) {\n          if (sortingOptions.criteria === 'lastMessage') {\n            result.sort(function (a, b) {\n              return Client.compareChannelsByLastMessage(a, b, sortingOrder);\n            });\n          } else if (sortingOptions.criteria === 'uniqueName') {\n            result.sort(function (a, b) {\n              return Client.compareChannelsByStringProperty(a.uniqueName, b.uniqueName, sortingOrder);\n            });\n          } else if (sortingOptions.criteria === 'friendlyName') {\n            result.sort(function (a, b) {\n              return Client.compareChannelsByStringProperty(a.friendlyName, b.friendlyName, sortingOrder);\n            });\n          } else {\n            throw new Error('Sorting criteria should be one of `lastMessage`, `uniqueName` or `friendlyName`');\n          }\n        }\n\n        return result;\n      });\n    }\n  }, {\n    key: \"getPublicChannelDescriptors\",\n\n    /**\n     * Get the public channels directory content.\n     * @returns {Promise<Paginator<ChannelDescriptor>>}\n     */\n    value: function getPublicChannelDescriptors() {\n      return this.services.publicChannels.getChannels();\n    }\n    /**\n     * Get the User's (created by, joined or invited to) channels directory content.\n     * @returns {Promise<Paginator<ChannelDescriptor>>}\n     */\n\n  }, {\n    key: \"getUserChannelDescriptors\",\n    value: function getUserChannelDescriptors() {\n      return this.services.userChannels.getChannels();\n    }\n    /**\n     * Create a Channel on the server and subscribe to its events.\n     * Default options are public Channel type with empty uniqueName and friendlyName.\n     * @param {Client#CreateChannelOptions} [options] - Options for the Channel\n     * @returns {Promise<Channel>}\n     */\n\n  }, {\n    key: \"createChannel\",\n    value: function createChannel(options) {\n      options = options || {};\n      return this.channelsPromise.then(function (channelsEntity) {\n        return channelsEntity.addChannel(options);\n      });\n    }\n    /**\n     * Registers for push notifications.\n     * @param {Client#NotificationsChannelType} channelType - 'gcm', 'apn' and 'fcm' are supported\n     * @param {string} registrationId - Push notification id provided by platform\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"setPushRegistrationId\",\n    value: function () {\n      var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(channelType, registrationId) {\n        var _this8 = this;\n\n        return _regenerator2.default.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!(Client.supportedPushChannels.indexOf(channelType) === -1)) {\n                  _context6.next = 2;\n                  break;\n                }\n\n                throw new Error('Invalid or unsupported channelType: ' + channelType);\n\n              case 2:\n                _context6.next = 4;\n                return this.subscribeToPushNotifications(channelType).then(function () {\n                  return _this8.services.notificationClient.setPushRegistrationId(registrationId, channelType);\n                });\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function setPushRegistrationId(_x4, _x5) {\n        return _ref6.apply(this, arguments);\n      }\n\n      return setPushRegistrationId;\n    }()\n    /**\n     * Unregisters from push notifications.\n     * @param {Client#NotificationsChannelType} channelType - 'gcm', 'apn' and 'fcm' are supported\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"unsetPushRegistrationId\",\n    value: function () {\n      var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(channelType) {\n        return _regenerator2.default.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(Client.supportedPushChannels.indexOf(channelType) === -1)) {\n                  _context7.next = 2;\n                  break;\n                }\n\n                throw new Error('Invalid or unsupported channelType: ' + channelType);\n\n              case 2:\n                _context7.next = 4;\n                return this.unsubscribeFromPushNotifications(channelType);\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function unsetPushRegistrationId(_x6) {\n        return _ref7.apply(this, arguments);\n      }\n\n      return unsetPushRegistrationId;\n    }()\n  }, {\n    key: \"handlePushNotification\",\n\n    /**\n     * Handle push notification payload parsing and emits event {@link Client#event:pushNotification} on this {@link Client} instance.\n     * @param {Object} notificationPayload - Push notification payload\n     * @returns {void|Error}\n     */\n    value: function () {\n      var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(notificationPayload) {\n        return _regenerator2.default.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                log.debug('handlePushNotification, notificationPayload=', notificationPayload);\n                this.emit('pushNotification', Client.parsePushNotification(notificationPayload));\n\n              case 2:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function handlePushNotification(_x7) {\n        return _ref8.apply(this, arguments);\n      }\n\n      return handlePushNotification;\n    }()\n    /**\n     * Gets user for given identity, if it's in subscribed list - then return the user object from it,\n     * if not - then subscribes and adds user to the subscribed list.\n     * @param {String} identity - Identity of User\n     * @returns {Promise<User>} Fully initialized user\n     */\n\n  }, {\n    key: \"getUser\",\n    value: function getUser(identity) {\n      return this.services.users.getUser(identity);\n    }\n    /**\n     * Gets user descriptor for given identity.\n     * @param {String} identity - Identity of User\n     * @returns {Promise<UserDescriptor>} User descriptor\n     */\n\n  }, {\n    key: \"getUserDescriptor\",\n    value: function () {\n      var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9(identity) {\n        return _regenerator2.default.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                return _context9.abrupt(\"return\", this.services.users.getUserDescriptor(identity));\n\n              case 1:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getUserDescriptor(_x8) {\n        return _ref9.apply(this, arguments);\n      }\n\n      return getUserDescriptor;\n    }()\n    /**\n     * @returns {Promise<Array<User>>} List of subscribed User objects\n     */\n\n  }, {\n    key: \"getSubscribedUsers\",\n    value: function () {\n      var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10() {\n        return _regenerator2.default.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                return _context10.abrupt(\"return\", this.services.users.getSubscribedUsers());\n\n              case 1:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function getSubscribedUsers() {\n        return _ref10.apply(this, arguments);\n      }\n\n      return getSubscribedUsers;\n    }()\n  }, {\n    key: \"user\",\n    get: function get() {\n      return this.services.users.myself;\n    }\n  }, {\n    key: \"reachabilityEnabled\",\n    get: function get() {\n      return this.services.session.reachabilityEnabled;\n    }\n  }, {\n    key: \"token\",\n    get: function get() {\n      return this.fpaToken;\n    }\n  }], [{\n    key: \"create\",\n    value: function () {\n      var _ref11 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee11(token, options) {\n        var client;\n        return _regenerator2.default.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                client = new Client(token, options);\n                _context11.next = 3;\n                return client.initialize();\n\n              case 3:\n                return _context11.abrupt(\"return\", client);\n\n              case 4:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function create(_x9, _x10) {\n        return _ref11.apply(this, arguments);\n      }\n\n      return create;\n    }()\n  }, {\n    key: \"compareChannelsByLastMessage\",\n    value: function compareChannelsByLastMessage(a, b, order) {\n      if (a.lastMessage && b.lastMessage) {\n        if (a.lastMessage.timestamp && b.lastMessage.timestamp) {\n          if (a.lastMessage.timestamp.getTime() < b.lastMessage.timestamp.getTime()) {\n            return order === 'ascending' ? -1 : 1;\n          } else {\n            return order === 'ascending' ? 1 : -1;\n          }\n        } else {\n          if (a.lastMessage.timestamp) {\n            return -1;\n          } else if (b.lastMessage.timestamp) {\n            return 1;\n          }\n        }\n      }\n\n      if (a.lastMessage) {\n        return -1;\n      } else if (b.lastMessage) {\n        return 1;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"compareChannelsByStringProperty\",\n    value: function compareChannelsByStringProperty(str1, str2, order) {\n      if (str1 && str2) {\n        return order === 'ascending' ? str1.localeCompare(str2) : -1 * str1.localeCompare(str2);\n      } else if (str1) {\n        return -1;\n      } else if (str2) {\n        return 1;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"parsePushNotificationChatData\",\n    value: function parsePushNotificationChatData(data) {\n      var result = {};\n\n      for (var key in Client.supportedPushDataFields) {\n        if (typeof data[key] !== 'undefined' && data[key] !== null) {\n          if (key === 'message_index') {\n            if (util_1.parseToNumber(data[key]) !== null) {\n              result[Client.supportedPushDataFields[key]] = Number(data[key]);\n            }\n          } else {\n            result[Client.supportedPushDataFields[key]] = data[key];\n          }\n        }\n      }\n\n      return result;\n    }\n    /**\n     * Static method for push notification payload parsing. Returns parsed push as {@link PushNotification} object\n     * @param {Object} notificationPayload - Push notification payload\n     * @returns {PushNotification|Error}\n     */\n\n  }, {\n    key: \"parsePushNotification\",\n    value: function parsePushNotification(notificationPayload) {\n      log.debug('parsePushNotification, notificationPayload=', notificationPayload);\n\n      if (typeof notificationPayload === 'undefined' || notificationPayload === null) {\n        throw new Error('Push notification payload should be provided');\n      } // APNS specifics\n\n\n      if (typeof notificationPayload.aps !== 'undefined') {\n        if (!notificationPayload.twi_message_type) {\n          throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');\n        }\n\n        var data = Client.parsePushNotificationChatData(notificationPayload);\n        var apsPayload = notificationPayload.aps;\n        var body = null;\n        var title = null;\n\n        if (typeof apsPayload.alert === 'string') {\n          body = apsPayload.alert || null;\n        } else {\n          body = apsPayload.alert.body || null;\n          title = apsPayload.alert.title || null;\n        }\n\n        return new pushnotification_1.PushNotification({\n          title: title,\n          body: body,\n          sound: apsPayload.sound || null,\n          badge: apsPayload.badge || null,\n          action: apsPayload.category || null,\n          type: notificationPayload.twi_message_type,\n          data: data\n        });\n      } // FCM/GCM specifics\n\n\n      if (typeof notificationPayload.data !== 'undefined') {\n        var dataPayload = notificationPayload.data;\n\n        if (!dataPayload.twi_message_type) {\n          throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');\n        }\n\n        var _data = Client.parsePushNotificationChatData(notificationPayload.data);\n\n        return new pushnotification_1.PushNotification({\n          title: dataPayload.twi_title || null,\n          body: dataPayload.twi_body || null,\n          sound: dataPayload.twi_sound || null,\n          badge: null,\n          action: dataPayload.twi_action || null,\n          type: dataPayload.twi_message_type,\n          data: _data\n        });\n      }\n\n      throw new Error('Provided push notification payload is not Programmable Chat notification');\n    }\n  }]);\n  return Client;\n}(events_1.EventEmitter);\n\nexports.Client = Client;\nClient.version = SDK_VERSION;\nClient.supportedPushChannels = ['fcm', 'apn', 'gcm'];\nClient.supportedPushDataFields = {\n  'channel_sid': 'channelSid',\n  'message_sid': 'messageSid',\n  'message_index': 'messageIndex'\n};\nexports.default = Client;\n/**\n * Fired when a Channel becomes visible to the Client.\n * Fired for created and not joined private channels and for all type of channels Client has joined or invited to.\n * @event Client#channelAdded\n * @type {Channel}\n */\n\n/**\n * Fired when the Client is invited to a Channel.\n * @event Client#channelInvited\n * @type {Channel}\n */\n\n/**\n * Fired when the Client joins a Channel.\n * @event Client#channelJoined\n * @type {Channel}\n */\n\n/**\n * Fired when the Client leaves a Channel.\n * @event Client#channelLeft\n * @type {Channel}\n */\n\n/**\n * Fired when a Channel is no longer visible to the Client.\n * @event Client#channelRemoved\n * @type {Channel}\n */\n\n/**\n * Fired when a Channel's attributes or metadata have been updated.\n * During Channel's {@link Client.create| creation and initialization} this event might be fired multiple times\n * for same joined or created Channel as new data is arriving from different sources.\n * @event Client#channelUpdated\n * @type {Object}\n * @property {Channel} channel - Updated Channel\n * @property {Channel#UpdateReason[]} updateReasons - Array of Channel's updated event reasons\n */\n\n/**\n * Fired when Client's connection state has been changed.\n * @event Client#connectionStateChanged\n * @type {Client#ConnectionState}\n */\n\n/**\n * Fired when a Member has joined the Channel.\n * @event Client#memberJoined\n * @type {Member}\n */\n\n/**\n * Fired when a Member has left the Channel.\n * @event Client#memberLeft\n * @type {Member}\n */\n\n/**\n * Fired when a Member's fields has been updated.\n * @event Client#memberUpdated\n * @type {Object}\n * @property {Member} member - Updated Member\n * @property {Member#UpdateReason[]} updateReasons - Array of Member's updated event reasons\n */\n\n/**\n * Fired when a new Message has been added to the Channel on the server.\n * @event Client#messageAdded\n * @type {Message}\n */\n\n/**\n * Fired when Message is removed from Channel's message list.\n * @event Client#messageRemoved\n * @type {Message}\n */\n\n/**\n * Fired when an existing Message's fields are updated with new values.\n * @event Client#messageUpdated\n * @type {Object}\n * @property {Message} message - Updated Message\n * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons\n */\n\n/**\n * Fired when token is about to expire and needs to be updated.\n * @event Client#tokenAboutToExpire\n * @type {void}\n */\n\n/**\n * Fired when token is expired.\n * @event Client#tokenExpired\n * @type {void}\n */\n\n/**\n * Fired when a Member has stopped typing.\n * @event Client#typingEnded\n * @type {Member}\n */\n\n/**\n * Fired when a Member has started typing.\n * @event Client#typingStarted\n * @type {Member}\n */\n\n/**\n * Fired when client received (and parsed) push notification via one of push channels (apn, gcm, fcm).\n * @event Client#pushNotification\n * @type {PushNotification}\n */\n\n/**\n * Fired when the Client is subscribed to a User.\n * @event Client#userSubscribed\n * @type {User}\n */\n\n/**\n * Fired when the Client is unsubscribed from a User.\n * @event Client#userUnsubscribed\n * @type {User}\n */\n\n/**\n * Fired when the User's properties or reachability status have been updated.\n * @event Client#userUpdated\n * @type {Object}\n * @property {User} user - Updated User\n * @property {User#UpdateReason[]} updateReasons - Array of User's updated event reasons\n */\n\n/**\n * Fired when connection is interrupted by unexpected reason\n * @event Client#connectionError\n * @type {Object}\n * @property {Boolean} terminal - twilsock will stop connection attempts\n * @property {String} message - root cause\n * @property {Number} [httpStatusCode] - http status code if available\n * @property {Number} [errorCode] - Twilio public error code if available\n */","map":{"version":3,"sources":["C:/Users/khouloud/Documents/PI/MERN_Stack_PI/node_modules/twilio-chat/browser/client.js"],"names":["_regenerator","require","_regenerator2","_interopRequireDefault","_assign","_assign2","_asyncToGenerator2","_asyncToGenerator3","_promise","_promise2","_getPrototypeOf","_getPrototypeOf2","_createClass2","_createClass3","_possibleConstructorReturn2","_possibleConstructorReturn3","_inherits2","_inherits3","_classCallCheck2","_classCallCheck3","obj","__esModule","default","Object","defineProperty","exports","value","events_1","logger_1","configuration_1","user_1","User","publicchannels_1","network_1","notificationtypes_1","synclist_1","twilsock_1","twilio_notifications_1","twilio_sync_1","twilio_mcs_client_1","session_1","channels_1","users_1","typingindicator_1","consumptionhorizon_1","userchannels_1","pushnotification_1","PushNotification","util_1","log","Logger","scope","SDK_VERSION","version","MSG_NO_TOKEN","ClientServices","Client","_events_1$EventEmitte","token","options","_this","__proto__","call","connectionState","sessionPromise","channelsPromise","parsePushNotification","disableDeepClone","deepClone","logLevel","setLevel","productId","Sync","enableSessionStorage","region","Error","services","config","Configuration","twilsockClient","Twilsock","transport","notificationsClient","Notifications","syncClient","SyncClient","notificationClient","session","Session","initialize","network","Network","users","Users","on","emit","bind","args","ttl","error","consumptionHorizon","ConsumptionHorizon","typingIndicator","TypingIndicator","getChannelBySid","syncList","SyncList","channels","Channels","then","fetchChannels","state","changedConnectionState","fpaToken","key","subscribeToPushNotifications","channelType","_this2","subscriptions","NotificationTypes","NEW_MESSAGE","ADDED_TO_CHANNEL","INVITED_TO_CHANNEL","REMOVED_FROM_CHANNEL","TYPING_INDICATOR","CONSUMPTION_UPDATE","forEach","messageType","push","subscribe","all","unsubscribeFromPushNotifications","_this3","unsubscribe","_ref","mark","_callee","_this4","links","wrap","_callee$","_context","prev","next","supportedPushChannels","getSessionLinks","sent","publicChannels","PublicChannels","publicChannelsUrl","userChannels","UserChannels","myChannelsUrl","mcsClient","McsClient","mediaServiceUrl","stop","apply","arguments","_ref2","_callee2","_callee2$","_context2","disconnect","shutdown","_ref3","_callee3","_this5","_callee3$","_context3","info","abrupt","updateToken","_x","_ref4","_callee4","channelSid","_this6","_callee4$","_context4","syncListRead","promise","getChannel","channel","x","pushChannel","_x2","_ref5","_callee5","uniqueName","_this7","_callee5$","_context5","getChannelByUniqueName","_x3","getSubscribedChannels","getChannels","getLocalChannels","sortingOptions","result","sortingOrder","order","criteria","sort","a","b","compareChannelsByLastMessage","compareChannelsByStringProperty","friendlyName","getPublicChannelDescriptors","getUserChannelDescriptors","createChannel","channelsEntity","addChannel","_ref6","_callee6","registrationId","_this8","_callee6$","_context6","indexOf","setPushRegistrationId","_x4","_x5","_ref7","_callee7","_callee7$","_context7","unsetPushRegistrationId","_x6","_ref8","_callee8","notificationPayload","_callee8$","_context8","debug","handlePushNotification","_x7","getUser","identity","_ref9","_callee9","_callee9$","_context9","getUserDescriptor","_x8","_ref10","_callee10","_callee10$","_context10","getSubscribedUsers","get","myself","reachabilityEnabled","_ref11","_callee11","client","_callee11$","_context11","create","_x9","_x10","lastMessage","timestamp","getTime","str1","str2","localeCompare","parsePushNotificationChatData","data","supportedPushDataFields","parseToNumber","Number","aps","twi_message_type","apsPayload","body","title","alert","sound","badge","action","category","type","dataPayload","_data","twi_title","twi_body","twi_sound","twi_action","EventEmitter"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _assign = require(\"babel-runtime/core-js/object/assign\");\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _asyncToGenerator2 = require(\"babel-runtime/helpers/asyncToGenerator\");\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar events_1 = require(\"events\");\nvar logger_1 = require(\"./logger\");\nvar configuration_1 = require(\"./configuration\");\nvar user_1 = require(\"./user\");\nexports.User = user_1.User;\nvar publicchannels_1 = require(\"./data/publicchannels\");\nvar network_1 = require(\"./services/network\");\nvar notificationtypes_1 = require(\"./interfaces/notificationtypes\");\nvar synclist_1 = require(\"./synclist\");\nvar twilsock_1 = require(\"twilsock\");\nvar twilio_notifications_1 = require(\"twilio-notifications\");\nvar twilio_sync_1 = require(\"twilio-sync\");\nvar twilio_mcs_client_1 = require(\"twilio-mcs-client\");\nvar session_1 = require(\"./session\");\nvar channels_1 = require(\"./data/channels\");\nvar users_1 = require(\"./data/users\");\nvar typingindicator_1 = require(\"./services/typingindicator\");\nvar consumptionhorizon_1 = require(\"./services/consumptionhorizon\");\nvar userchannels_1 = require(\"./data/userchannels\");\nvar pushnotification_1 = require(\"./pushnotification\");\nexports.PushNotification = pushnotification_1.PushNotification;\nvar util_1 = require(\"./util\");\nvar log = logger_1.Logger.scope('Client');\nvar SDK_VERSION = require('./../package.json').version;\nvar MSG_NO_TOKEN = 'A valid Twilio token should be provided';\n\nvar ClientServices = function ClientServices() {\n    (0, _classCallCheck3.default)(this, ClientServices);\n};\n/**\n * A Client is a starting point to access Twilio Programmable Chat functionality.\n *\n * @property {Client#ConnectionState} connectionState - Client connection state\n * @property {Boolean} reachabilityEnabled - Client reachability state\n * @property {User} user - Information for logged in user\n * @property {String} version - Current version of Chat client\n *\n * @fires Client#connectionError\n * @fires Client#connectionStateChanged\n * @fires Client#channelAdded\n * @fires Client#channelInvited\n * @fires Client#channelJoined\n * @fires Client#channelLeft\n * @fires Client#channelRemoved\n * @fires Client#channelUpdated\n * @fires Client#memberJoined\n * @fires Client#memberLeft\n * @fires Client#memberUpdated\n * @fires Client#messageAdded\n * @fires Client#messageRemoved\n * @fires Client#messageUpdated\n * @fires Client#pushNotification\n * @fires Client#tokenAboutToExpire\n * @fires Client#tokenExpired\n * @fires Client#typingEnded\n * @fires Client#typingStarted\n * @fires Client#userSubscribed\n * @fires Client#userUnsubscribed\n * @fires Client#userUpdated\n */\n\n\nvar Client = function (_events_1$EventEmitte) {\n    (0, _inherits3.default)(Client, _events_1$EventEmitte);\n\n    /**\n     * These options can be passed to Client constructor.\n     * @typedef {Object} Client#ClientOptions\n     * @property {String} [logLevel='error'] - The level of logging to enable. Valid options\n     *   (from strictest to broadest): ['silent', 'error', 'warn', 'info', 'debug', 'trace']\n     */\n    /**\n     * These options can be passed to {@link Client#createChannel}.\n     * @typedef {Object} Client#CreateChannelOptions\n     * @property {Object} [attributes] - Any custom attributes to attach to the Channel\n     * @property {String} [friendlyName] - The non-unique display name of the Channel\n     * @property {Boolean} [isPrivate] - Whether or not this Channel should be visible to uninvited Clients\n     * @property {String} [uniqueName] - The unique identity name of the Channel\n     */\n    /**\n     * Connection state of Client.\n     * @typedef {('connecting'|'connected'|'disconnecting'|'disconnected'|'denied')} Client#ConnectionState\n     */\n    /**\n     * Notifications channel type.\n     * @typedef {('gcm'|'fcm'|'apn')} Client#NotificationsChannelType\n     */\n    /**\n     * These options can be passed to {@link Client#getLocalChannels}.\n     * @typedef {Object} Client#ChannelSortingOptions\n     * @property {('lastMessage'|'friendlyName'|'uniqueName')} criteria - Sorting criteria for Channels array\n     * @property {('ascending'|'descending')} [order] - Sorting order. If not present, then default is <code>ascending</code>\n     */\n    function Client(token, options) {\n        (0, _classCallCheck3.default)(this, Client);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (Client.__proto__ || (0, _getPrototypeOf2.default)(Client)).call(this));\n\n        _this.connectionState = 'connecting';\n        _this.sessionPromise = null;\n        _this.channelsPromise = null;\n        _this.version = SDK_VERSION;\n        _this.parsePushNotification = Client.parsePushNotification;\n        _this.options = options || {};\n        if (!_this.options.disableDeepClone) {\n            _this.options = util_1.deepClone(_this.options);\n        }\n        _this.options.logLevel = _this.options.logLevel || 'silent';\n        log.setLevel(_this.options.logLevel);\n        var productId = _this.options.productId = 'ip_messaging';\n        // Enable session local storage for Sync\n        _this.options.Sync = _this.options.Sync || {};\n        if (typeof _this.options.Sync.enableSessionStorage === 'undefined') {\n            _this.options.Sync.enableSessionStorage = true;\n        }\n        if (_this.options.region) {\n            _this.options.Sync.region = _this.options.region;\n        }\n        if (!token) {\n            throw new Error(MSG_NO_TOKEN);\n        }\n        _this.services = new ClientServices();\n        _this.config = new configuration_1.Configuration(_this.options);\n        _this.options.twilsockClient = _this.options.twilsockClient || new twilsock_1.Twilsock(token, productId, _this.options);\n        _this.options.transport = _this.options.transport || _this.options.twilsockClient;\n        _this.options.notificationsClient = _this.options.notificationsClient || new twilio_notifications_1.Notifications(token, _this.options);\n        _this.options.syncClient = _this.options.syncClient || new twilio_sync_1.SyncClient(token, _this.options);\n        _this.services.syncClient = _this.options.syncClient;\n        _this.services.transport = _this.options.transport;\n        _this.services.twilsockClient = _this.options.twilsockClient;\n        _this.services.notificationClient = _this.options.notificationsClient;\n        _this.services.session = new session_1.Session(_this.services, _this.config);\n        _this.sessionPromise = _this.services.session.initialize();\n        _this.services.network = new network_1.Network(_this.config, _this.services);\n        _this.services.users = new users_1.Users({\n            session: _this.services.session,\n            network: _this.services.network,\n            syncClient: _this.services.syncClient\n        });\n        _this.services.users.on('userSubscribed', _this.emit.bind(_this, 'userSubscribed'));\n        _this.services.users.on('userUpdated', function (args) {\n            return _this.emit('userUpdated', args);\n        });\n        _this.services.users.on('userUnsubscribed', _this.emit.bind(_this, 'userUnsubscribed'));\n        _this.services.twilsockClient.on('tokenAboutToExpire', function (ttl) {\n            return _this.emit('tokenAboutToExpire', ttl);\n        });\n        _this.services.twilsockClient.on('tokenExpired', function () {\n            return _this.emit('tokenExpired');\n        });\n        _this.services.twilsockClient.on('connectionError', function (error) {\n            return _this.emit('connectionError', error);\n        });\n        _this.services.consumptionHorizon = new consumptionhorizon_1.ConsumptionHorizon(_this.services);\n        _this.services.typingIndicator = new typingindicator_1.TypingIndicator(_this.config, {\n            transport: _this.services.twilsockClient,\n            notificationClient: _this.services.notificationClient\n        }, _this.getChannelBySid.bind(_this));\n        _this.services.syncList = new synclist_1.SyncList(_this.services);\n        _this.channels = new channels_1.Channels(_this.services);\n        _this.channelsPromise = _this.sessionPromise.then(function () {\n            _this.channels.on('channelAdded', _this.emit.bind(_this, 'channelAdded'));\n            _this.channels.on('channelRemoved', _this.emit.bind(_this, 'channelRemoved'));\n            _this.channels.on('channelInvited', _this.emit.bind(_this, 'channelInvited'));\n            _this.channels.on('channelJoined', _this.emit.bind(_this, 'channelJoined'));\n            _this.channels.on('channelLeft', _this.emit.bind(_this, 'channelLeft'));\n            _this.channels.on('channelUpdated', function (args) {\n                return _this.emit('channelUpdated', args);\n            });\n            _this.channels.on('memberJoined', _this.emit.bind(_this, 'memberJoined'));\n            _this.channels.on('memberLeft', _this.emit.bind(_this, 'memberLeft'));\n            _this.channels.on('memberUpdated', function (args) {\n                return _this.emit('memberUpdated', args);\n            });\n            _this.channels.on('messageAdded', _this.emit.bind(_this, 'messageAdded'));\n            _this.channels.on('messageUpdated', function (args) {\n                return _this.emit('messageUpdated', args);\n            });\n            _this.channels.on('messageRemoved', _this.emit.bind(_this, 'messageRemoved'));\n            _this.channels.on('typingStarted', _this.emit.bind(_this, 'typingStarted'));\n            _this.channels.on('typingEnded', _this.emit.bind(_this, 'typingEnded'));\n            return _this.channels.fetchChannels();\n        }).then(function () {\n            return _this.channels;\n        });\n        _this.services.notificationClient.on('connectionStateChanged', function (state) {\n            var changedConnectionState = null;\n            switch (state) {\n                case 'connected':\n                    changedConnectionState = 'connected';\n                    break;\n                case 'denied':\n                    changedConnectionState = 'denied';\n                    break;\n                case 'disconnecting':\n                    changedConnectionState = 'disconnecting';\n                    break;\n                case 'disconnected':\n                    changedConnectionState = 'disconnected';\n                    break;\n                default:\n                    changedConnectionState = 'connecting';\n            }\n            if (changedConnectionState !== _this.connectionState) {\n                _this.connectionState = changedConnectionState;\n                _this.emit('connectionStateChanged', _this.connectionState);\n            }\n        });\n        _this.fpaToken = token;\n        return _this;\n    }\n    /**\n     * Factory method to create Chat client instance.\n     *\n     * @param {String} token - Access token\n     * @param {Client#ClientOptions} options - Options to customize the Client\n     * @returns {Promise<Client>}\n     */\n\n\n    (0, _createClass3.default)(Client, [{\n        key: \"subscribeToPushNotifications\",\n        value: function subscribeToPushNotifications(channelType) {\n            var _this2 = this;\n\n            var subscriptions = [];\n            [notificationtypes_1.NotificationTypes.NEW_MESSAGE, notificationtypes_1.NotificationTypes.ADDED_TO_CHANNEL, notificationtypes_1.NotificationTypes.INVITED_TO_CHANNEL, notificationtypes_1.NotificationTypes.REMOVED_FROM_CHANNEL, notificationtypes_1.NotificationTypes.TYPING_INDICATOR, notificationtypes_1.NotificationTypes.CONSUMPTION_UPDATE].forEach(function (messageType) {\n                subscriptions.push(_this2.services.notificationClient.subscribe(messageType, channelType));\n            });\n            return _promise2.default.all(subscriptions);\n        }\n    }, {\n        key: \"unsubscribeFromPushNotifications\",\n        value: function unsubscribeFromPushNotifications(channelType) {\n            var _this3 = this;\n\n            var subscriptions = [];\n            [notificationtypes_1.NotificationTypes.NEW_MESSAGE, notificationtypes_1.NotificationTypes.ADDED_TO_CHANNEL, notificationtypes_1.NotificationTypes.INVITED_TO_CHANNEL, notificationtypes_1.NotificationTypes.REMOVED_FROM_CHANNEL, notificationtypes_1.NotificationTypes.TYPING_INDICATOR, notificationtypes_1.NotificationTypes.CONSUMPTION_UPDATE].forEach(function (messageType) {\n                subscriptions.push(_this3.services.notificationClient.unsubscribe(messageType, channelType));\n            });\n            return _promise2.default.all(subscriptions);\n        }\n    }, {\n        key: \"initialize\",\n        value: function () {\n            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {\n                var _this4 = this;\n\n                var links, options;\n                return _regenerator2.default.wrap(function _callee$(_context) {\n                    while (1) {\n                        switch (_context.prev = _context.next) {\n                            case 0:\n                                _context.next = 2;\n                                return this.sessionPromise;\n\n                            case 2:\n                                Client.supportedPushChannels.forEach(function (channelType) {\n                                    return _this4.subscribeToPushNotifications(channelType);\n                                });\n                                _context.next = 5;\n                                return this.services.session.getSessionLinks();\n\n                            case 5:\n                                links = _context.sent;\n\n                                this.services.publicChannels = new publicchannels_1.PublicChannels(this, this.services, links.publicChannelsUrl);\n                                this.services.userChannels = new userchannels_1.UserChannels(this, this.services, links.myChannelsUrl);\n                                options = (0, _assign2.default)(this.options);\n\n                                options.transport = null;\n                                this.services.mcsClient = new twilio_mcs_client_1.McsClient(this.fpaToken, links.mediaServiceUrl, options);\n                                _context.next = 13;\n                                return this.services.typingIndicator.initialize();\n\n                            case 13:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }\n                }, _callee, this);\n            }));\n\n            function initialize() {\n                return _ref.apply(this, arguments);\n            }\n\n            return initialize;\n        }()\n        /**\n         * Gracefully shutting down library instance.\n         * @public\n         * @returns {Promise<void>}\n         */\n\n    }, {\n        key: \"shutdown\",\n        value: function () {\n            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {\n                return _regenerator2.default.wrap(function _callee2$(_context2) {\n                    while (1) {\n                        switch (_context2.prev = _context2.next) {\n                            case 0:\n                                _context2.next = 2;\n                                return this.services.twilsockClient.disconnect();\n\n                            case 2:\n                            case \"end\":\n                                return _context2.stop();\n                        }\n                    }\n                }, _callee2, this);\n            }));\n\n            function shutdown() {\n                return _ref2.apply(this, arguments);\n            }\n\n            return shutdown;\n        }()\n        /**\n         * Update the token used by the Client and re-register with Programmable Chat services.\n         * @param {String} token - Access token\n         * @public\n         * @returns {Promise<Client>}\n         */\n\n    }, {\n        key: \"updateToken\",\n        value: function () {\n            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(token) {\n                var _this5 = this;\n\n                return _regenerator2.default.wrap(function _callee3$(_context3) {\n                    while (1) {\n                        switch (_context3.prev = _context3.next) {\n                            case 0:\n                                log.info('updateToken');\n\n                                if (token) {\n                                    _context3.next = 3;\n                                    break;\n                                }\n\n                                throw new Error(MSG_NO_TOKEN);\n\n                            case 3:\n                                if (!(this.fpaToken === token)) {\n                                    _context3.next = 5;\n                                    break;\n                                }\n\n                                return _context3.abrupt(\"return\", this);\n\n                            case 5:\n                                _context3.next = 7;\n                                return this.services.twilsockClient.updateToken(token).then(function () {\n                                    return _this5.fpaToken = token;\n                                }).then(function () {\n                                    return _this5.services.mcsClient.updateToken(token);\n                                }).then(function () {\n                                    return _this5.sessionPromise;\n                                });\n\n                            case 7:\n                                return _context3.abrupt(\"return\", this);\n\n                            case 8:\n                            case \"end\":\n                                return _context3.stop();\n                        }\n                    }\n                }, _callee3, this);\n            }));\n\n            function updateToken(_x) {\n                return _ref3.apply(this, arguments);\n            }\n\n            return updateToken;\n        }()\n        /**\n         * Get a known Channel by its SID.\n         * @param {String} channelSid - Channel sid\n         * @returns {Promise<Channel>}\n         */\n\n    }, {\n        key: \"getChannelBySid\",\n        value: function () {\n            var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(channelSid) {\n                var _this6 = this;\n\n                return _regenerator2.default.wrap(function _callee4$(_context4) {\n                    while (1) {\n                        switch (_context4.prev = _context4.next) {\n                            case 0:\n                                if (!(!channelSid || typeof channelSid !== 'string')) {\n                                    _context4.next = 2;\n                                    break;\n                                }\n\n                                throw new Error('Client.getChannelBySid requires a <String>channelSid parameter');\n\n                            case 2:\n                                return _context4.abrupt(\"return\", this.channels.syncListRead.promise.then(function () {\n                                    return _this6.channels.getChannel(channelSid).then(function (channel) {\n                                        return channel || _this6.services.publicChannels.getChannelBySid(channelSid).then(function (x) {\n                                            return _this6.channels.pushChannel(x);\n                                        });\n                                    });\n                                }));\n\n                            case 3:\n                            case \"end\":\n                                return _context4.stop();\n                        }\n                    }\n                }, _callee4, this);\n            }));\n\n            function getChannelBySid(_x2) {\n                return _ref4.apply(this, arguments);\n            }\n\n            return getChannelBySid;\n        }()\n        /**\n         * Get a known Channel by its unique identifier name.\n         * @param {String} uniqueName - The unique identifier name of the Channel to get\n         * @returns {Promise<Channel>}\n         */\n\n    }, {\n        key: \"getChannelByUniqueName\",\n        value: function () {\n            var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(uniqueName) {\n                var _this7 = this;\n\n                return _regenerator2.default.wrap(function _callee5$(_context5) {\n                    while (1) {\n                        switch (_context5.prev = _context5.next) {\n                            case 0:\n                                if (!(!uniqueName || typeof uniqueName !== 'string')) {\n                                    _context5.next = 2;\n                                    break;\n                                }\n\n                                throw new Error('Client.getChannelByUniqueName requires a <String>uniqueName parameter');\n\n                            case 2:\n                                return _context5.abrupt(\"return\", this.channels.syncListRead.promise.then(function () {\n                                    return _this7.services.publicChannels.getChannelByUniqueName(uniqueName).then(function (x) {\n                                        return _this7.channels.pushChannel(x);\n                                    });\n                                }));\n\n                            case 3:\n                            case \"end\":\n                                return _context5.stop();\n                        }\n                    }\n                }, _callee5, this);\n            }));\n\n            function getChannelByUniqueName(_x3) {\n                return _ref5.apply(this, arguments);\n            }\n\n            return getChannelByUniqueName;\n        }()\n        /**\n         * Get the current list of all subscribed Channels.\n         * @returns {Promise<Paginator<Channel>>}\n         */\n\n    }, {\n        key: \"getSubscribedChannels\",\n        value: function getSubscribedChannels(args) {\n            return this.channelsPromise.then(function (channels) {\n                return channels.getChannels(args);\n            });\n        }\n        /**\n         * Get array of Channels locally known to Client in provided sorting order.\n         * Locally known channels are the ones created and/or joined during client runtime and currently logged in User subscribed Channels.\n         * To ensure full list of subscribed Channels fetched - call the {@link Client#getSubscribedChannels} method\n         * and fetch all pages with help of {@link Paginator#nextPage} method.\n         * @param {Client#ChannelSortingOptions} [sortingOptions] - Options for the Channel sorting\n         * @returns {Promise<Array<Channel>>}\n         */\n\n    }, {\n        key: \"getLocalChannels\",\n        value: function getLocalChannels(sortingOptions) {\n            return this.channelsPromise.then(function (channels) {\n                var result = [];\n                channels.channels.forEach(function (value) {\n                    result.push(value);\n                });\n                var sortingOrder = 'ascending';\n                if (sortingOptions && sortingOptions.order) {\n                    if (sortingOptions.order === 'descending') {\n                        sortingOrder = 'descending';\n                    } else if (sortingOptions.order !== 'ascending') {\n                        throw new Error('Sorting order should be `ascending` or `descending`');\n                    }\n                }\n                if (sortingOptions && sortingOptions.criteria) {\n                    if (sortingOptions.criteria === 'lastMessage') {\n                        result.sort(function (a, b) {\n                            return Client.compareChannelsByLastMessage(a, b, sortingOrder);\n                        });\n                    } else if (sortingOptions.criteria === 'uniqueName') {\n                        result.sort(function (a, b) {\n                            return Client.compareChannelsByStringProperty(a.uniqueName, b.uniqueName, sortingOrder);\n                        });\n                    } else if (sortingOptions.criteria === 'friendlyName') {\n                        result.sort(function (a, b) {\n                            return Client.compareChannelsByStringProperty(a.friendlyName, b.friendlyName, sortingOrder);\n                        });\n                    } else {\n                        throw new Error('Sorting criteria should be one of `lastMessage`, `uniqueName` or `friendlyName`');\n                    }\n                }\n                return result;\n            });\n        }\n    }, {\n        key: \"getPublicChannelDescriptors\",\n\n        /**\n         * Get the public channels directory content.\n         * @returns {Promise<Paginator<ChannelDescriptor>>}\n         */\n        value: function getPublicChannelDescriptors() {\n            return this.services.publicChannels.getChannels();\n        }\n        /**\n         * Get the User's (created by, joined or invited to) channels directory content.\n         * @returns {Promise<Paginator<ChannelDescriptor>>}\n         */\n\n    }, {\n        key: \"getUserChannelDescriptors\",\n        value: function getUserChannelDescriptors() {\n            return this.services.userChannels.getChannels();\n        }\n        /**\n         * Create a Channel on the server and subscribe to its events.\n         * Default options are public Channel type with empty uniqueName and friendlyName.\n         * @param {Client#CreateChannelOptions} [options] - Options for the Channel\n         * @returns {Promise<Channel>}\n         */\n\n    }, {\n        key: \"createChannel\",\n        value: function createChannel(options) {\n            options = options || {};\n            return this.channelsPromise.then(function (channelsEntity) {\n                return channelsEntity.addChannel(options);\n            });\n        }\n        /**\n         * Registers for push notifications.\n         * @param {Client#NotificationsChannelType} channelType - 'gcm', 'apn' and 'fcm' are supported\n         * @param {string} registrationId - Push notification id provided by platform\n         * @returns {Promise<void>}\n         */\n\n    }, {\n        key: \"setPushRegistrationId\",\n        value: function () {\n            var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(channelType, registrationId) {\n                var _this8 = this;\n\n                return _regenerator2.default.wrap(function _callee6$(_context6) {\n                    while (1) {\n                        switch (_context6.prev = _context6.next) {\n                            case 0:\n                                if (!(Client.supportedPushChannels.indexOf(channelType) === -1)) {\n                                    _context6.next = 2;\n                                    break;\n                                }\n\n                                throw new Error('Invalid or unsupported channelType: ' + channelType);\n\n                            case 2:\n                                _context6.next = 4;\n                                return this.subscribeToPushNotifications(channelType).then(function () {\n                                    return _this8.services.notificationClient.setPushRegistrationId(registrationId, channelType);\n                                });\n\n                            case 4:\n                            case \"end\":\n                                return _context6.stop();\n                        }\n                    }\n                }, _callee6, this);\n            }));\n\n            function setPushRegistrationId(_x4, _x5) {\n                return _ref6.apply(this, arguments);\n            }\n\n            return setPushRegistrationId;\n        }()\n        /**\n         * Unregisters from push notifications.\n         * @param {Client#NotificationsChannelType} channelType - 'gcm', 'apn' and 'fcm' are supported\n         * @returns {Promise<void>}\n         */\n\n    }, {\n        key: \"unsetPushRegistrationId\",\n        value: function () {\n            var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(channelType) {\n                return _regenerator2.default.wrap(function _callee7$(_context7) {\n                    while (1) {\n                        switch (_context7.prev = _context7.next) {\n                            case 0:\n                                if (!(Client.supportedPushChannels.indexOf(channelType) === -1)) {\n                                    _context7.next = 2;\n                                    break;\n                                }\n\n                                throw new Error('Invalid or unsupported channelType: ' + channelType);\n\n                            case 2:\n                                _context7.next = 4;\n                                return this.unsubscribeFromPushNotifications(channelType);\n\n                            case 4:\n                            case \"end\":\n                                return _context7.stop();\n                        }\n                    }\n                }, _callee7, this);\n            }));\n\n            function unsetPushRegistrationId(_x6) {\n                return _ref7.apply(this, arguments);\n            }\n\n            return unsetPushRegistrationId;\n        }()\n    }, {\n        key: \"handlePushNotification\",\n\n        /**\n         * Handle push notification payload parsing and emits event {@link Client#event:pushNotification} on this {@link Client} instance.\n         * @param {Object} notificationPayload - Push notification payload\n         * @returns {void|Error}\n         */\n        value: function () {\n            var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(notificationPayload) {\n                return _regenerator2.default.wrap(function _callee8$(_context8) {\n                    while (1) {\n                        switch (_context8.prev = _context8.next) {\n                            case 0:\n                                log.debug('handlePushNotification, notificationPayload=', notificationPayload);\n                                this.emit('pushNotification', Client.parsePushNotification(notificationPayload));\n\n                            case 2:\n                            case \"end\":\n                                return _context8.stop();\n                        }\n                    }\n                }, _callee8, this);\n            }));\n\n            function handlePushNotification(_x7) {\n                return _ref8.apply(this, arguments);\n            }\n\n            return handlePushNotification;\n        }()\n        /**\n         * Gets user for given identity, if it's in subscribed list - then return the user object from it,\n         * if not - then subscribes and adds user to the subscribed list.\n         * @param {String} identity - Identity of User\n         * @returns {Promise<User>} Fully initialized user\n         */\n\n    }, {\n        key: \"getUser\",\n        value: function getUser(identity) {\n            return this.services.users.getUser(identity);\n        }\n        /**\n         * Gets user descriptor for given identity.\n         * @param {String} identity - Identity of User\n         * @returns {Promise<UserDescriptor>} User descriptor\n         */\n\n    }, {\n        key: \"getUserDescriptor\",\n        value: function () {\n            var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9(identity) {\n                return _regenerator2.default.wrap(function _callee9$(_context9) {\n                    while (1) {\n                        switch (_context9.prev = _context9.next) {\n                            case 0:\n                                return _context9.abrupt(\"return\", this.services.users.getUserDescriptor(identity));\n\n                            case 1:\n                            case \"end\":\n                                return _context9.stop();\n                        }\n                    }\n                }, _callee9, this);\n            }));\n\n            function getUserDescriptor(_x8) {\n                return _ref9.apply(this, arguments);\n            }\n\n            return getUserDescriptor;\n        }()\n        /**\n         * @returns {Promise<Array<User>>} List of subscribed User objects\n         */\n\n    }, {\n        key: \"getSubscribedUsers\",\n        value: function () {\n            var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10() {\n                return _regenerator2.default.wrap(function _callee10$(_context10) {\n                    while (1) {\n                        switch (_context10.prev = _context10.next) {\n                            case 0:\n                                return _context10.abrupt(\"return\", this.services.users.getSubscribedUsers());\n\n                            case 1:\n                            case \"end\":\n                                return _context10.stop();\n                        }\n                    }\n                }, _callee10, this);\n            }));\n\n            function getSubscribedUsers() {\n                return _ref10.apply(this, arguments);\n            }\n\n            return getSubscribedUsers;\n        }()\n    }, {\n        key: \"user\",\n        get: function get() {\n            return this.services.users.myself;\n        }\n    }, {\n        key: \"reachabilityEnabled\",\n        get: function get() {\n            return this.services.session.reachabilityEnabled;\n        }\n    }, {\n        key: \"token\",\n        get: function get() {\n            return this.fpaToken;\n        }\n    }], [{\n        key: \"create\",\n        value: function () {\n            var _ref11 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee11(token, options) {\n                var client;\n                return _regenerator2.default.wrap(function _callee11$(_context11) {\n                    while (1) {\n                        switch (_context11.prev = _context11.next) {\n                            case 0:\n                                client = new Client(token, options);\n                                _context11.next = 3;\n                                return client.initialize();\n\n                            case 3:\n                                return _context11.abrupt(\"return\", client);\n\n                            case 4:\n                            case \"end\":\n                                return _context11.stop();\n                        }\n                    }\n                }, _callee11, this);\n            }));\n\n            function create(_x9, _x10) {\n                return _ref11.apply(this, arguments);\n            }\n\n            return create;\n        }()\n    }, {\n        key: \"compareChannelsByLastMessage\",\n        value: function compareChannelsByLastMessage(a, b, order) {\n            if (a.lastMessage && b.lastMessage) {\n                if (a.lastMessage.timestamp && b.lastMessage.timestamp) {\n                    if (a.lastMessage.timestamp.getTime() < b.lastMessage.timestamp.getTime()) {\n                        return order === 'ascending' ? -1 : 1;\n                    } else {\n                        return order === 'ascending' ? 1 : -1;\n                    }\n                } else {\n                    if (a.lastMessage.timestamp) {\n                        return -1;\n                    } else if (b.lastMessage.timestamp) {\n                        return 1;\n                    }\n                }\n            }\n            if (a.lastMessage) {\n                return -1;\n            } else if (b.lastMessage) {\n                return 1;\n            }\n            return 0;\n        }\n    }, {\n        key: \"compareChannelsByStringProperty\",\n        value: function compareChannelsByStringProperty(str1, str2, order) {\n            if (str1 && str2) {\n                return order === 'ascending' ? str1.localeCompare(str2) : -1 * str1.localeCompare(str2);\n            } else if (str1) {\n                return -1;\n            } else if (str2) {\n                return 1;\n            }\n            return 0;\n        }\n    }, {\n        key: \"parsePushNotificationChatData\",\n        value: function parsePushNotificationChatData(data) {\n            var result = {};\n            for (var key in Client.supportedPushDataFields) {\n                if (typeof data[key] !== 'undefined' && data[key] !== null) {\n                    if (key === 'message_index') {\n                        if (util_1.parseToNumber(data[key]) !== null) {\n                            result[Client.supportedPushDataFields[key]] = Number(data[key]);\n                        }\n                    } else {\n                        result[Client.supportedPushDataFields[key]] = data[key];\n                    }\n                }\n            }\n            return result;\n        }\n        /**\n         * Static method for push notification payload parsing. Returns parsed push as {@link PushNotification} object\n         * @param {Object} notificationPayload - Push notification payload\n         * @returns {PushNotification|Error}\n         */\n\n    }, {\n        key: \"parsePushNotification\",\n        value: function parsePushNotification(notificationPayload) {\n            log.debug('parsePushNotification, notificationPayload=', notificationPayload);\n            if (typeof notificationPayload === 'undefined' || notificationPayload === null) {\n                throw new Error('Push notification payload should be provided');\n            }\n            // APNS specifics\n            if (typeof notificationPayload.aps !== 'undefined') {\n                if (!notificationPayload.twi_message_type) {\n                    throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');\n                }\n                var data = Client.parsePushNotificationChatData(notificationPayload);\n                var apsPayload = notificationPayload.aps;\n                var body = null;\n                var title = null;\n                if (typeof apsPayload.alert === 'string') {\n                    body = apsPayload.alert || null;\n                } else {\n                    body = apsPayload.alert.body || null;\n                    title = apsPayload.alert.title || null;\n                }\n                return new pushnotification_1.PushNotification({\n                    title: title,\n                    body: body,\n                    sound: apsPayload.sound || null,\n                    badge: apsPayload.badge || null,\n                    action: apsPayload.category || null,\n                    type: notificationPayload.twi_message_type,\n                    data: data\n                });\n            }\n            // FCM/GCM specifics\n            if (typeof notificationPayload.data !== 'undefined') {\n                var dataPayload = notificationPayload.data;\n                if (!dataPayload.twi_message_type) {\n                    throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');\n                }\n                var _data = Client.parsePushNotificationChatData(notificationPayload.data);\n                return new pushnotification_1.PushNotification({\n                    title: dataPayload.twi_title || null,\n                    body: dataPayload.twi_body || null,\n                    sound: dataPayload.twi_sound || null,\n                    badge: null,\n                    action: dataPayload.twi_action || null,\n                    type: dataPayload.twi_message_type,\n                    data: _data\n                });\n            }\n            throw new Error('Provided push notification payload is not Programmable Chat notification');\n        }\n    }]);\n    return Client;\n}(events_1.EventEmitter);\n\nexports.Client = Client;\nClient.version = SDK_VERSION;\nClient.supportedPushChannels = ['fcm', 'apn', 'gcm'];\nClient.supportedPushDataFields = {\n    'channel_sid': 'channelSid',\n    'message_sid': 'messageSid',\n    'message_index': 'messageIndex'\n};\nexports.default = Client;\n/**\n * Fired when a Channel becomes visible to the Client.\n * Fired for created and not joined private channels and for all type of channels Client has joined or invited to.\n * @event Client#channelAdded\n * @type {Channel}\n */\n/**\n * Fired when the Client is invited to a Channel.\n * @event Client#channelInvited\n * @type {Channel}\n */\n/**\n * Fired when the Client joins a Channel.\n * @event Client#channelJoined\n * @type {Channel}\n */\n/**\n * Fired when the Client leaves a Channel.\n * @event Client#channelLeft\n * @type {Channel}\n */\n/**\n * Fired when a Channel is no longer visible to the Client.\n * @event Client#channelRemoved\n * @type {Channel}\n */\n/**\n * Fired when a Channel's attributes or metadata have been updated.\n * During Channel's {@link Client.create| creation and initialization} this event might be fired multiple times\n * for same joined or created Channel as new data is arriving from different sources.\n * @event Client#channelUpdated\n * @type {Object}\n * @property {Channel} channel - Updated Channel\n * @property {Channel#UpdateReason[]} updateReasons - Array of Channel's updated event reasons\n */\n/**\n * Fired when Client's connection state has been changed.\n * @event Client#connectionStateChanged\n * @type {Client#ConnectionState}\n */\n/**\n * Fired when a Member has joined the Channel.\n * @event Client#memberJoined\n * @type {Member}\n */\n/**\n * Fired when a Member has left the Channel.\n * @event Client#memberLeft\n * @type {Member}\n */\n/**\n * Fired when a Member's fields has been updated.\n * @event Client#memberUpdated\n * @type {Object}\n * @property {Member} member - Updated Member\n * @property {Member#UpdateReason[]} updateReasons - Array of Member's updated event reasons\n */\n/**\n * Fired when a new Message has been added to the Channel on the server.\n * @event Client#messageAdded\n * @type {Message}\n */\n/**\n * Fired when Message is removed from Channel's message list.\n * @event Client#messageRemoved\n * @type {Message}\n */\n/**\n * Fired when an existing Message's fields are updated with new values.\n * @event Client#messageUpdated\n * @type {Object}\n * @property {Message} message - Updated Message\n * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons\n */\n/**\n * Fired when token is about to expire and needs to be updated.\n * @event Client#tokenAboutToExpire\n * @type {void}\n */\n/**\n * Fired when token is expired.\n * @event Client#tokenExpired\n * @type {void}\n */\n/**\n * Fired when a Member has stopped typing.\n * @event Client#typingEnded\n * @type {Member}\n */\n/**\n * Fired when a Member has started typing.\n * @event Client#typingStarted\n * @type {Member}\n */\n/**\n * Fired when client received (and parsed) push notification via one of push channels (apn, gcm, fcm).\n * @event Client#pushNotification\n * @type {PushNotification}\n */\n/**\n * Fired when the Client is subscribed to a User.\n * @event Client#userSubscribed\n * @type {User}\n */\n/**\n * Fired when the Client is unsubscribed from a User.\n * @event Client#userUnsubscribed\n * @type {User}\n */\n/**\n * Fired when the User's properties or reachability status have been updated.\n * @event Client#userUpdated\n * @type {Object}\n * @property {User} user - Updated User\n * @property {User#UpdateReason[]} updateReasons - Array of User's updated event reasons\n */\n/**\n * Fired when connection is interrupted by unexpected reason\n * @event Client#connectionError\n * @type {Object}\n * @property {Boolean} terminal - twilsock will stop connection attempts\n * @property {String} message - root cause\n * @property {Number} [httpStatusCode] - http status code if available\n * @property {Number} [errorCode] - Twilio public error code if available\n */"]},"metadata":{},"sourceType":"script"}