{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\khouloud\\\\Documents\\\\PI\\\\MERN_Stack_PI\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport './App.css';\n\nclass App_chat extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      this.getToken().then(this.createChatClient).then(this.joinGeneralChannel).then(this.configureChannelEvents).catch(error => {\n        this.addMessage({\n          body: \"Error: \".concat(error.message)\n        });\n      });\n    };\n\n    this.getToken = () => {\n      return new Promise((resolve, reject) => {\n        this.setState({\n          messages: [...this.state.messages, {\n            body: \"Connecting...\"\n          }]\n        });\n        $.getJSON('/token', token => {\n          this.setState({\n            username: token.identity\n          });\n          resolve(token);\n        }).fail(() => {\n          reject(Error(\"Failed to connect.\"));\n        });\n      });\n    };\n\n    this.addMessage = message => {\n      const messageData = _objectSpread({}, message, {\n        me: message.author === this.state.username\n      });\n\n      this.setState({\n        messages: [...this.state.messages, messageData]\n      });\n    };\n\n    this.createChatClient = token => {\n      return new Promise((resolve, reject) => {\n        resolve(new TwilioChat(token.jwt));\n      });\n    };\n\n    this.joinGeneralChannel = chatClient => {\n      return new Promise((resolve, reject) => {\n        chatClient.getSubscribedChannels().then(() => {\n          chatClient.getChannelByUniqueName('general').then(channel => {\n            this.addMessage({\n              body: 'Joining general channel...'\n            });\n            this.setState({\n              channel\n            });\n            channel.join().then(() => {\n              this.addMessage({\n                body: \"Joined general channel as \".concat(this.state.username)\n              });\n              window.addEventListener('beforeunload', () => channel.leave());\n            }).catch(() => reject(Error('Could not join general channel.')));\n            resolve(channel);\n          }).catch(() => reject(Error(\"Could not find general channel\")));\n        }).catch(() => reject(Error('Could not get channel list.')));\n      });\n    };\n\n    this.createGeneralChannel = chatClient => {\n      return new Promise((resolve, reject) => {\n        this.addMessage({\n          body: 'Creating general channel...'\n        });\n        chatClient.createChannel({\n          uniqueName: 'general',\n          friendlyName: 'General Chat'\n        }).then(() => this.joinGeneralChannel(chatClient)).catch(() => reject(Error('Could not create general channel.')));\n      });\n    };\n\n    this.configureChannelEvents = channel => {\n      channel.on('messageAdded', ({\n        author,\n        body\n      }) => {\n        this.addMessage({\n          author,\n          body\n        });\n      });\n      channel.on('memberJoined', member => {\n        this.addMessage({\n          body: \"\".concat(member.identity, \" has joined the channel.\")\n        });\n      });\n      channel.on('memberLeft', member => {\n        this.addMessage({\n          body: \"\".concat(member.identity, \" has left the channel.\")\n        });\n      });\n    };\n\n    this.handleNewMessage = text => {\n      if (this.state.channel) {\n        this.state.channel.sendMessage(text);\n      }\n    };\n\n    this.state = {\n      messages: [],\n      username: null,\n      channel: null\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/khouloud/Documents/PI/MERN_Stack_PI/src/components/App/App_chat.js"],"names":["React","Component","$","App_chat","constructor","props","componentDidMount","getToken","then","createChatClient","joinGeneralChannel","configureChannelEvents","catch","error","addMessage","body","message","Promise","resolve","reject","setState","messages","state","getJSON","token","username","identity","fail","Error","messageData","me","author","TwilioChat","jwt","chatClient","getSubscribedChannels","getChannelByUniqueName","channel","join","window","addEventListener","leave","createGeneralChannel","createChannel","uniqueName","friendlyName","on","member","handleNewMessage","text","sendMessage"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport $ from 'jquery'\r\nimport './App.css'\r\n\r\nclass App_chat extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            messages: [],\r\n            username: null,\r\n            channel: null,\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.getToken()\r\n            .then(this.createChatClient)\r\n            .then(this.joinGeneralChannel)\r\n            .then(this.configureChannelEvents)\r\n            .catch((error) => {\r\n                this.addMessage({ body: `Error: ${error.message}` })\r\n            })\r\n    }\r\n\r\n// ...\r\n\r\n    getToken = () => {\r\n        return new Promise((resolve, reject) => {\r\n            this.setState({\r\n                messages: [...this.state.messages, {body: `Connecting...`}],\r\n            })\r\n\r\n            $.getJSON('/token', (token) => {\r\n                this.setState({username: token.identity})\r\n                resolve(token)\r\n            }).fail(() => {\r\n                reject(Error(\"Failed to connect.\"))\r\n            })\r\n        })\r\n    }\r\n\r\n    addMessage = (message) => {\r\n        const messageData = { ...message, me: message.author === this.state.username }\r\n        this.setState({\r\n            messages: [...this.state.messages, messageData],\r\n        })\r\n    }\r\n    createChatClient = (token) => {\r\n        return new Promise((resolve, reject) => {\r\n            resolve(new TwilioChat(token.jwt))\r\n        })\r\n    }\r\n    joinGeneralChannel = (chatClient) => {\r\n        return new Promise((resolve, reject) => {\r\n            chatClient.getSubscribedChannels().then(() => {\r\n                chatClient.getChannelByUniqueName('general').then((channel) => {\r\n                    this.addMessage({ body: 'Joining general channel...' })\r\n                    this.setState({ channel })\r\n\r\n                    channel.join().then(() => {\r\n                        this.addMessage({ body: `Joined general channel as ${this.state.username}` })\r\n                        window.addEventListener('beforeunload', () => channel.leave())\r\n                    }).catch(() => reject(Error('Could not join general channel.')))\r\n\r\n                    resolve(channel)\r\n                }).catch(() => reject(Error(\"Could not find general channel\")))\r\n            }).catch(() => reject(Error('Could not get channel list.')))\r\n        })\r\n    }\r\n\r\n    createGeneralChannel = (chatClient) => {\r\n        return new Promise((resolve, reject) => {\r\n            this.addMessage({ body: 'Creating general channel...' })\r\n            chatClient\r\n                .createChannel({ uniqueName: 'general', friendlyName: 'General Chat' })\r\n                .then(() => this.joinGeneralChannel(chatClient))\r\n                .catch(() => reject(Error('Could not create general channel.')))\r\n        })\r\n    }\r\n    configureChannelEvents = (channel) => {\r\n        channel.on('messageAdded', ({ author, body }) => {\r\n            this.addMessage({ author, body })\r\n        })\r\n\r\n        channel.on('memberJoined', (member) => {\r\n            this.addMessage({ body: `${member.identity} has joined the channel.` })\r\n        })\r\n\r\n        channel.on('memberLeft', (member) => {\r\n            this.addMessage({ body: `${member.identity} has left the channel.` })\r\n        })\r\n    }\r\n    handleNewMessage = (text) => {\r\n        if (this.state.channel) {\r\n            this.state.channel.sendMessage(text)\r\n        }\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}